using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Bounds = UnityEngine.Bounds;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dTextMesh class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dTextMesh
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_FormattedText()
        {
            if (!HookedList.Contains("get_FormattedText"))
            {
                HookedList.Add("get_FormattedText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_FormattedText"), get_FormattedText);
            }
        }

        internal static event Delegates.get_FormattedText_BeforeArgs _beforeget_FormattedText;
        internal static event Delegates.get_FormattedText_NormalArgs _afterget_FormattedText;

        private static string get_FormattedText(Func<tk2dTextMesh, string> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_FormattedText @params = new()
            {
                self = self
            };
            _beforeget_FormattedText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FormattedText != null) retVal = _afterget_FormattedText.Invoke(@params);
            return retVal;
        }

        internal static void HookUpgradeData()
        {
            if (!HookedList.Contains("UpgradeData"))
            {
                HookedList.Add("UpgradeData");
                On.tk2dTextMesh.UpgradeData += UpgradeData;
            }
        }

        internal static event Delegates.UpgradeData_BeforeArgs _beforeUpgradeData;
        internal static event Delegates.UpgradeData_NormalArgs _afterUpgradeData;

        private static void UpgradeData(On.tk2dTextMesh.orig_UpgradeData orig, tk2dTextMesh self)
        {
            Delegates.Params_UpgradeData @params = new()
            {
                self = self
            };
            _beforeUpgradeData?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpgradeData != null) _afterUpgradeData.Invoke(@params);
        }

        internal static void HookGetInlineStyleCommandLength()
        {
            if (!HookedList.Contains("GetInlineStyleCommandLength"))
            {
                HookedList.Add("GetInlineStyleCommandLength");
                On.tk2dTextMesh.GetInlineStyleCommandLength += GetInlineStyleCommandLength;
            }
        }

        internal static event Delegates.GetInlineStyleCommandLength_BeforeArgs _beforeGetInlineStyleCommandLength;
        internal static event Delegates.GetInlineStyleCommandLength_NormalArgs _afterGetInlineStyleCommandLength;

        private static int GetInlineStyleCommandLength(On.tk2dTextMesh.orig_GetInlineStyleCommandLength orig,
            int cmdSymbol)
        {
            Delegates.Params_GetInlineStyleCommandLength @params = new()
            {
                cmdSymbol = cmdSymbol
            };
            _beforeGetInlineStyleCommandLength?.Invoke(@params);
            cmdSymbol = @params.cmdSymbol;
            var retVal = orig(cmdSymbol);
            if (_afterGetInlineStyleCommandLength != null) retVal = _afterGetInlineStyleCommandLength.Invoke(@params);
            return retVal;
        }

        internal static void HookFormatText_string()
        {
            if (!HookedList.Contains("FormatText_string"))
            {
                HookedList.Add("FormatText_string");
                On.tk2dTextMesh.FormatText_string += FormatText_string;
            }
        }

        internal static event Delegates.FormatText_string_BeforeArgs _beforeFormatText_string;
        internal static event Delegates.FormatText_string_NormalArgs _afterFormatText_string;

        private static string FormatText_string(On.tk2dTextMesh.orig_FormatText_string orig, tk2dTextMesh self,
            string unformattedString)
        {
            Delegates.Params_FormatText_string @params = new()
            {
                self = self, unformattedString = unformattedString
            };
            _beforeFormatText_string?.Invoke(@params);
            self = @params.self;
            unformattedString = @params.unformattedString;
            var retVal = orig(self, unformattedString);
            if (_afterFormatText_string != null) retVal = _afterFormatText_string.Invoke(@params);
            return retVal;
        }

        internal static void HookFormatText()
        {
            if (!HookedList.Contains("FormatText"))
            {
                HookedList.Add("FormatText");
                On.tk2dTextMesh.FormatText += FormatText;
            }
        }

        internal static event Delegates.FormatText_BeforeArgs _beforeFormatText;
        internal static event Delegates.FormatText_NormalArgs _afterFormatText;

        private static void FormatText(On.tk2dTextMesh.orig_FormatText orig, tk2dTextMesh self)
        {
            Delegates.Params_FormatText @params = new()
            {
                self = self
            };
            _beforeFormatText?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFormatText != null) _afterFormatText.Invoke(@params);
        }

        internal static void HookFormatText_string_string()
        {
            if (!HookedList.Contains("FormatText_string_string"))
            {
                HookedList.Add("FormatText_string_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "FormatText_string_string"),
                    FormatText_string_string);
            }
        }

        internal static event Delegates.FormatText_string_string_BeforeArgs _beforeFormatText_string_string;
        internal static event Delegates.FormatText_string_string_NormalArgs _afterFormatText_string_string;

        private static void FormatText_string_string(Action<tk2dTextMesh, string, string> orig, tk2dTextMesh self,
            string _targetString, string _source)
        {
            Delegates.Params_FormatText_string_string @params = new()
            {
                self = self, _targetString = _targetString, _source = _source
            };
            _beforeFormatText_string_string?.Invoke(@params);
            self = @params.self;
            _targetString = @params._targetString;
            _source = @params._source;
            orig(self, _targetString, _source);
            if (_afterFormatText_string_string != null) _afterFormatText_string_string.Invoke(@params);
        }

        internal static void Hookget_font()
        {
            if (!HookedList.Contains("get_font"))
            {
                HookedList.Add("get_font");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_font"), get_font);
            }
        }

        internal static event Delegates.get_font_BeforeArgs _beforeget_font;
        internal static event Delegates.get_font_NormalArgs _afterget_font;

        private static tk2dFontData get_font(Func<tk2dTextMesh, tk2dFontData> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_font @params = new()
            {
                self = self
            };
            _beforeget_font?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_font != null) retVal = _afterget_font.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_font()
        {
            if (!HookedList.Contains("set_font"))
            {
                HookedList.Add("set_font");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_font"), set_font);
            }
        }

        internal static event Delegates.set_font_BeforeArgs _beforeset_font;
        internal static event Delegates.set_font_NormalArgs _afterset_font;

        private static void set_font(Action<tk2dTextMesh, tk2dFontData> orig, tk2dTextMesh self, tk2dFontData value)
        {
            Delegates.Params_set_font @params = new()
            {
                self = self, value = value
            };
            _beforeset_font?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_font != null) _afterset_font.Invoke(@params);
        }

        internal static void Hookget_formatting()
        {
            if (!HookedList.Contains("get_formatting"))
            {
                HookedList.Add("get_formatting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_formatting"), get_formatting);
            }
        }

        internal static event Delegates.get_formatting_BeforeArgs _beforeget_formatting;
        internal static event Delegates.get_formatting_NormalArgs _afterget_formatting;

        private static bool get_formatting(Func<tk2dTextMesh, bool> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_formatting @params = new()
            {
                self = self
            };
            _beforeget_formatting?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_formatting != null) retVal = _afterget_formatting.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_formatting()
        {
            if (!HookedList.Contains("set_formatting"))
            {
                HookedList.Add("set_formatting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_formatting"), set_formatting);
            }
        }

        internal static event Delegates.set_formatting_BeforeArgs _beforeset_formatting;
        internal static event Delegates.set_formatting_NormalArgs _afterset_formatting;

        private static void set_formatting(Action<tk2dTextMesh, bool> orig, tk2dTextMesh self, bool value)
        {
            Delegates.Params_set_formatting @params = new()
            {
                self = self, value = value
            };
            _beforeset_formatting?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_formatting != null) _afterset_formatting.Invoke(@params);
        }

        internal static void Hookget_wordWrapWidth()
        {
            if (!HookedList.Contains("get_wordWrapWidth"))
            {
                HookedList.Add("get_wordWrapWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_wordWrapWidth"), get_wordWrapWidth);
            }
        }

        internal static event Delegates.get_wordWrapWidth_BeforeArgs _beforeget_wordWrapWidth;
        internal static event Delegates.get_wordWrapWidth_NormalArgs _afterget_wordWrapWidth;

        private static int get_wordWrapWidth(Func<tk2dTextMesh, int> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_wordWrapWidth @params = new()
            {
                self = self
            };
            _beforeget_wordWrapWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_wordWrapWidth != null) retVal = _afterget_wordWrapWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_wordWrapWidth()
        {
            if (!HookedList.Contains("set_wordWrapWidth"))
            {
                HookedList.Add("set_wordWrapWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_wordWrapWidth"), set_wordWrapWidth);
            }
        }

        internal static event Delegates.set_wordWrapWidth_BeforeArgs _beforeset_wordWrapWidth;
        internal static event Delegates.set_wordWrapWidth_NormalArgs _afterset_wordWrapWidth;

        private static void set_wordWrapWidth(Action<tk2dTextMesh, int> orig, tk2dTextMesh self, int value)
        {
            Delegates.Params_set_wordWrapWidth @params = new()
            {
                self = self, value = value
            };
            _beforeset_wordWrapWidth?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_wordWrapWidth != null) _afterset_wordWrapWidth.Invoke(@params);
        }

        internal static void Hookget_text()
        {
            if (!HookedList.Contains("get_text"))
            {
                HookedList.Add("get_text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_text"), get_text);
            }
        }

        internal static event Delegates.get_text_BeforeArgs _beforeget_text;
        internal static event Delegates.get_text_NormalArgs _afterget_text;

        private static string get_text(Func<tk2dTextMesh, string> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_text @params = new()
            {
                self = self
            };
            _beforeget_text?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_text != null) retVal = _afterget_text.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_text()
        {
            if (!HookedList.Contains("set_text"))
            {
                HookedList.Add("set_text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_text"), set_text);
            }
        }

        internal static event Delegates.set_text_BeforeArgs _beforeset_text;
        internal static event Delegates.set_text_NormalArgs _afterset_text;

        private static void set_text(Action<tk2dTextMesh, string> orig, tk2dTextMesh self, string value)
        {
            Delegates.Params_set_text @params = new()
            {
                self = self, value = value
            };
            _beforeset_text?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_text != null) _afterset_text.Invoke(@params);
        }

        internal static void Hookget_color()
        {
            if (!HookedList.Contains("get_color"))
            {
                HookedList.Add("get_color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_color"), get_color);
            }
        }

        internal static event Delegates.get_color_BeforeArgs _beforeget_color;
        internal static event Delegates.get_color_NormalArgs _afterget_color;

        private static Color get_color(Func<tk2dTextMesh, Color> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_color @params = new()
            {
                self = self
            };
            _beforeget_color?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_color != null) retVal = _afterget_color.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_color()
        {
            if (!HookedList.Contains("set_color"))
            {
                HookedList.Add("set_color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_color"), set_color);
            }
        }

        internal static event Delegates.set_color_BeforeArgs _beforeset_color;
        internal static event Delegates.set_color_NormalArgs _afterset_color;

        private static void set_color(Action<tk2dTextMesh, Color> orig, tk2dTextMesh self, Color value)
        {
            Delegates.Params_set_color @params = new()
            {
                self = self, value = value
            };
            _beforeset_color?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_color != null) _afterset_color.Invoke(@params);
        }

        internal static void Hookget_color2()
        {
            if (!HookedList.Contains("get_color2"))
            {
                HookedList.Add("get_color2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_color2"), get_color2);
            }
        }

        internal static event Delegates.get_color2_BeforeArgs _beforeget_color2;
        internal static event Delegates.get_color2_NormalArgs _afterget_color2;

        private static Color get_color2(Func<tk2dTextMesh, Color> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_color2 @params = new()
            {
                self = self
            };
            _beforeget_color2?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_color2 != null) retVal = _afterget_color2.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_color2()
        {
            if (!HookedList.Contains("set_color2"))
            {
                HookedList.Add("set_color2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_color2"), set_color2);
            }
        }

        internal static event Delegates.set_color2_BeforeArgs _beforeset_color2;
        internal static event Delegates.set_color2_NormalArgs _afterset_color2;

        private static void set_color2(Action<tk2dTextMesh, Color> orig, tk2dTextMesh self, Color value)
        {
            Delegates.Params_set_color2 @params = new()
            {
                self = self, value = value
            };
            _beforeset_color2?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_color2 != null) _afterset_color2.Invoke(@params);
        }

        internal static void Hookget_useGradient()
        {
            if (!HookedList.Contains("get_useGradient"))
            {
                HookedList.Add("get_useGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_useGradient"), get_useGradient);
            }
        }

        internal static event Delegates.get_useGradient_BeforeArgs _beforeget_useGradient;
        internal static event Delegates.get_useGradient_NormalArgs _afterget_useGradient;

        private static bool get_useGradient(Func<tk2dTextMesh, bool> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_useGradient @params = new()
            {
                self = self
            };
            _beforeget_useGradient?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_useGradient != null) retVal = _afterget_useGradient.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_useGradient()
        {
            if (!HookedList.Contains("set_useGradient"))
            {
                HookedList.Add("set_useGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_useGradient"), set_useGradient);
            }
        }

        internal static event Delegates.set_useGradient_BeforeArgs _beforeset_useGradient;
        internal static event Delegates.set_useGradient_NormalArgs _afterset_useGradient;

        private static void set_useGradient(Action<tk2dTextMesh, bool> orig, tk2dTextMesh self, bool value)
        {
            Delegates.Params_set_useGradient @params = new()
            {
                self = self, value = value
            };
            _beforeset_useGradient?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_useGradient != null) _afterset_useGradient.Invoke(@params);
        }

        internal static void Hookget_anchor()
        {
            if (!HookedList.Contains("get_anchor"))
            {
                HookedList.Add("get_anchor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_anchor"), get_anchor);
            }
        }

        internal static event Delegates.get_anchor_BeforeArgs _beforeget_anchor;
        internal static event Delegates.get_anchor_NormalArgs _afterget_anchor;

        private static TextAnchor get_anchor(Func<tk2dTextMesh, TextAnchor> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_anchor @params = new()
            {
                self = self
            };
            _beforeget_anchor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_anchor != null) retVal = _afterget_anchor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_anchor()
        {
            if (!HookedList.Contains("set_anchor"))
            {
                HookedList.Add("set_anchor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_anchor"), set_anchor);
            }
        }

        internal static event Delegates.set_anchor_BeforeArgs _beforeset_anchor;
        internal static event Delegates.set_anchor_NormalArgs _afterset_anchor;

        private static void set_anchor(Action<tk2dTextMesh, TextAnchor> orig, tk2dTextMesh self, TextAnchor value)
        {
            Delegates.Params_set_anchor @params = new()
            {
                self = self, value = value
            };
            _beforeset_anchor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_anchor != null) _afterset_anchor.Invoke(@params);
        }

        internal static void Hookget_scale()
        {
            if (!HookedList.Contains("get_scale"))
            {
                HookedList.Add("get_scale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_scale"), get_scale);
            }
        }

        internal static event Delegates.get_scale_BeforeArgs _beforeget_scale;
        internal static event Delegates.get_scale_NormalArgs _afterget_scale;

        private static Vector3 get_scale(Func<tk2dTextMesh, Vector3> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_scale @params = new()
            {
                self = self
            };
            _beforeget_scale?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_scale != null) retVal = _afterget_scale.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_scale()
        {
            if (!HookedList.Contains("set_scale"))
            {
                HookedList.Add("set_scale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_scale"), set_scale);
            }
        }

        internal static event Delegates.set_scale_BeforeArgs _beforeset_scale;
        internal static event Delegates.set_scale_NormalArgs _afterset_scale;

        private static void set_scale(Action<tk2dTextMesh, Vector3> orig, tk2dTextMesh self, Vector3 value)
        {
            Delegates.Params_set_scale @params = new()
            {
                self = self, value = value
            };
            _beforeset_scale?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_scale != null) _afterset_scale.Invoke(@params);
        }

        internal static void Hookget_kerning()
        {
            if (!HookedList.Contains("get_kerning"))
            {
                HookedList.Add("get_kerning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_kerning"), get_kerning);
            }
        }

        internal static event Delegates.get_kerning_BeforeArgs _beforeget_kerning;
        internal static event Delegates.get_kerning_NormalArgs _afterget_kerning;

        private static bool get_kerning(Func<tk2dTextMesh, bool> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_kerning @params = new()
            {
                self = self
            };
            _beforeget_kerning?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_kerning != null) retVal = _afterget_kerning.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_kerning()
        {
            if (!HookedList.Contains("set_kerning"))
            {
                HookedList.Add("set_kerning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_kerning"), set_kerning);
            }
        }

        internal static event Delegates.set_kerning_BeforeArgs _beforeset_kerning;
        internal static event Delegates.set_kerning_NormalArgs _afterset_kerning;

        private static void set_kerning(Action<tk2dTextMesh, bool> orig, tk2dTextMesh self, bool value)
        {
            Delegates.Params_set_kerning @params = new()
            {
                self = self, value = value
            };
            _beforeset_kerning?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_kerning != null) _afterset_kerning.Invoke(@params);
        }

        internal static void Hookget_maxChars()
        {
            if (!HookedList.Contains("get_maxChars"))
            {
                HookedList.Add("get_maxChars");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_maxChars"), get_maxChars);
            }
        }

        internal static event Delegates.get_maxChars_BeforeArgs _beforeget_maxChars;
        internal static event Delegates.get_maxChars_NormalArgs _afterget_maxChars;

        private static int get_maxChars(Func<tk2dTextMesh, int> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_maxChars @params = new()
            {
                self = self
            };
            _beforeget_maxChars?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maxChars != null) retVal = _afterget_maxChars.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maxChars()
        {
            if (!HookedList.Contains("set_maxChars"))
            {
                HookedList.Add("set_maxChars");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_maxChars"), set_maxChars);
            }
        }

        internal static event Delegates.set_maxChars_BeforeArgs _beforeset_maxChars;
        internal static event Delegates.set_maxChars_NormalArgs _afterset_maxChars;

        private static void set_maxChars(Action<tk2dTextMesh, int> orig, tk2dTextMesh self, int value)
        {
            Delegates.Params_set_maxChars @params = new()
            {
                self = self, value = value
            };
            _beforeset_maxChars?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maxChars != null) _afterset_maxChars.Invoke(@params);
        }

        internal static void Hookget_textureGradient()
        {
            if (!HookedList.Contains("get_textureGradient"))
            {
                HookedList.Add("get_textureGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_textureGradient"),
                    get_textureGradient);
            }
        }

        internal static event Delegates.get_textureGradient_BeforeArgs _beforeget_textureGradient;
        internal static event Delegates.get_textureGradient_NormalArgs _afterget_textureGradient;

        private static int get_textureGradient(Func<tk2dTextMesh, int> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_textureGradient @params = new()
            {
                self = self
            };
            _beforeget_textureGradient?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_textureGradient != null) retVal = _afterget_textureGradient.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_textureGradient()
        {
            if (!HookedList.Contains("set_textureGradient"))
            {
                HookedList.Add("set_textureGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_textureGradient"),
                    set_textureGradient);
            }
        }

        internal static event Delegates.set_textureGradient_BeforeArgs _beforeset_textureGradient;
        internal static event Delegates.set_textureGradient_NormalArgs _afterset_textureGradient;

        private static void set_textureGradient(Action<tk2dTextMesh, int> orig, tk2dTextMesh self, int value)
        {
            Delegates.Params_set_textureGradient @params = new()
            {
                self = self, value = value
            };
            _beforeset_textureGradient?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_textureGradient != null) _afterset_textureGradient.Invoke(@params);
        }

        internal static void Hookget_inlineStyling()
        {
            if (!HookedList.Contains("get_inlineStyling"))
            {
                HookedList.Add("get_inlineStyling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_inlineStyling"), get_inlineStyling);
            }
        }

        internal static event Delegates.get_inlineStyling_BeforeArgs _beforeget_inlineStyling;
        internal static event Delegates.get_inlineStyling_NormalArgs _afterget_inlineStyling;

        private static bool get_inlineStyling(Func<tk2dTextMesh, bool> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_inlineStyling @params = new()
            {
                self = self
            };
            _beforeget_inlineStyling?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_inlineStyling != null) retVal = _afterget_inlineStyling.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_inlineStyling()
        {
            if (!HookedList.Contains("set_inlineStyling"))
            {
                HookedList.Add("set_inlineStyling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_inlineStyling"), set_inlineStyling);
            }
        }

        internal static event Delegates.set_inlineStyling_BeforeArgs _beforeset_inlineStyling;
        internal static event Delegates.set_inlineStyling_NormalArgs _afterset_inlineStyling;

        private static void set_inlineStyling(Action<tk2dTextMesh, bool> orig, tk2dTextMesh self, bool value)
        {
            Delegates.Params_set_inlineStyling @params = new()
            {
                self = self, value = value
            };
            _beforeset_inlineStyling?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_inlineStyling != null) _afterset_inlineStyling.Invoke(@params);
        }

        internal static void Hookget_Spacing()
        {
            if (!HookedList.Contains("get_Spacing"))
            {
                HookedList.Add("get_Spacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_Spacing"), get_Spacing);
            }
        }

        internal static event Delegates.get_Spacing_BeforeArgs _beforeget_Spacing;
        internal static event Delegates.get_Spacing_NormalArgs _afterget_Spacing;

        private static float get_Spacing(Func<tk2dTextMesh, float> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_Spacing @params = new()
            {
                self = self
            };
            _beforeget_Spacing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Spacing != null) retVal = _afterget_Spacing.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Spacing()
        {
            if (!HookedList.Contains("set_Spacing"))
            {
                HookedList.Add("set_Spacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_Spacing"), set_Spacing);
            }
        }

        internal static event Delegates.set_Spacing_BeforeArgs _beforeset_Spacing;
        internal static event Delegates.set_Spacing_NormalArgs _afterset_Spacing;

        private static void set_Spacing(Action<tk2dTextMesh, float> orig, tk2dTextMesh self, float value)
        {
            Delegates.Params_set_Spacing @params = new()
            {
                self = self, value = value
            };
            _beforeset_Spacing?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Spacing != null) _afterset_Spacing.Invoke(@params);
        }

        internal static void Hookget_LineSpacing()
        {
            if (!HookedList.Contains("get_LineSpacing"))
            {
                HookedList.Add("get_LineSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_LineSpacing"), get_LineSpacing);
            }
        }

        internal static event Delegates.get_LineSpacing_BeforeArgs _beforeget_LineSpacing;
        internal static event Delegates.get_LineSpacing_NormalArgs _afterget_LineSpacing;

        private static float get_LineSpacing(Func<tk2dTextMesh, float> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_LineSpacing @params = new()
            {
                self = self
            };
            _beforeget_LineSpacing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LineSpacing != null) retVal = _afterget_LineSpacing.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LineSpacing()
        {
            if (!HookedList.Contains("set_LineSpacing"))
            {
                HookedList.Add("set_LineSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_LineSpacing"), set_LineSpacing);
            }
        }

        internal static event Delegates.set_LineSpacing_BeforeArgs _beforeset_LineSpacing;
        internal static event Delegates.set_LineSpacing_NormalArgs _afterset_LineSpacing;

        private static void set_LineSpacing(Action<tk2dTextMesh, float> orig, tk2dTextMesh self, float value)
        {
            Delegates.Params_set_LineSpacing @params = new()
            {
                self = self, value = value
            };
            _beforeset_LineSpacing?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LineSpacing != null) _afterset_LineSpacing.Invoke(@params);
        }

        internal static void Hookget_SortingOrder()
        {
            if (!HookedList.Contains("get_SortingOrder"))
            {
                HookedList.Add("get_SortingOrder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_SortingOrder"), get_SortingOrder);
            }
        }

        internal static event Delegates.get_SortingOrder_BeforeArgs _beforeget_SortingOrder;
        internal static event Delegates.get_SortingOrder_NormalArgs _afterget_SortingOrder;

        private static int get_SortingOrder(Func<tk2dTextMesh, int> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_SortingOrder @params = new()
            {
                self = self
            };
            _beforeget_SortingOrder?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SortingOrder != null) retVal = _afterget_SortingOrder.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SortingOrder()
        {
            if (!HookedList.Contains("set_SortingOrder"))
            {
                HookedList.Add("set_SortingOrder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_SortingOrder"), set_SortingOrder);
            }
        }

        internal static event Delegates.set_SortingOrder_BeforeArgs _beforeset_SortingOrder;
        internal static event Delegates.set_SortingOrder_NormalArgs _afterset_SortingOrder;

        private static void set_SortingOrder(Action<tk2dTextMesh, int> orig, tk2dTextMesh self, int value)
        {
            Delegates.Params_set_SortingOrder @params = new()
            {
                self = self, value = value
            };
            _beforeset_SortingOrder?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SortingOrder != null) _afterset_SortingOrder.Invoke(@params);
        }

        internal static void HookInitInstance()
        {
            if (!HookedList.Contains("InitInstance"))
            {
                HookedList.Add("InitInstance");
                On.tk2dTextMesh.InitInstance += InitInstance;
            }
        }

        internal static event Delegates.InitInstance_BeforeArgs _beforeInitInstance;
        internal static event Delegates.InitInstance_NormalArgs _afterInitInstance;

        private static void InitInstance(On.tk2dTextMesh.orig_InitInstance orig, tk2dTextMesh self)
        {
            Delegates.Params_InitInstance @params = new()
            {
                self = self
            };
            _beforeInitInstance?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInitInstance != null) _afterInitInstance.Invoke(@params);
        }

        internal static void Hookget_CachedRenderer()
        {
            if (!HookedList.Contains("get_CachedRenderer"))
            {
                HookedList.Add("get_CachedRenderer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_CachedRenderer"),
                    get_CachedRenderer);
            }
        }

        internal static event Delegates.get_CachedRenderer_BeforeArgs _beforeget_CachedRenderer;
        internal static event Delegates.get_CachedRenderer_NormalArgs _afterget_CachedRenderer;

        private static Renderer get_CachedRenderer(Func<tk2dTextMesh, Renderer> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_CachedRenderer @params = new()
            {
                self = self
            };
            _beforeget_CachedRenderer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CachedRenderer != null) retVal = _afterget_CachedRenderer.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dTextMesh.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dTextMesh.orig_Awake orig, tk2dTextMesh self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dTextMesh.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dTextMesh.orig_OnDestroy orig, tk2dTextMesh self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void Hookget_useInlineStyling()
        {
            if (!HookedList.Contains("get_useInlineStyling"))
            {
                HookedList.Add("get_useInlineStyling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_useInlineStyling"),
                    get_useInlineStyling);
            }
        }

        internal static event Delegates.get_useInlineStyling_BeforeArgs _beforeget_useInlineStyling;
        internal static event Delegates.get_useInlineStyling_NormalArgs _afterget_useInlineStyling;

        private static bool get_useInlineStyling(Func<tk2dTextMesh, bool> orig, tk2dTextMesh self)
        {
            Delegates.Params_get_useInlineStyling @params = new()
            {
                self = self
            };
            _beforeget_useInlineStyling?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_useInlineStyling != null) retVal = _afterget_useInlineStyling.Invoke(@params);
            return retVal;
        }

        internal static void HookNumDrawnCharacters()
        {
            if (!HookedList.Contains("NumDrawnCharacters"))
            {
                HookedList.Add("NumDrawnCharacters");
                On.tk2dTextMesh.NumDrawnCharacters += NumDrawnCharacters;
            }
        }

        internal static event Delegates.NumDrawnCharacters_BeforeArgs _beforeNumDrawnCharacters;
        internal static event Delegates.NumDrawnCharacters_NormalArgs _afterNumDrawnCharacters;

        private static int NumDrawnCharacters(On.tk2dTextMesh.orig_NumDrawnCharacters orig, tk2dTextMesh self)
        {
            Delegates.Params_NumDrawnCharacters @params = new()
            {
                self = self
            };
            _beforeNumDrawnCharacters?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterNumDrawnCharacters != null) retVal = _afterNumDrawnCharacters.Invoke(@params);
            return retVal;
        }

        internal static void HookNumTotalCharacters()
        {
            if (!HookedList.Contains("NumTotalCharacters"))
            {
                HookedList.Add("NumTotalCharacters");
                On.tk2dTextMesh.NumTotalCharacters += NumTotalCharacters;
            }
        }

        internal static event Delegates.NumTotalCharacters_BeforeArgs _beforeNumTotalCharacters;
        internal static event Delegates.NumTotalCharacters_NormalArgs _afterNumTotalCharacters;

        private static int NumTotalCharacters(On.tk2dTextMesh.orig_NumTotalCharacters orig, tk2dTextMesh self)
        {
            Delegates.Params_NumTotalCharacters @params = new()
            {
                self = self
            };
            _beforeNumTotalCharacters?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterNumTotalCharacters != null) retVal = _afterNumTotalCharacters.Invoke(@params);
            return retVal;
        }

        internal static void HookGetMeshDimensionsForString()
        {
            if (!HookedList.Contains("GetMeshDimensionsForString"))
            {
                HookedList.Add("GetMeshDimensionsForString");
                On.tk2dTextMesh.GetMeshDimensionsForString += GetMeshDimensionsForString;
            }
        }

        internal static event Delegates.GetMeshDimensionsForString_BeforeArgs _beforeGetMeshDimensionsForString;
        internal static event Delegates.GetMeshDimensionsForString_NormalArgs _afterGetMeshDimensionsForString;

        private static Vector2 GetMeshDimensionsForString(On.tk2dTextMesh.orig_GetMeshDimensionsForString orig,
            tk2dTextMesh self, string str)
        {
            Delegates.Params_GetMeshDimensionsForString @params = new()
            {
                self = self, str = str
            };
            _beforeGetMeshDimensionsForString?.Invoke(@params);
            self = @params.self;
            str = @params.str;
            var retVal = orig(self, str);
            if (_afterGetMeshDimensionsForString != null) retVal = _afterGetMeshDimensionsForString.Invoke(@params);
            return retVal;
        }

        internal static void HookGetEstimatedMeshBoundsForString()
        {
            if (!HookedList.Contains("GetEstimatedMeshBoundsForString"))
            {
                HookedList.Add("GetEstimatedMeshBoundsForString");
                On.tk2dTextMesh.GetEstimatedMeshBoundsForString += GetEstimatedMeshBoundsForString;
            }
        }

        internal static event Delegates.GetEstimatedMeshBoundsForString_BeforeArgs
            _beforeGetEstimatedMeshBoundsForString;

        internal static event Delegates.GetEstimatedMeshBoundsForString_NormalArgs
            _afterGetEstimatedMeshBoundsForString;

        private static Bounds GetEstimatedMeshBoundsForString(On.tk2dTextMesh.orig_GetEstimatedMeshBoundsForString orig,
            tk2dTextMesh self, string str)
        {
            Delegates.Params_GetEstimatedMeshBoundsForString @params = new()
            {
                self = self, str = str
            };
            _beforeGetEstimatedMeshBoundsForString?.Invoke(@params);
            self = @params.self;
            str = @params.str;
            var retVal = orig(self, str);
            if (_afterGetEstimatedMeshBoundsForString != null)
                retVal = _afterGetEstimatedMeshBoundsForString.Invoke(@params);
            return retVal;
        }

        internal static void HookInit_bool()
        {
            if (!HookedList.Contains("Init_bool"))
            {
                HookedList.Add("Init_bool");
                On.tk2dTextMesh.Init_bool += Init_bool;
            }
        }

        internal static event Delegates.Init_bool_BeforeArgs _beforeInit_bool;
        internal static event Delegates.Init_bool_NormalArgs _afterInit_bool;

        private static void Init_bool(On.tk2dTextMesh.orig_Init_bool orig, tk2dTextMesh self, bool force)
        {
            Delegates.Params_Init_bool @params = new()
            {
                self = self, force = force
            };
            _beforeInit_bool?.Invoke(@params);
            self = @params.self;
            force = @params.force;
            orig(self, force);
            if (_afterInit_bool != null) _afterInit_bool.Invoke(@params);
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.tk2dTextMesh.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_NormalArgs _afterInit;

        private static void Init(On.tk2dTextMesh.orig_Init orig, tk2dTextMesh self)
        {
            Delegates.Params_Init @params = new()
            {
                self = self
            };
            _beforeInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInit != null) _afterInit.Invoke(@params);
        }

        internal static void HookCommit()
        {
            if (!HookedList.Contains("Commit"))
            {
                HookedList.Add("Commit");
                On.tk2dTextMesh.Commit += Commit;
            }
        }

        internal static event Delegates.Commit_BeforeArgs _beforeCommit;
        internal static event Delegates.Commit_NormalArgs _afterCommit;

        private static void Commit(On.tk2dTextMesh.orig_Commit orig, tk2dTextMesh self)
        {
            Delegates.Params_Commit @params = new()
            {
                self = self
            };
            _beforeCommit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCommit != null) _afterCommit.Invoke(@params);
        }

        internal static void HookDoNotUse__CommitInternal()
        {
            if (!HookedList.Contains("DoNotUse__CommitInternal"))
            {
                HookedList.Add("DoNotUse__CommitInternal");
                On.tk2dTextMesh.DoNotUse__CommitInternal += DoNotUse__CommitInternal;
            }
        }

        internal static event Delegates.DoNotUse__CommitInternal_BeforeArgs _beforeDoNotUse__CommitInternal;
        internal static event Delegates.DoNotUse__CommitInternal_NormalArgs _afterDoNotUse__CommitInternal;

        private static void DoNotUse__CommitInternal(On.tk2dTextMesh.orig_DoNotUse__CommitInternal orig,
            tk2dTextMesh self)
        {
            Delegates.Params_DoNotUse__CommitInternal @params = new()
            {
                self = self
            };
            _beforeDoNotUse__CommitInternal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoNotUse__CommitInternal != null) _afterDoNotUse__CommitInternal.Invoke(@params);
        }

        internal static void HookMakePixelPerfect()
        {
            if (!HookedList.Contains("MakePixelPerfect"))
            {
                HookedList.Add("MakePixelPerfect");
                On.tk2dTextMesh.MakePixelPerfect += MakePixelPerfect;
            }
        }

        internal static event Delegates.MakePixelPerfect_BeforeArgs _beforeMakePixelPerfect;
        internal static event Delegates.MakePixelPerfect_NormalArgs _afterMakePixelPerfect;

        private static void MakePixelPerfect(On.tk2dTextMesh.orig_MakePixelPerfect orig, tk2dTextMesh self)
        {
            Delegates.Params_MakePixelPerfect @params = new()
            {
                self = self
            };
            _beforeMakePixelPerfect?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMakePixelPerfect != null) _afterMakePixelPerfect.Invoke(@params);
        }

        internal static void HookUsesSpriteCollection()
        {
            if (!HookedList.Contains("UsesSpriteCollection"))
            {
                HookedList.Add("UsesSpriteCollection");
                On.tk2dTextMesh.UsesSpriteCollection += UsesSpriteCollection;
            }
        }

        internal static event Delegates.UsesSpriteCollection_BeforeArgs _beforeUsesSpriteCollection;
        internal static event Delegates.UsesSpriteCollection_NormalArgs _afterUsesSpriteCollection;

        private static bool UsesSpriteCollection(On.tk2dTextMesh.orig_UsesSpriteCollection orig, tk2dTextMesh self,
            tk2dSpriteCollectionData spriteCollection)
        {
            Delegates.Params_UsesSpriteCollection @params = new()
            {
                self = self, spriteCollection = spriteCollection
            };
            _beforeUsesSpriteCollection?.Invoke(@params);
            self = @params.self;
            spriteCollection = @params.spriteCollection;
            var retVal = orig(self, spriteCollection);
            if (_afterUsesSpriteCollection != null) retVal = _afterUsesSpriteCollection.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                On.tk2dTextMesh.UpdateMaterial += UpdateMaterial;
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_NormalArgs _afterUpdateMaterial;

        private static void UpdateMaterial(On.tk2dTextMesh.orig_UpdateMaterial orig, tk2dTextMesh self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            _beforeUpdateMaterial?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null) _afterUpdateMaterial.Invoke(@params);
        }

        internal static void HookForceBuild()
        {
            if (!HookedList.Contains("ForceBuild"))
            {
                HookedList.Add("ForceBuild");
                On.tk2dTextMesh.ForceBuild += ForceBuild;
            }
        }

        internal static event Delegates.ForceBuild_BeforeArgs _beforeForceBuild;
        internal static event Delegates.ForceBuild_NormalArgs _afterForceBuild;

        private static void ForceBuild(On.tk2dTextMesh.orig_ForceBuild orig, tk2dTextMesh self)
        {
            Delegates.Params_ForceBuild @params = new()
            {
                self = self
            };
            _beforeForceBuild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceBuild != null) _afterForceBuild.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Commit_BeforeArgs(Params_Commit args);

        public delegate void Commit_NormalArgs(Params_Commit args);

        public delegate void DoNotUse__CommitInternal_BeforeArgs(Params_DoNotUse__CommitInternal args);

        public delegate void DoNotUse__CommitInternal_NormalArgs(Params_DoNotUse__CommitInternal args);

        public delegate void ForceBuild_BeforeArgs(Params_ForceBuild args);

        public delegate void ForceBuild_NormalArgs(Params_ForceBuild args);

        public delegate void FormatText_BeforeArgs(Params_FormatText args);

        public delegate void FormatText_NormalArgs(Params_FormatText args);

        public delegate void FormatText_string_BeforeArgs(Params_FormatText_string args);

        public delegate string FormatText_string_NormalArgs(Params_FormatText_string args);

        public delegate void FormatText_string_string_BeforeArgs(Params_FormatText_string_string args);

        public delegate void FormatText_string_string_NormalArgs(Params_FormatText_string_string args);

        public delegate void get_anchor_BeforeArgs(Params_get_anchor args);

        public delegate TextAnchor get_anchor_NormalArgs(Params_get_anchor args);

        public delegate void get_CachedRenderer_BeforeArgs(Params_get_CachedRenderer args);

        public delegate Renderer get_CachedRenderer_NormalArgs(Params_get_CachedRenderer args);

        public delegate void get_color_BeforeArgs(Params_get_color args);

        public delegate Color get_color_NormalArgs(Params_get_color args);

        public delegate void get_color2_BeforeArgs(Params_get_color2 args);

        public delegate Color get_color2_NormalArgs(Params_get_color2 args);

        public delegate void get_font_BeforeArgs(Params_get_font args);

        public delegate tk2dFontData get_font_NormalArgs(Params_get_font args);

        public delegate void get_FormattedText_BeforeArgs(Params_get_FormattedText args);

        public delegate string get_FormattedText_NormalArgs(Params_get_FormattedText args);

        public delegate void get_formatting_BeforeArgs(Params_get_formatting args);

        public delegate bool get_formatting_NormalArgs(Params_get_formatting args);

        public delegate void get_inlineStyling_BeforeArgs(Params_get_inlineStyling args);

        public delegate bool get_inlineStyling_NormalArgs(Params_get_inlineStyling args);

        public delegate void get_kerning_BeforeArgs(Params_get_kerning args);

        public delegate bool get_kerning_NormalArgs(Params_get_kerning args);

        public delegate void get_LineSpacing_BeforeArgs(Params_get_LineSpacing args);

        public delegate float get_LineSpacing_NormalArgs(Params_get_LineSpacing args);

        public delegate void get_maxChars_BeforeArgs(Params_get_maxChars args);

        public delegate int get_maxChars_NormalArgs(Params_get_maxChars args);

        public delegate void get_scale_BeforeArgs(Params_get_scale args);

        public delegate Vector3 get_scale_NormalArgs(Params_get_scale args);

        public delegate void get_SortingOrder_BeforeArgs(Params_get_SortingOrder args);

        public delegate int get_SortingOrder_NormalArgs(Params_get_SortingOrder args);

        public delegate void get_Spacing_BeforeArgs(Params_get_Spacing args);

        public delegate float get_Spacing_NormalArgs(Params_get_Spacing args);

        public delegate void get_text_BeforeArgs(Params_get_text args);

        public delegate string get_text_NormalArgs(Params_get_text args);

        public delegate void get_textureGradient_BeforeArgs(Params_get_textureGradient args);

        public delegate int get_textureGradient_NormalArgs(Params_get_textureGradient args);

        public delegate void get_useGradient_BeforeArgs(Params_get_useGradient args);

        public delegate bool get_useGradient_NormalArgs(Params_get_useGradient args);

        public delegate void get_useInlineStyling_BeforeArgs(Params_get_useInlineStyling args);

        public delegate bool get_useInlineStyling_NormalArgs(Params_get_useInlineStyling args);

        public delegate void get_wordWrapWidth_BeforeArgs(Params_get_wordWrapWidth args);

        public delegate int get_wordWrapWidth_NormalArgs(Params_get_wordWrapWidth args);

        public delegate void GetEstimatedMeshBoundsForString_BeforeArgs(Params_GetEstimatedMeshBoundsForString args);

        public delegate Bounds GetEstimatedMeshBoundsForString_NormalArgs(Params_GetEstimatedMeshBoundsForString args);

        public delegate void GetInlineStyleCommandLength_BeforeArgs(Params_GetInlineStyleCommandLength args);

        public delegate int GetInlineStyleCommandLength_NormalArgs(Params_GetInlineStyleCommandLength args);

        public delegate void GetMeshDimensionsForString_BeforeArgs(Params_GetMeshDimensionsForString args);

        public delegate Vector2 GetMeshDimensionsForString_NormalArgs(Params_GetMeshDimensionsForString args);

        public delegate void Init_BeforeArgs(Params_Init args);

        public delegate void Init_bool_BeforeArgs(Params_Init_bool args);

        public delegate void Init_bool_NormalArgs(Params_Init_bool args);

        public delegate void Init_NormalArgs(Params_Init args);

        public delegate void InitInstance_BeforeArgs(Params_InitInstance args);

        public delegate void InitInstance_NormalArgs(Params_InitInstance args);

        public delegate void MakePixelPerfect_BeforeArgs(Params_MakePixelPerfect args);

        public delegate void MakePixelPerfect_NormalArgs(Params_MakePixelPerfect args);

        public delegate void NumDrawnCharacters_BeforeArgs(Params_NumDrawnCharacters args);

        public delegate int NumDrawnCharacters_NormalArgs(Params_NumDrawnCharacters args);

        public delegate void NumTotalCharacters_BeforeArgs(Params_NumTotalCharacters args);

        public delegate int NumTotalCharacters_NormalArgs(Params_NumTotalCharacters args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void set_anchor_BeforeArgs(Params_set_anchor args);

        public delegate void set_anchor_NormalArgs(Params_set_anchor args);

        public delegate void set_color_BeforeArgs(Params_set_color args);

        public delegate void set_color_NormalArgs(Params_set_color args);

        public delegate void set_color2_BeforeArgs(Params_set_color2 args);

        public delegate void set_color2_NormalArgs(Params_set_color2 args);

        public delegate void set_font_BeforeArgs(Params_set_font args);

        public delegate void set_font_NormalArgs(Params_set_font args);

        public delegate void set_formatting_BeforeArgs(Params_set_formatting args);

        public delegate void set_formatting_NormalArgs(Params_set_formatting args);

        public delegate void set_inlineStyling_BeforeArgs(Params_set_inlineStyling args);

        public delegate void set_inlineStyling_NormalArgs(Params_set_inlineStyling args);

        public delegate void set_kerning_BeforeArgs(Params_set_kerning args);

        public delegate void set_kerning_NormalArgs(Params_set_kerning args);

        public delegate void set_LineSpacing_BeforeArgs(Params_set_LineSpacing args);

        public delegate void set_LineSpacing_NormalArgs(Params_set_LineSpacing args);

        public delegate void set_maxChars_BeforeArgs(Params_set_maxChars args);

        public delegate void set_maxChars_NormalArgs(Params_set_maxChars args);

        public delegate void set_scale_BeforeArgs(Params_set_scale args);

        public delegate void set_scale_NormalArgs(Params_set_scale args);

        public delegate void set_SortingOrder_BeforeArgs(Params_set_SortingOrder args);

        public delegate void set_SortingOrder_NormalArgs(Params_set_SortingOrder args);

        public delegate void set_Spacing_BeforeArgs(Params_set_Spacing args);

        public delegate void set_Spacing_NormalArgs(Params_set_Spacing args);

        public delegate void set_text_BeforeArgs(Params_set_text args);

        public delegate void set_text_NormalArgs(Params_set_text args);

        public delegate void set_textureGradient_BeforeArgs(Params_set_textureGradient args);

        public delegate void set_textureGradient_NormalArgs(Params_set_textureGradient args);

        public delegate void set_useGradient_BeforeArgs(Params_set_useGradient args);

        public delegate void set_useGradient_NormalArgs(Params_set_useGradient args);

        public delegate void set_wordWrapWidth_BeforeArgs(Params_set_wordWrapWidth args);

        public delegate void set_wordWrapWidth_NormalArgs(Params_set_wordWrapWidth args);

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_NormalArgs(Params_UpdateMaterial args);

        public delegate void UpgradeData_BeforeArgs(Params_UpgradeData args);

        public delegate void UpgradeData_NormalArgs(Params_UpgradeData args);

        public delegate void UsesSpriteCollection_BeforeArgs(Params_UsesSpriteCollection args);

        public delegate bool UsesSpriteCollection_NormalArgs(Params_UsesSpriteCollection args);

        public sealed class Params_get_FormattedText
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_UpgradeData
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_GetInlineStyleCommandLength
        {
            public int cmdSymbol;
        }

        public sealed class Params_FormatText_string
        {
            public tk2dTextMesh self;
            public string unformattedString;
        }

        public sealed class Params_FormatText
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_FormatText_string_string
        {
            public string _source;
            public string _targetString;
            public tk2dTextMesh self;
        }

        public sealed class Params_get_font
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_font
        {
            public tk2dTextMesh self;
            public tk2dFontData value;
        }

        public sealed class Params_get_formatting
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_formatting
        {
            public tk2dTextMesh self;
            public bool value;
        }

        public sealed class Params_get_wordWrapWidth
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_wordWrapWidth
        {
            public tk2dTextMesh self;
            public int value;
        }

        public sealed class Params_get_text
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_text
        {
            public tk2dTextMesh self;
            public string value;
        }

        public sealed class Params_get_color
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_color
        {
            public tk2dTextMesh self;
            public Color value;
        }

        public sealed class Params_get_color2
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_color2
        {
            public tk2dTextMesh self;
            public Color value;
        }

        public sealed class Params_get_useGradient
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_useGradient
        {
            public tk2dTextMesh self;
            public bool value;
        }

        public sealed class Params_get_anchor
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_anchor
        {
            public tk2dTextMesh self;
            public TextAnchor value;
        }

        public sealed class Params_get_scale
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_scale
        {
            public tk2dTextMesh self;
            public Vector3 value;
        }

        public sealed class Params_get_kerning
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_kerning
        {
            public tk2dTextMesh self;
            public bool value;
        }

        public sealed class Params_get_maxChars
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_maxChars
        {
            public tk2dTextMesh self;
            public int value;
        }

        public sealed class Params_get_textureGradient
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_textureGradient
        {
            public tk2dTextMesh self;
            public int value;
        }

        public sealed class Params_get_inlineStyling
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_inlineStyling
        {
            public tk2dTextMesh self;
            public bool value;
        }

        public sealed class Params_get_Spacing
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_Spacing
        {
            public tk2dTextMesh self;
            public float value;
        }

        public sealed class Params_get_LineSpacing
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_LineSpacing
        {
            public tk2dTextMesh self;
            public float value;
        }

        public sealed class Params_get_SortingOrder
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_set_SortingOrder
        {
            public tk2dTextMesh self;
            public int value;
        }

        public sealed class Params_InitInstance
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_get_CachedRenderer
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_Awake
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_get_useInlineStyling
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_NumDrawnCharacters
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_NumTotalCharacters
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_GetMeshDimensionsForString
        {
            public tk2dTextMesh self;
            public string str;
        }

        public sealed class Params_GetEstimatedMeshBoundsForString
        {
            public tk2dTextMesh self;
            public string str;
        }

        public sealed class Params_Init_bool
        {
            public bool force;
            public tk2dTextMesh self;
        }

        public sealed class Params_Init
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_Commit
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_DoNotUse__CommitInternal
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_MakePixelPerfect
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_UsesSpriteCollection
        {
            public tk2dTextMesh self;
            public tk2dSpriteCollectionData spriteCollection;
        }

        public sealed class Params_UpdateMaterial
        {
            public tk2dTextMesh self;
        }

        public sealed class Params_ForceBuild
        {
            public tk2dTextMesh self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_FormattedText_BeforeArgs get_FormattedText
        {
            add
            {
                HookHandler._beforeget_FormattedText += value;
                HookHandler.Hookget_FormattedText();
            }
            remove => HookHandler._beforeget_FormattedText -= value;
        }

        public static event Delegates.UpgradeData_BeforeArgs UpgradeData
        {
            add
            {
                HookHandler._beforeUpgradeData += value;
                HookHandler.HookUpgradeData();
            }
            remove => HookHandler._beforeUpgradeData -= value;
        }

        public static event Delegates.GetInlineStyleCommandLength_BeforeArgs GetInlineStyleCommandLength
        {
            add
            {
                HookHandler._beforeGetInlineStyleCommandLength += value;
                HookHandler.HookGetInlineStyleCommandLength();
            }
            remove => HookHandler._beforeGetInlineStyleCommandLength -= value;
        }

        public static event Delegates.FormatText_string_BeforeArgs FormatText_string
        {
            add
            {
                HookHandler._beforeFormatText_string += value;
                HookHandler.HookFormatText_string();
            }
            remove => HookHandler._beforeFormatText_string -= value;
        }

        public static event Delegates.FormatText_BeforeArgs FormatText
        {
            add
            {
                HookHandler._beforeFormatText += value;
                HookHandler.HookFormatText();
            }
            remove => HookHandler._beforeFormatText -= value;
        }

        public static event Delegates.FormatText_string_string_BeforeArgs FormatText_string_string
        {
            add
            {
                HookHandler._beforeFormatText_string_string += value;
                HookHandler.HookFormatText_string_string();
            }
            remove => HookHandler._beforeFormatText_string_string -= value;
        }

        public static event Delegates.get_font_BeforeArgs get_font
        {
            add
            {
                HookHandler._beforeget_font += value;
                HookHandler.Hookget_font();
            }
            remove => HookHandler._beforeget_font -= value;
        }

        public static event Delegates.set_font_BeforeArgs set_font
        {
            add
            {
                HookHandler._beforeset_font += value;
                HookHandler.Hookset_font();
            }
            remove => HookHandler._beforeset_font -= value;
        }

        public static event Delegates.get_formatting_BeforeArgs get_formatting
        {
            add
            {
                HookHandler._beforeget_formatting += value;
                HookHandler.Hookget_formatting();
            }
            remove => HookHandler._beforeget_formatting -= value;
        }

        public static event Delegates.set_formatting_BeforeArgs set_formatting
        {
            add
            {
                HookHandler._beforeset_formatting += value;
                HookHandler.Hookset_formatting();
            }
            remove => HookHandler._beforeset_formatting -= value;
        }

        public static event Delegates.get_wordWrapWidth_BeforeArgs get_wordWrapWidth
        {
            add
            {
                HookHandler._beforeget_wordWrapWidth += value;
                HookHandler.Hookget_wordWrapWidth();
            }
            remove => HookHandler._beforeget_wordWrapWidth -= value;
        }

        public static event Delegates.set_wordWrapWidth_BeforeArgs set_wordWrapWidth
        {
            add
            {
                HookHandler._beforeset_wordWrapWidth += value;
                HookHandler.Hookset_wordWrapWidth();
            }
            remove => HookHandler._beforeset_wordWrapWidth -= value;
        }

        public static event Delegates.get_text_BeforeArgs get_text
        {
            add
            {
                HookHandler._beforeget_text += value;
                HookHandler.Hookget_text();
            }
            remove => HookHandler._beforeget_text -= value;
        }

        public static event Delegates.set_text_BeforeArgs set_text
        {
            add
            {
                HookHandler._beforeset_text += value;
                HookHandler.Hookset_text();
            }
            remove => HookHandler._beforeset_text -= value;
        }

        public static event Delegates.get_color_BeforeArgs get_color
        {
            add
            {
                HookHandler._beforeget_color += value;
                HookHandler.Hookget_color();
            }
            remove => HookHandler._beforeget_color -= value;
        }

        public static event Delegates.set_color_BeforeArgs set_color
        {
            add
            {
                HookHandler._beforeset_color += value;
                HookHandler.Hookset_color();
            }
            remove => HookHandler._beforeset_color -= value;
        }

        public static event Delegates.get_color2_BeforeArgs get_color2
        {
            add
            {
                HookHandler._beforeget_color2 += value;
                HookHandler.Hookget_color2();
            }
            remove => HookHandler._beforeget_color2 -= value;
        }

        public static event Delegates.set_color2_BeforeArgs set_color2
        {
            add
            {
                HookHandler._beforeset_color2 += value;
                HookHandler.Hookset_color2();
            }
            remove => HookHandler._beforeset_color2 -= value;
        }

        public static event Delegates.get_useGradient_BeforeArgs get_useGradient
        {
            add
            {
                HookHandler._beforeget_useGradient += value;
                HookHandler.Hookget_useGradient();
            }
            remove => HookHandler._beforeget_useGradient -= value;
        }

        public static event Delegates.set_useGradient_BeforeArgs set_useGradient
        {
            add
            {
                HookHandler._beforeset_useGradient += value;
                HookHandler.Hookset_useGradient();
            }
            remove => HookHandler._beforeset_useGradient -= value;
        }

        public static event Delegates.get_anchor_BeforeArgs get_anchor
        {
            add
            {
                HookHandler._beforeget_anchor += value;
                HookHandler.Hookget_anchor();
            }
            remove => HookHandler._beforeget_anchor -= value;
        }

        public static event Delegates.set_anchor_BeforeArgs set_anchor
        {
            add
            {
                HookHandler._beforeset_anchor += value;
                HookHandler.Hookset_anchor();
            }
            remove => HookHandler._beforeset_anchor -= value;
        }

        public static event Delegates.get_scale_BeforeArgs get_scale
        {
            add
            {
                HookHandler._beforeget_scale += value;
                HookHandler.Hookget_scale();
            }
            remove => HookHandler._beforeget_scale -= value;
        }

        public static event Delegates.set_scale_BeforeArgs set_scale
        {
            add
            {
                HookHandler._beforeset_scale += value;
                HookHandler.Hookset_scale();
            }
            remove => HookHandler._beforeset_scale -= value;
        }

        public static event Delegates.get_kerning_BeforeArgs get_kerning
        {
            add
            {
                HookHandler._beforeget_kerning += value;
                HookHandler.Hookget_kerning();
            }
            remove => HookHandler._beforeget_kerning -= value;
        }

        public static event Delegates.set_kerning_BeforeArgs set_kerning
        {
            add
            {
                HookHandler._beforeset_kerning += value;
                HookHandler.Hookset_kerning();
            }
            remove => HookHandler._beforeset_kerning -= value;
        }

        public static event Delegates.get_maxChars_BeforeArgs get_maxChars
        {
            add
            {
                HookHandler._beforeget_maxChars += value;
                HookHandler.Hookget_maxChars();
            }
            remove => HookHandler._beforeget_maxChars -= value;
        }

        public static event Delegates.set_maxChars_BeforeArgs set_maxChars
        {
            add
            {
                HookHandler._beforeset_maxChars += value;
                HookHandler.Hookset_maxChars();
            }
            remove => HookHandler._beforeset_maxChars -= value;
        }

        public static event Delegates.get_textureGradient_BeforeArgs get_textureGradient
        {
            add
            {
                HookHandler._beforeget_textureGradient += value;
                HookHandler.Hookget_textureGradient();
            }
            remove => HookHandler._beforeget_textureGradient -= value;
        }

        public static event Delegates.set_textureGradient_BeforeArgs set_textureGradient
        {
            add
            {
                HookHandler._beforeset_textureGradient += value;
                HookHandler.Hookset_textureGradient();
            }
            remove => HookHandler._beforeset_textureGradient -= value;
        }

        public static event Delegates.get_inlineStyling_BeforeArgs get_inlineStyling
        {
            add
            {
                HookHandler._beforeget_inlineStyling += value;
                HookHandler.Hookget_inlineStyling();
            }
            remove => HookHandler._beforeget_inlineStyling -= value;
        }

        public static event Delegates.set_inlineStyling_BeforeArgs set_inlineStyling
        {
            add
            {
                HookHandler._beforeset_inlineStyling += value;
                HookHandler.Hookset_inlineStyling();
            }
            remove => HookHandler._beforeset_inlineStyling -= value;
        }

        public static event Delegates.get_Spacing_BeforeArgs get_Spacing
        {
            add
            {
                HookHandler._beforeget_Spacing += value;
                HookHandler.Hookget_Spacing();
            }
            remove => HookHandler._beforeget_Spacing -= value;
        }

        public static event Delegates.set_Spacing_BeforeArgs set_Spacing
        {
            add
            {
                HookHandler._beforeset_Spacing += value;
                HookHandler.Hookset_Spacing();
            }
            remove => HookHandler._beforeset_Spacing -= value;
        }

        public static event Delegates.get_LineSpacing_BeforeArgs get_LineSpacing
        {
            add
            {
                HookHandler._beforeget_LineSpacing += value;
                HookHandler.Hookget_LineSpacing();
            }
            remove => HookHandler._beforeget_LineSpacing -= value;
        }

        public static event Delegates.set_LineSpacing_BeforeArgs set_LineSpacing
        {
            add
            {
                HookHandler._beforeset_LineSpacing += value;
                HookHandler.Hookset_LineSpacing();
            }
            remove => HookHandler._beforeset_LineSpacing -= value;
        }

        public static event Delegates.get_SortingOrder_BeforeArgs get_SortingOrder
        {
            add
            {
                HookHandler._beforeget_SortingOrder += value;
                HookHandler.Hookget_SortingOrder();
            }
            remove => HookHandler._beforeget_SortingOrder -= value;
        }

        public static event Delegates.set_SortingOrder_BeforeArgs set_SortingOrder
        {
            add
            {
                HookHandler._beforeset_SortingOrder += value;
                HookHandler.Hookset_SortingOrder();
            }
            remove => HookHandler._beforeset_SortingOrder -= value;
        }

        public static event Delegates.InitInstance_BeforeArgs InitInstance
        {
            add
            {
                HookHandler._beforeInitInstance += value;
                HookHandler.HookInitInstance();
            }
            remove => HookHandler._beforeInitInstance -= value;
        }

        public static event Delegates.get_CachedRenderer_BeforeArgs get_CachedRenderer
        {
            add
            {
                HookHandler._beforeget_CachedRenderer += value;
                HookHandler.Hookget_CachedRenderer();
            }
            remove => HookHandler._beforeget_CachedRenderer -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.get_useInlineStyling_BeforeArgs get_useInlineStyling
        {
            add
            {
                HookHandler._beforeget_useInlineStyling += value;
                HookHandler.Hookget_useInlineStyling();
            }
            remove => HookHandler._beforeget_useInlineStyling -= value;
        }

        public static event Delegates.NumDrawnCharacters_BeforeArgs NumDrawnCharacters
        {
            add
            {
                HookHandler._beforeNumDrawnCharacters += value;
                HookHandler.HookNumDrawnCharacters();
            }
            remove => HookHandler._beforeNumDrawnCharacters -= value;
        }

        public static event Delegates.NumTotalCharacters_BeforeArgs NumTotalCharacters
        {
            add
            {
                HookHandler._beforeNumTotalCharacters += value;
                HookHandler.HookNumTotalCharacters();
            }
            remove => HookHandler._beforeNumTotalCharacters -= value;
        }

        public static event Delegates.GetMeshDimensionsForString_BeforeArgs GetMeshDimensionsForString
        {
            add
            {
                HookHandler._beforeGetMeshDimensionsForString += value;
                HookHandler.HookGetMeshDimensionsForString();
            }
            remove => HookHandler._beforeGetMeshDimensionsForString -= value;
        }

        public static event Delegates.GetEstimatedMeshBoundsForString_BeforeArgs GetEstimatedMeshBoundsForString
        {
            add
            {
                HookHandler._beforeGetEstimatedMeshBoundsForString += value;
                HookHandler.HookGetEstimatedMeshBoundsForString();
            }
            remove => HookHandler._beforeGetEstimatedMeshBoundsForString -= value;
        }

        public static event Delegates.Init_bool_BeforeArgs Init_bool
        {
            add
            {
                HookHandler._beforeInit_bool += value;
                HookHandler.HookInit_bool();
            }
            remove => HookHandler._beforeInit_bool -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.Commit_BeforeArgs Commit
        {
            add
            {
                HookHandler._beforeCommit += value;
                HookHandler.HookCommit();
            }
            remove => HookHandler._beforeCommit -= value;
        }

        public static event Delegates.DoNotUse__CommitInternal_BeforeArgs DoNotUse__CommitInternal
        {
            add
            {
                HookHandler._beforeDoNotUse__CommitInternal += value;
                HookHandler.HookDoNotUse__CommitInternal();
            }
            remove => HookHandler._beforeDoNotUse__CommitInternal -= value;
        }

        public static event Delegates.MakePixelPerfect_BeforeArgs MakePixelPerfect
        {
            add
            {
                HookHandler._beforeMakePixelPerfect += value;
                HookHandler.HookMakePixelPerfect();
            }
            remove => HookHandler._beforeMakePixelPerfect -= value;
        }

        public static event Delegates.UsesSpriteCollection_BeforeArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._beforeUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._beforeUsesSpriteCollection -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.ForceBuild_BeforeArgs ForceBuild
        {
            add
            {
                HookHandler._beforeForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._beforeForceBuild -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_FormattedText_NormalArgs get_FormattedText
        {
            add
            {
                HookHandler._afterget_FormattedText += value;
                HookHandler.Hookget_FormattedText();
            }
            remove => HookHandler._afterget_FormattedText -= value;
        }

        public static event Delegates.UpgradeData_NormalArgs UpgradeData
        {
            add
            {
                HookHandler._afterUpgradeData += value;
                HookHandler.HookUpgradeData();
            }
            remove => HookHandler._afterUpgradeData -= value;
        }

        public static event Delegates.GetInlineStyleCommandLength_NormalArgs GetInlineStyleCommandLength
        {
            add
            {
                HookHandler._afterGetInlineStyleCommandLength += value;
                HookHandler.HookGetInlineStyleCommandLength();
            }
            remove => HookHandler._afterGetInlineStyleCommandLength -= value;
        }

        public static event Delegates.FormatText_string_NormalArgs FormatText_string
        {
            add
            {
                HookHandler._afterFormatText_string += value;
                HookHandler.HookFormatText_string();
            }
            remove => HookHandler._afterFormatText_string -= value;
        }

        public static event Delegates.FormatText_NormalArgs FormatText
        {
            add
            {
                HookHandler._afterFormatText += value;
                HookHandler.HookFormatText();
            }
            remove => HookHandler._afterFormatText -= value;
        }

        public static event Delegates.FormatText_string_string_NormalArgs FormatText_string_string
        {
            add
            {
                HookHandler._afterFormatText_string_string += value;
                HookHandler.HookFormatText_string_string();
            }
            remove => HookHandler._afterFormatText_string_string -= value;
        }

        public static event Delegates.get_font_NormalArgs get_font
        {
            add
            {
                HookHandler._afterget_font += value;
                HookHandler.Hookget_font();
            }
            remove => HookHandler._afterget_font -= value;
        }

        public static event Delegates.set_font_NormalArgs set_font
        {
            add
            {
                HookHandler._afterset_font += value;
                HookHandler.Hookset_font();
            }
            remove => HookHandler._afterset_font -= value;
        }

        public static event Delegates.get_formatting_NormalArgs get_formatting
        {
            add
            {
                HookHandler._afterget_formatting += value;
                HookHandler.Hookget_formatting();
            }
            remove => HookHandler._afterget_formatting -= value;
        }

        public static event Delegates.set_formatting_NormalArgs set_formatting
        {
            add
            {
                HookHandler._afterset_formatting += value;
                HookHandler.Hookset_formatting();
            }
            remove => HookHandler._afterset_formatting -= value;
        }

        public static event Delegates.get_wordWrapWidth_NormalArgs get_wordWrapWidth
        {
            add
            {
                HookHandler._afterget_wordWrapWidth += value;
                HookHandler.Hookget_wordWrapWidth();
            }
            remove => HookHandler._afterget_wordWrapWidth -= value;
        }

        public static event Delegates.set_wordWrapWidth_NormalArgs set_wordWrapWidth
        {
            add
            {
                HookHandler._afterset_wordWrapWidth += value;
                HookHandler.Hookset_wordWrapWidth();
            }
            remove => HookHandler._afterset_wordWrapWidth -= value;
        }

        public static event Delegates.get_text_NormalArgs get_text
        {
            add
            {
                HookHandler._afterget_text += value;
                HookHandler.Hookget_text();
            }
            remove => HookHandler._afterget_text -= value;
        }

        public static event Delegates.set_text_NormalArgs set_text
        {
            add
            {
                HookHandler._afterset_text += value;
                HookHandler.Hookset_text();
            }
            remove => HookHandler._afterset_text -= value;
        }

        public static event Delegates.get_color_NormalArgs get_color
        {
            add
            {
                HookHandler._afterget_color += value;
                HookHandler.Hookget_color();
            }
            remove => HookHandler._afterget_color -= value;
        }

        public static event Delegates.set_color_NormalArgs set_color
        {
            add
            {
                HookHandler._afterset_color += value;
                HookHandler.Hookset_color();
            }
            remove => HookHandler._afterset_color -= value;
        }

        public static event Delegates.get_color2_NormalArgs get_color2
        {
            add
            {
                HookHandler._afterget_color2 += value;
                HookHandler.Hookget_color2();
            }
            remove => HookHandler._afterget_color2 -= value;
        }

        public static event Delegates.set_color2_NormalArgs set_color2
        {
            add
            {
                HookHandler._afterset_color2 += value;
                HookHandler.Hookset_color2();
            }
            remove => HookHandler._afterset_color2 -= value;
        }

        public static event Delegates.get_useGradient_NormalArgs get_useGradient
        {
            add
            {
                HookHandler._afterget_useGradient += value;
                HookHandler.Hookget_useGradient();
            }
            remove => HookHandler._afterget_useGradient -= value;
        }

        public static event Delegates.set_useGradient_NormalArgs set_useGradient
        {
            add
            {
                HookHandler._afterset_useGradient += value;
                HookHandler.Hookset_useGradient();
            }
            remove => HookHandler._afterset_useGradient -= value;
        }

        public static event Delegates.get_anchor_NormalArgs get_anchor
        {
            add
            {
                HookHandler._afterget_anchor += value;
                HookHandler.Hookget_anchor();
            }
            remove => HookHandler._afterget_anchor -= value;
        }

        public static event Delegates.set_anchor_NormalArgs set_anchor
        {
            add
            {
                HookHandler._afterset_anchor += value;
                HookHandler.Hookset_anchor();
            }
            remove => HookHandler._afterset_anchor -= value;
        }

        public static event Delegates.get_scale_NormalArgs get_scale
        {
            add
            {
                HookHandler._afterget_scale += value;
                HookHandler.Hookget_scale();
            }
            remove => HookHandler._afterget_scale -= value;
        }

        public static event Delegates.set_scale_NormalArgs set_scale
        {
            add
            {
                HookHandler._afterset_scale += value;
                HookHandler.Hookset_scale();
            }
            remove => HookHandler._afterset_scale -= value;
        }

        public static event Delegates.get_kerning_NormalArgs get_kerning
        {
            add
            {
                HookHandler._afterget_kerning += value;
                HookHandler.Hookget_kerning();
            }
            remove => HookHandler._afterget_kerning -= value;
        }

        public static event Delegates.set_kerning_NormalArgs set_kerning
        {
            add
            {
                HookHandler._afterset_kerning += value;
                HookHandler.Hookset_kerning();
            }
            remove => HookHandler._afterset_kerning -= value;
        }

        public static event Delegates.get_maxChars_NormalArgs get_maxChars
        {
            add
            {
                HookHandler._afterget_maxChars += value;
                HookHandler.Hookget_maxChars();
            }
            remove => HookHandler._afterget_maxChars -= value;
        }

        public static event Delegates.set_maxChars_NormalArgs set_maxChars
        {
            add
            {
                HookHandler._afterset_maxChars += value;
                HookHandler.Hookset_maxChars();
            }
            remove => HookHandler._afterset_maxChars -= value;
        }

        public static event Delegates.get_textureGradient_NormalArgs get_textureGradient
        {
            add
            {
                HookHandler._afterget_textureGradient += value;
                HookHandler.Hookget_textureGradient();
            }
            remove => HookHandler._afterget_textureGradient -= value;
        }

        public static event Delegates.set_textureGradient_NormalArgs set_textureGradient
        {
            add
            {
                HookHandler._afterset_textureGradient += value;
                HookHandler.Hookset_textureGradient();
            }
            remove => HookHandler._afterset_textureGradient -= value;
        }

        public static event Delegates.get_inlineStyling_NormalArgs get_inlineStyling
        {
            add
            {
                HookHandler._afterget_inlineStyling += value;
                HookHandler.Hookget_inlineStyling();
            }
            remove => HookHandler._afterget_inlineStyling -= value;
        }

        public static event Delegates.set_inlineStyling_NormalArgs set_inlineStyling
        {
            add
            {
                HookHandler._afterset_inlineStyling += value;
                HookHandler.Hookset_inlineStyling();
            }
            remove => HookHandler._afterset_inlineStyling -= value;
        }

        public static event Delegates.get_Spacing_NormalArgs get_Spacing
        {
            add
            {
                HookHandler._afterget_Spacing += value;
                HookHandler.Hookget_Spacing();
            }
            remove => HookHandler._afterget_Spacing -= value;
        }

        public static event Delegates.set_Spacing_NormalArgs set_Spacing
        {
            add
            {
                HookHandler._afterset_Spacing += value;
                HookHandler.Hookset_Spacing();
            }
            remove => HookHandler._afterset_Spacing -= value;
        }

        public static event Delegates.get_LineSpacing_NormalArgs get_LineSpacing
        {
            add
            {
                HookHandler._afterget_LineSpacing += value;
                HookHandler.Hookget_LineSpacing();
            }
            remove => HookHandler._afterget_LineSpacing -= value;
        }

        public static event Delegates.set_LineSpacing_NormalArgs set_LineSpacing
        {
            add
            {
                HookHandler._afterset_LineSpacing += value;
                HookHandler.Hookset_LineSpacing();
            }
            remove => HookHandler._afterset_LineSpacing -= value;
        }

        public static event Delegates.get_SortingOrder_NormalArgs get_SortingOrder
        {
            add
            {
                HookHandler._afterget_SortingOrder += value;
                HookHandler.Hookget_SortingOrder();
            }
            remove => HookHandler._afterget_SortingOrder -= value;
        }

        public static event Delegates.set_SortingOrder_NormalArgs set_SortingOrder
        {
            add
            {
                HookHandler._afterset_SortingOrder += value;
                HookHandler.Hookset_SortingOrder();
            }
            remove => HookHandler._afterset_SortingOrder -= value;
        }

        public static event Delegates.InitInstance_NormalArgs InitInstance
        {
            add
            {
                HookHandler._afterInitInstance += value;
                HookHandler.HookInitInstance();
            }
            remove => HookHandler._afterInitInstance -= value;
        }

        public static event Delegates.get_CachedRenderer_NormalArgs get_CachedRenderer
        {
            add
            {
                HookHandler._afterget_CachedRenderer += value;
                HookHandler.Hookget_CachedRenderer();
            }
            remove => HookHandler._afterget_CachedRenderer -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.get_useInlineStyling_NormalArgs get_useInlineStyling
        {
            add
            {
                HookHandler._afterget_useInlineStyling += value;
                HookHandler.Hookget_useInlineStyling();
            }
            remove => HookHandler._afterget_useInlineStyling -= value;
        }

        public static event Delegates.NumDrawnCharacters_NormalArgs NumDrawnCharacters
        {
            add
            {
                HookHandler._afterNumDrawnCharacters += value;
                HookHandler.HookNumDrawnCharacters();
            }
            remove => HookHandler._afterNumDrawnCharacters -= value;
        }

        public static event Delegates.NumTotalCharacters_NormalArgs NumTotalCharacters
        {
            add
            {
                HookHandler._afterNumTotalCharacters += value;
                HookHandler.HookNumTotalCharacters();
            }
            remove => HookHandler._afterNumTotalCharacters -= value;
        }

        public static event Delegates.GetMeshDimensionsForString_NormalArgs GetMeshDimensionsForString
        {
            add
            {
                HookHandler._afterGetMeshDimensionsForString += value;
                HookHandler.HookGetMeshDimensionsForString();
            }
            remove => HookHandler._afterGetMeshDimensionsForString -= value;
        }

        public static event Delegates.GetEstimatedMeshBoundsForString_NormalArgs GetEstimatedMeshBoundsForString
        {
            add
            {
                HookHandler._afterGetEstimatedMeshBoundsForString += value;
                HookHandler.HookGetEstimatedMeshBoundsForString();
            }
            remove => HookHandler._afterGetEstimatedMeshBoundsForString -= value;
        }

        public static event Delegates.Init_bool_NormalArgs Init_bool
        {
            add
            {
                HookHandler._afterInit_bool += value;
                HookHandler.HookInit_bool();
            }
            remove => HookHandler._afterInit_bool -= value;
        }

        public static event Delegates.Init_NormalArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.Commit_NormalArgs Commit
        {
            add
            {
                HookHandler._afterCommit += value;
                HookHandler.HookCommit();
            }
            remove => HookHandler._afterCommit -= value;
        }

        public static event Delegates.DoNotUse__CommitInternal_NormalArgs DoNotUse__CommitInternal
        {
            add
            {
                HookHandler._afterDoNotUse__CommitInternal += value;
                HookHandler.HookDoNotUse__CommitInternal();
            }
            remove => HookHandler._afterDoNotUse__CommitInternal -= value;
        }

        public static event Delegates.MakePixelPerfect_NormalArgs MakePixelPerfect
        {
            add
            {
                HookHandler._afterMakePixelPerfect += value;
                HookHandler.HookMakePixelPerfect();
            }
            remove => HookHandler._afterMakePixelPerfect -= value;
        }

        public static event Delegates.UsesSpriteCollection_NormalArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._afterUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._afterUsesSpriteCollection -= value;
        }

        public static event Delegates.UpdateMaterial_NormalArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.ForceBuild_NormalArgs ForceBuild
        {
            add
            {
                HookHandler._afterForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._afterForceBuild -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_FormattedText_NormalArgs get_FormattedText
        {
            add => HookEndpointManager.Add<Delegates.get_FormattedText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_FormattedText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_FormattedText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_FormattedText"), value);
        }

        public static event On.tk2dTextMesh.hook_UpgradeData UpgradeData
        {
            add => On.tk2dTextMesh.UpgradeData += value;
            remove => On.tk2dTextMesh.UpgradeData -= value;
        }

        public static event On.tk2dTextMesh.hook_GetInlineStyleCommandLength GetInlineStyleCommandLength
        {
            add => On.tk2dTextMesh.GetInlineStyleCommandLength += value;
            remove => On.tk2dTextMesh.GetInlineStyleCommandLength -= value;
        }

        public static event On.tk2dTextMesh.hook_FormatText_string FormatText_string
        {
            add => On.tk2dTextMesh.FormatText_string += value;
            remove => On.tk2dTextMesh.FormatText_string -= value;
        }

        public static event On.tk2dTextMesh.hook_FormatText FormatText
        {
            add => On.tk2dTextMesh.FormatText += value;
            remove => On.tk2dTextMesh.FormatText -= value;
        }

        public static event Delegates.FormatText_string_string_NormalArgs FormatText_string_string
        {
            add => HookEndpointManager.Add<Delegates.FormatText_string_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "FormatText"), value);
            remove => HookEndpointManager.Remove<Delegates.FormatText_string_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "FormatText"), value);
        }

        public static event Delegates.get_font_NormalArgs get_font
        {
            add => HookEndpointManager.Add<Delegates.get_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_font"), value);
            remove => HookEndpointManager.Remove<Delegates.get_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_font"), value);
        }

        public static event Delegates.set_font_NormalArgs set_font
        {
            add => HookEndpointManager.Add<Delegates.set_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_font"), value);
            remove => HookEndpointManager.Remove<Delegates.set_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_font"), value);
        }

        public static event Delegates.get_formatting_NormalArgs get_formatting
        {
            add => HookEndpointManager.Add<Delegates.get_formatting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_formatting"), value);
            remove => HookEndpointManager.Remove<Delegates.get_formatting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_formatting"), value);
        }

        public static event Delegates.set_formatting_NormalArgs set_formatting
        {
            add => HookEndpointManager.Add<Delegates.set_formatting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_formatting"), value);
            remove => HookEndpointManager.Remove<Delegates.set_formatting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_formatting"), value);
        }

        public static event Delegates.get_wordWrapWidth_NormalArgs get_wordWrapWidth
        {
            add => HookEndpointManager.Add<Delegates.get_wordWrapWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_wordWrapWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_wordWrapWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_wordWrapWidth"), value);
        }

        public static event Delegates.set_wordWrapWidth_NormalArgs set_wordWrapWidth
        {
            add => HookEndpointManager.Add<Delegates.set_wordWrapWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_wordWrapWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.set_wordWrapWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_wordWrapWidth"), value);
        }

        public static event Delegates.get_text_NormalArgs get_text
        {
            add => HookEndpointManager.Add<Delegates.get_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_text"), value);
            remove => HookEndpointManager.Remove<Delegates.get_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_text"), value);
        }

        public static event Delegates.set_text_NormalArgs set_text
        {
            add => HookEndpointManager.Add<Delegates.set_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_text"), value);
            remove => HookEndpointManager.Remove<Delegates.set_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_text"), value);
        }

        public static event Delegates.get_color_NormalArgs get_color
        {
            add => HookEndpointManager.Add<Delegates.get_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_color"), value);
            remove => HookEndpointManager.Remove<Delegates.get_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_color"), value);
        }

        public static event Delegates.set_color_NormalArgs set_color
        {
            add => HookEndpointManager.Add<Delegates.set_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_color"), value);
            remove => HookEndpointManager.Remove<Delegates.set_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_color"), value);
        }

        public static event Delegates.get_color2_NormalArgs get_color2
        {
            add => HookEndpointManager.Add<Delegates.get_color2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_color2"), value);
            remove => HookEndpointManager.Remove<Delegates.get_color2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_color2"), value);
        }

        public static event Delegates.set_color2_NormalArgs set_color2
        {
            add => HookEndpointManager.Add<Delegates.set_color2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_color2"), value);
            remove => HookEndpointManager.Remove<Delegates.set_color2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_color2"), value);
        }

        public static event Delegates.get_useGradient_NormalArgs get_useGradient
        {
            add => HookEndpointManager.Add<Delegates.get_useGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_useGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.get_useGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_useGradient"), value);
        }

        public static event Delegates.set_useGradient_NormalArgs set_useGradient
        {
            add => HookEndpointManager.Add<Delegates.set_useGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_useGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.set_useGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_useGradient"), value);
        }

        public static event Delegates.get_anchor_NormalArgs get_anchor
        {
            add => HookEndpointManager.Add<Delegates.get_anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_anchor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_anchor"), value);
        }

        public static event Delegates.set_anchor_NormalArgs set_anchor
        {
            add => HookEndpointManager.Add<Delegates.set_anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_anchor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_anchor"), value);
        }

        public static event Delegates.get_scale_NormalArgs get_scale
        {
            add => HookEndpointManager.Add<Delegates.get_scale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_scale"), value);
            remove => HookEndpointManager.Remove<Delegates.get_scale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_scale"), value);
        }

        public static event Delegates.set_scale_NormalArgs set_scale
        {
            add => HookEndpointManager.Add<Delegates.set_scale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_scale"), value);
            remove => HookEndpointManager.Remove<Delegates.set_scale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_scale"), value);
        }

        public static event Delegates.get_kerning_NormalArgs get_kerning
        {
            add => HookEndpointManager.Add<Delegates.get_kerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_kerning"), value);
            remove => HookEndpointManager.Remove<Delegates.get_kerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_kerning"), value);
        }

        public static event Delegates.set_kerning_NormalArgs set_kerning
        {
            add => HookEndpointManager.Add<Delegates.set_kerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_kerning"), value);
            remove => HookEndpointManager.Remove<Delegates.set_kerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_kerning"), value);
        }

        public static event Delegates.get_maxChars_NormalArgs get_maxChars
        {
            add => HookEndpointManager.Add<Delegates.get_maxChars_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_maxChars"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maxChars_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_maxChars"), value);
        }

        public static event Delegates.set_maxChars_NormalArgs set_maxChars
        {
            add => HookEndpointManager.Add<Delegates.set_maxChars_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_maxChars"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maxChars_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_maxChars"), value);
        }

        public static event Delegates.get_textureGradient_NormalArgs get_textureGradient
        {
            add => HookEndpointManager.Add<Delegates.get_textureGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_textureGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.get_textureGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_textureGradient"), value);
        }

        public static event Delegates.set_textureGradient_NormalArgs set_textureGradient
        {
            add => HookEndpointManager.Add<Delegates.set_textureGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_textureGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.set_textureGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_textureGradient"), value);
        }

        public static event Delegates.get_inlineStyling_NormalArgs get_inlineStyling
        {
            add => HookEndpointManager.Add<Delegates.get_inlineStyling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_inlineStyling"), value);
            remove => HookEndpointManager.Remove<Delegates.get_inlineStyling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_inlineStyling"), value);
        }

        public static event Delegates.set_inlineStyling_NormalArgs set_inlineStyling
        {
            add => HookEndpointManager.Add<Delegates.set_inlineStyling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_inlineStyling"), value);
            remove => HookEndpointManager.Remove<Delegates.set_inlineStyling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_inlineStyling"), value);
        }

        public static event Delegates.get_Spacing_NormalArgs get_Spacing
        {
            add => HookEndpointManager.Add<Delegates.get_Spacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_Spacing"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Spacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_Spacing"), value);
        }

        public static event Delegates.set_Spacing_NormalArgs set_Spacing
        {
            add => HookEndpointManager.Add<Delegates.set_Spacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_Spacing"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Spacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_Spacing"), value);
        }

        public static event Delegates.get_LineSpacing_NormalArgs get_LineSpacing
        {
            add => HookEndpointManager.Add<Delegates.get_LineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_LineSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_LineSpacing"), value);
        }

        public static event Delegates.set_LineSpacing_NormalArgs set_LineSpacing
        {
            add => HookEndpointManager.Add<Delegates.set_LineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_LineSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_LineSpacing"), value);
        }

        public static event Delegates.get_SortingOrder_NormalArgs get_SortingOrder
        {
            add => HookEndpointManager.Add<Delegates.get_SortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_SortingOrder"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_SortingOrder"), value);
        }

        public static event Delegates.set_SortingOrder_NormalArgs set_SortingOrder
        {
            add => HookEndpointManager.Add<Delegates.set_SortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_SortingOrder"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "set_SortingOrder"), value);
        }

        public static event On.tk2dTextMesh.hook_InitInstance InitInstance
        {
            add => On.tk2dTextMesh.InitInstance += value;
            remove => On.tk2dTextMesh.InitInstance -= value;
        }

        public static event Delegates.get_CachedRenderer_NormalArgs get_CachedRenderer
        {
            add => HookEndpointManager.Add<Delegates.get_CachedRenderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_CachedRenderer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CachedRenderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_CachedRenderer"), value);
        }

        public static event On.tk2dTextMesh.hook_Awake Awake
        {
            add => On.tk2dTextMesh.Awake += value;
            remove => On.tk2dTextMesh.Awake -= value;
        }

        public static event On.tk2dTextMesh.hook_OnDestroy OnDestroy
        {
            add => On.tk2dTextMesh.OnDestroy += value;
            remove => On.tk2dTextMesh.OnDestroy -= value;
        }

        public static event Delegates.get_useInlineStyling_NormalArgs get_useInlineStyling
        {
            add => HookEndpointManager.Add<Delegates.get_useInlineStyling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_useInlineStyling"), value);
            remove => HookEndpointManager.Remove<Delegates.get_useInlineStyling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTextMesh), "get_useInlineStyling"), value);
        }

        public static event On.tk2dTextMesh.hook_NumDrawnCharacters NumDrawnCharacters
        {
            add => On.tk2dTextMesh.NumDrawnCharacters += value;
            remove => On.tk2dTextMesh.NumDrawnCharacters -= value;
        }

        public static event On.tk2dTextMesh.hook_NumTotalCharacters NumTotalCharacters
        {
            add => On.tk2dTextMesh.NumTotalCharacters += value;
            remove => On.tk2dTextMesh.NumTotalCharacters -= value;
        }

        public static event On.tk2dTextMesh.hook_GetMeshDimensionsForString GetMeshDimensionsForString
        {
            add => On.tk2dTextMesh.GetMeshDimensionsForString += value;
            remove => On.tk2dTextMesh.GetMeshDimensionsForString -= value;
        }

        public static event On.tk2dTextMesh.hook_GetEstimatedMeshBoundsForString GetEstimatedMeshBoundsForString
        {
            add => On.tk2dTextMesh.GetEstimatedMeshBoundsForString += value;
            remove => On.tk2dTextMesh.GetEstimatedMeshBoundsForString -= value;
        }

        public static event On.tk2dTextMesh.hook_Init_bool Init_bool
        {
            add => On.tk2dTextMesh.Init_bool += value;
            remove => On.tk2dTextMesh.Init_bool -= value;
        }

        public static event On.tk2dTextMesh.hook_Init Init
        {
            add => On.tk2dTextMesh.Init += value;
            remove => On.tk2dTextMesh.Init -= value;
        }

        public static event On.tk2dTextMesh.hook_Commit Commit
        {
            add => On.tk2dTextMesh.Commit += value;
            remove => On.tk2dTextMesh.Commit -= value;
        }

        public static event On.tk2dTextMesh.hook_DoNotUse__CommitInternal DoNotUse__CommitInternal
        {
            add => On.tk2dTextMesh.DoNotUse__CommitInternal += value;
            remove => On.tk2dTextMesh.DoNotUse__CommitInternal -= value;
        }

        public static event On.tk2dTextMesh.hook_MakePixelPerfect MakePixelPerfect
        {
            add => On.tk2dTextMesh.MakePixelPerfect += value;
            remove => On.tk2dTextMesh.MakePixelPerfect -= value;
        }

        public static event On.tk2dTextMesh.hook_UsesSpriteCollection UsesSpriteCollection
        {
            add => On.tk2dTextMesh.UsesSpriteCollection += value;
            remove => On.tk2dTextMesh.UsesSpriteCollection -= value;
        }

        public static event On.tk2dTextMesh.hook_UpdateMaterial UpdateMaterial
        {
            add => On.tk2dTextMesh.UpdateMaterial += value;
            remove => On.tk2dTextMesh.UpdateMaterial -= value;
        }

        public static event On.tk2dTextMesh.hook_ForceBuild ForceBuild
        {
            add => On.tk2dTextMesh.ForceBuild += value;
            remove => On.tk2dTextMesh.ForceBuild -= value;
        }
    }
}