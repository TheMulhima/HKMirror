namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TitleLogo class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTitleLogo
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAnimationFinished()
        {
            if (!HookedList.Contains("AnimationFinished"))
            {
                HookedList.Add("AnimationFinished");
                On.TitleLogo.AnimationFinished += AnimationFinished;
            }
        }

        internal static event Delegates.AnimationFinished_BeforeArgs _beforeAnimationFinished;
        internal static event Delegates.AnimationFinished_AfterArgs _afterAnimationFinished;

        private static void AnimationFinished(On.TitleLogo.orig_AnimationFinished orig, TitleLogo self)
        {
            Delegates.Params_AnimationFinished @params = new()
            {
                self = self
            };
            if (_beforeAnimationFinished != null)
                foreach (Delegates.AnimationFinished_BeforeArgs toInvoke in
                         _beforeAnimationFinished.GetInvocationList())
                    try
                    {
                        _beforeAnimationFinished?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAnimationFinished != null)
                foreach (Delegates.AnimationFinished_AfterArgs toInvoke in _afterAnimationFinished.GetInvocationList())
                    try
                    {
                        _afterAnimationFinished.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AnimationFinished_AfterArgs(Params_AnimationFinished args);

        public delegate void AnimationFinished_BeforeArgs(Params_AnimationFinished args);

        public delegate void AnimationFinished_WithArgs(Action<TitleLogo> orig, TitleLogo self);

        public sealed class Params_AnimationFinished
        {
            public TitleLogo self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.AnimationFinished_BeforeArgs AnimationFinished
        {
            add
            {
                HookHandler._beforeAnimationFinished += value;
                HookHandler.HookAnimationFinished();
            }
            remove => HookHandler._beforeAnimationFinished -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.AnimationFinished_AfterArgs AnimationFinished
        {
            add
            {
                HookHandler._afterAnimationFinished += value;
                HookHandler.HookAnimationFinished();
            }
            remove => HookHandler._afterAnimationFinished -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.TitleLogo.hook_AnimationFinished AnimationFinished
        {
            add => On.TitleLogo.AnimationFinished += value;
            remove => On.TitleLogo.AnimationFinished -= value;
        }
    }
}