using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityStandardAssets.ImageEffects;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for FastNoise class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFastNoise
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(FastNoise), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(Action<FastNoise> orig, FastNoise self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckResources()
        {
            if (!HookedList.Contains("CheckResources"))
            {
                HookedList.Add("CheckResources");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(FastNoise), "CheckResources"), CheckResources);
            }
        }

        internal static event Delegates.CheckResources_BeforeArgs _beforeCheckResources;
        internal static event Delegates.CheckResources_AfterArgs _afterCheckResources;

        private static bool CheckResources(Func<FastNoise, bool> orig, FastNoise self)
        {
            Delegates.Params_CheckResources @params = new()
            {
                self = self
            };
            if (_beforeCheckResources != null)
                foreach (Delegates.CheckResources_BeforeArgs toInvoke in _beforeCheckResources.GetInvocationList())
                    try
                    {
                        _beforeCheckResources?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterCheckResources != null)
                foreach (Delegates.CheckResources_AfterArgs toInvoke in _afterCheckResources.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckResources.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookOnRenderImage()
        {
            if (!HookedList.Contains("OnRenderImage"))
            {
                HookedList.Add("OnRenderImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(FastNoise), "OnRenderImage"), OnRenderImage);
            }
        }

        internal static event Delegates.OnRenderImage_BeforeArgs _beforeOnRenderImage;
        internal static event Delegates.OnRenderImage_AfterArgs _afterOnRenderImage;

        private static void OnRenderImage(Action<FastNoise, RenderTexture, RenderTexture> orig, FastNoise self,
            RenderTexture source, RenderTexture destination)
        {
            Delegates.Params_OnRenderImage @params = new()
            {
                self = self, source = source, destination = destination
            };
            if (_beforeOnRenderImage != null)
                foreach (Delegates.OnRenderImage_BeforeArgs toInvoke in _beforeOnRenderImage.GetInvocationList())
                    try
                    {
                        _beforeOnRenderImage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            source = @params.source;
            destination = @params.destination;
            orig(self, source, destination);
            if (_afterOnRenderImage != null)
                foreach (Delegates.OnRenderImage_AfterArgs toInvoke in _afterOnRenderImage.GetInvocationList())
                    try
                    {
                        _afterOnRenderImage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawNoiseQuadGrid()
        {
            if (!HookedList.Contains("DrawNoiseQuadGrid"))
            {
                HookedList.Add("DrawNoiseQuadGrid");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(FastNoise), "DrawNoiseQuadGrid", false),
                    DrawNoiseQuadGrid);
            }
        }

        internal static event Delegates.DrawNoiseQuadGrid_BeforeArgs _beforeDrawNoiseQuadGrid;
        internal static event Delegates.DrawNoiseQuadGrid_AfterArgs _afterDrawNoiseQuadGrid;

        private static void DrawNoiseQuadGrid(Action<RenderTexture, RenderTexture, Material, Texture2D, int, int> orig,
            RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr,
            int frameMultiple)
        {
            Delegates.Params_DrawNoiseQuadGrid @params = new()
            {
                source = source, dest = dest, fxMaterial = fxMaterial, noise = noise, passNr = passNr,
                frameMultiple = frameMultiple
            };
            if (_beforeDrawNoiseQuadGrid != null)
                foreach (Delegates.DrawNoiseQuadGrid_BeforeArgs toInvoke in
                         _beforeDrawNoiseQuadGrid.GetInvocationList())
                    try
                    {
                        _beforeDrawNoiseQuadGrid?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            dest = @params.dest;
            fxMaterial = @params.fxMaterial;
            noise = @params.noise;
            passNr = @params.passNr;
            frameMultiple = @params.frameMultiple;
            orig(source, dest, fxMaterial, noise, passNr, frameMultiple);
            if (_afterDrawNoiseQuadGrid != null)
                foreach (Delegates.DrawNoiseQuadGrid_AfterArgs toInvoke in _afterDrawNoiseQuadGrid.GetInvocationList())
                    try
                    {
                        _afterDrawNoiseQuadGrid.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool CheckResources_AfterArgs(Params_CheckResources args, bool ret);

        public delegate void CheckResources_BeforeArgs(Params_CheckResources args);

        public delegate bool CheckResources_WithArgs(Func<FastNoise, bool> orig, FastNoise self);

        public delegate void DrawNoiseQuadGrid_AfterArgs(Params_DrawNoiseQuadGrid args);

        public delegate void DrawNoiseQuadGrid_BeforeArgs(Params_DrawNoiseQuadGrid args);

        public delegate void DrawNoiseQuadGrid_WithArgs(
            Action<RenderTexture, RenderTexture, Material, Texture2D, int, int> orig, RenderTexture source,
            RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr, int frameMultiple);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<FastNoise> orig, FastNoise self);

        public delegate void OnRenderImage_AfterArgs(Params_OnRenderImage args);

        public delegate void OnRenderImage_BeforeArgs(Params_OnRenderImage args);

        public delegate void OnRenderImage_WithArgs(Action<FastNoise, RenderTexture, RenderTexture> orig,
            FastNoise self, RenderTexture source, RenderTexture destination);

        public sealed class Params_OnDisable
        {
            public FastNoise self;
        }

        public sealed class Params_CheckResources
        {
            public FastNoise self;
        }

        public sealed class Params_OnRenderImage
        {
            public RenderTexture destination;
            public FastNoise self;
            public RenderTexture source;
        }

        public sealed class Params_DrawNoiseQuadGrid
        {
            public RenderTexture dest;
            public int frameMultiple;
            public Material fxMaterial;
            public Texture2D noise;
            public int passNr;
            public RenderTexture source;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.CheckResources_BeforeArgs CheckResources
        {
            add
            {
                HookHandler._beforeCheckResources += value;
                HookHandler.HookCheckResources();
            }
            remove => HookHandler._beforeCheckResources -= value;
        }

        public static event Delegates.OnRenderImage_BeforeArgs OnRenderImage
        {
            add
            {
                HookHandler._beforeOnRenderImage += value;
                HookHandler.HookOnRenderImage();
            }
            remove => HookHandler._beforeOnRenderImage -= value;
        }

        public static event Delegates.DrawNoiseQuadGrid_BeforeArgs DrawNoiseQuadGrid
        {
            add
            {
                HookHandler._beforeDrawNoiseQuadGrid += value;
                HookHandler.HookDrawNoiseQuadGrid();
            }
            remove => HookHandler._beforeDrawNoiseQuadGrid -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.CheckResources_AfterArgs CheckResources
        {
            add
            {
                HookHandler._afterCheckResources += value;
                HookHandler.HookCheckResources();
            }
            remove => HookHandler._afterCheckResources -= value;
        }

        public static event Delegates.OnRenderImage_AfterArgs OnRenderImage
        {
            add
            {
                HookHandler._afterOnRenderImage += value;
                HookHandler.HookOnRenderImage();
            }
            remove => HookHandler._afterOnRenderImage -= value;
        }

        public static event Delegates.DrawNoiseQuadGrid_AfterArgs DrawNoiseQuadGrid
        {
            add
            {
                HookHandler._afterDrawNoiseQuadGrid += value;
                HookHandler.HookDrawNoiseQuadGrid();
            }
            remove => HookHandler._afterDrawNoiseQuadGrid -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnDisable_WithArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "OnDisable"), value);
        }

        public static event Delegates.CheckResources_WithArgs CheckResources
        {
            add => HookEndpointManager.Add<Delegates.CheckResources_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "CheckResources"), value);
            remove => HookEndpointManager.Remove<Delegates.CheckResources_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "CheckResources"), value);
        }

        public static event Delegates.OnRenderImage_WithArgs OnRenderImage
        {
            add => HookEndpointManager.Add<Delegates.OnRenderImage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "OnRenderImage"), value);
            remove => HookEndpointManager.Remove<Delegates.OnRenderImage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "OnRenderImage"), value);
        }

        public static event Delegates.DrawNoiseQuadGrid_WithArgs DrawNoiseQuadGrid
        {
            add => HookEndpointManager.Add<Delegates.DrawNoiseQuadGrid_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "DrawNoiseQuadGrid", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawNoiseQuadGrid_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastNoise), "DrawNoiseQuadGrid", false), value);
        }
    }
}