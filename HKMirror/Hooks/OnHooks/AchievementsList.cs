namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AchievementsList class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAchievementsList
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookFindAchievement()
        {
            if (!HookedList.Contains("FindAchievement"))
            {
                HookedList.Add("FindAchievement");
                On.AchievementsList.FindAchievement += FindAchievement;
            }
        }

        internal static event Delegates.FindAchievement_BeforeArgs _beforeFindAchievement;
        internal static event Delegates.FindAchievement_NormalArgs _afterFindAchievement;

        private static Achievement FindAchievement(On.AchievementsList.orig_FindAchievement orig, AchievementsList self,
            string key)
        {
            Delegates.Params_FindAchievement @params = new()
            {
                self = self, key = key
            };
            _beforeFindAchievement?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            var retVal = orig(self, key);
            if (_afterFindAchievement != null) retVal = _afterFindAchievement.Invoke(@params);
            return retVal;
        }

        internal static void HookAchievementExists()
        {
            if (!HookedList.Contains("AchievementExists"))
            {
                HookedList.Add("AchievementExists");
                On.AchievementsList.AchievementExists += AchievementExists;
            }
        }

        internal static event Delegates.AchievementExists_BeforeArgs _beforeAchievementExists;
        internal static event Delegates.AchievementExists_NormalArgs _afterAchievementExists;

        private static bool AchievementExists(On.AchievementsList.orig_AchievementExists orig, AchievementsList self,
            string key)
        {
            Delegates.Params_AchievementExists @params = new()
            {
                self = self, key = key
            };
            _beforeAchievementExists?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            var retVal = orig(self, key);
            if (_afterAchievementExists != null) retVal = _afterAchievementExists.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AchievementExists_BeforeArgs(Params_AchievementExists args);

        public delegate bool AchievementExists_NormalArgs(Params_AchievementExists args);

        public delegate void FindAchievement_BeforeArgs(Params_FindAchievement args);

        public delegate Achievement FindAchievement_NormalArgs(Params_FindAchievement args);

        public sealed class Params_FindAchievement
        {
            public string key;
            public AchievementsList self;
        }

        public sealed class Params_AchievementExists
        {
            public string key;
            public AchievementsList self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.FindAchievement_BeforeArgs FindAchievement
        {
            add
            {
                HookHandler._beforeFindAchievement += value;
                HookHandler.HookFindAchievement();
            }
            remove => HookHandler._beforeFindAchievement -= value;
        }

        public static event Delegates.AchievementExists_BeforeArgs AchievementExists
        {
            add
            {
                HookHandler._beforeAchievementExists += value;
                HookHandler.HookAchievementExists();
            }
            remove => HookHandler._beforeAchievementExists -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.FindAchievement_NormalArgs FindAchievement
        {
            add
            {
                HookHandler._afterFindAchievement += value;
                HookHandler.HookFindAchievement();
            }
            remove => HookHandler._afterFindAchievement -= value;
        }

        public static event Delegates.AchievementExists_NormalArgs AchievementExists
        {
            add
            {
                HookHandler._afterAchievementExists += value;
                HookHandler.HookAchievementExists();
            }
            remove => HookHandler._afterAchievementExists -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.AchievementsList.hook_FindAchievement FindAchievement
        {
            add => On.AchievementsList.FindAchievement += value;
            remove => On.AchievementsList.FindAchievement -= value;
        }

        public static event On.AchievementsList.hook_AchievementExists AchievementExists
        {
            add => On.AchievementsList.AchievementExists += value;
            remove => On.AchievementsList.AchievementExists -= value;
        }
    }
}