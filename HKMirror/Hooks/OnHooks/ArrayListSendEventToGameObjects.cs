using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ArrayListSendEventToGameObjects class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnArrayListSendEventToGameObjects
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(
                        typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects), "Reset", true), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(
                    ReflectionHelper.GetMethodInfo(
                        typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects), "OnEnter", true),
                    OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoSendEvent()
        {
            if (!HookedList.Contains("DoSendEvent"))
            {
                HookedList.Add("DoSendEvent");
                new Hook(
                    ReflectionHelper.GetMethodInfo(
                        typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects), "DoSendEvent", true),
                    DoSendEvent);
            }
        }

        internal static event Delegates.DoSendEvent_BeforeArgs _beforeDoSendEvent;
        internal static event Delegates.DoSendEvent_AfterArgs _afterDoSendEvent;

        private static void DoSendEvent(Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self)
        {
            Delegates.Params_DoSendEvent @params = new()
            {
                self = self
            };
            if (_beforeDoSendEvent != null)
            {
                foreach (Delegates.DoSendEvent_BeforeArgs toInvoke in _beforeDoSendEvent.GetInvocationList())
                {
                    try
                    {
                        _beforeDoSendEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoSendEvent != null)
            {
                foreach (Delegates.DoSendEvent_AfterArgs toInvoke in _afterDoSendEvent.GetInvocationList())
                {
                    try
                    {
                        _afterDoSendEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HooksendEventToGO()
        {
            if (!HookedList.Contains("sendEventToGO"))
            {
                HookedList.Add("sendEventToGO");
                new Hook(
                    ReflectionHelper.GetMethodInfo(
                        typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects), "sendEventToGO", true),
                    sendEventToGO);
            }
        }

        internal static event Delegates.sendEventToGO_BeforeArgs _beforesendEventToGO;
        internal static event Delegates.sendEventToGO_AfterArgs _aftersendEventToGO;

        private static void sendEventToGO(
            Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects, UnityEngine.GameObject> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self, UnityEngine.GameObject _go)
        {
            Delegates.Params_sendEventToGO @params = new()
            {
                self = self, _go = _go
            };
            if (_beforesendEventToGO != null)
            {
                foreach (Delegates.sendEventToGO_BeforeArgs toInvoke in _beforesendEventToGO.GetInvocationList())
                {
                    try
                    {
                        _beforesendEventToGO?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            _go = @params._go;
            orig(self, _go);
            if (_aftersendEventToGO != null)
            {
                foreach (Delegates.sendEventToGO_AfterArgs toInvoke in _aftersendEventToGO.GetInvocationList())
                {
                    try
                    {
                        _aftersendEventToGO.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self);

        public sealed class Params_DoSendEvent
        {
            public HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self;
        }

        public delegate void DoSendEvent_BeforeArgs(Params_DoSendEvent args);

        public delegate void DoSendEvent_AfterArgs(Params_DoSendEvent args);

        public delegate void DoSendEvent_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self);

        public sealed class Params_sendEventToGO
        {
            public HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self;
            public UnityEngine.GameObject _go;
        }

        public delegate void sendEventToGO_BeforeArgs(Params_sendEventToGO args);

        public delegate void sendEventToGO_AfterArgs(Params_sendEventToGO args);

        public delegate void sendEventToGO_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects, UnityEngine.GameObject> orig,
            HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects self, UnityEngine.GameObject _go);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoSendEvent_BeforeArgs DoSendEvent
        {
            add
            {
                HookHandler._beforeDoSendEvent += value;
                HookHandler.HookDoSendEvent();
            }
            remove => HookHandler._beforeDoSendEvent -= value;
        }

        public static event Delegates.sendEventToGO_BeforeArgs sendEventToGO
        {
            add
            {
                HookHandler._beforesendEventToGO += value;
                HookHandler.HooksendEventToGO();
            }
            remove => HookHandler._beforesendEventToGO -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoSendEvent_AfterArgs DoSendEvent
        {
            add
            {
                HookHandler._afterDoSendEvent += value;
                HookHandler.HookDoSendEvent();
            }
            remove => HookHandler._afterDoSendEvent -= value;
        }

        public static event Delegates.sendEventToGO_AfterArgs sendEventToGO
        {
            add
            {
                HookHandler._aftersendEventToGO += value;
                HookHandler.HooksendEventToGO();
            }
            remove => HookHandler._aftersendEventToGO -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "Reset", true), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "Reset", true), value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "OnEnter", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "OnEnter", true), value);
        }

        public static event Delegates.DoSendEvent_WithArgs DoSendEvent
        {
            add => HookEndpointManager.Add<Delegates.DoSendEvent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "DoSendEvent", true), value);
            remove => HookEndpointManager.Remove<Delegates.DoSendEvent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "DoSendEvent", true), value);
        }

        public static event Delegates.sendEventToGO_WithArgs sendEventToGO
        {
            add => HookEndpointManager.Add<Delegates.sendEventToGO_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "sendEventToGO", true), value);
            remove => HookEndpointManager.Remove<Delegates.sendEventToGO_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListSendEventToGameObjects),
                    "sendEventToGO", true), value);
        }
    }
}