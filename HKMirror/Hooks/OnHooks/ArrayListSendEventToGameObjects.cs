using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ArrayListSendEventToGameObjects class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnArrayListSendEventToGameObjects
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<ArrayListSendEventToGameObjects> orig, ArrayListSendEventToGameObjects self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<ArrayListSendEventToGameObjects> orig, ArrayListSendEventToGameObjects self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookDoSendEvent()
        {
            if (!HookedList.Contains("DoSendEvent"))
            {
                HookedList.Add("DoSendEvent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "DoSendEvent"),
                    DoSendEvent);
            }
        }

        internal static event Delegates.DoSendEvent_BeforeArgs _beforeDoSendEvent;
        internal static event Delegates.DoSendEvent_NormalArgs _afterDoSendEvent;

        private static void DoSendEvent(Action<ArrayListSendEventToGameObjects> orig,
            ArrayListSendEventToGameObjects self)
        {
            Delegates.Params_DoSendEvent @params = new()
            {
                self = self
            };
            _beforeDoSendEvent?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoSendEvent != null) _afterDoSendEvent.Invoke(@params);
        }

        internal static void HooksendEventToGO()
        {
            if (!HookedList.Contains("sendEventToGO"))
            {
                HookedList.Add("sendEventToGO");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "sendEventToGO"),
                    sendEventToGO);
            }
        }

        internal static event Delegates.sendEventToGO_BeforeArgs _beforesendEventToGO;
        internal static event Delegates.sendEventToGO_NormalArgs _aftersendEventToGO;

        private static void sendEventToGO(Action<ArrayListSendEventToGameObjects, GameObject> orig,
            ArrayListSendEventToGameObjects self, GameObject _go)
        {
            Delegates.Params_sendEventToGO @params = new()
            {
                self = self, _go = _go
            };
            _beforesendEventToGO?.Invoke(@params);
            self = @params.self;
            _go = @params._go;
            orig(self, _go);
            if (_aftersendEventToGO != null) _aftersendEventToGO.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoSendEvent_BeforeArgs(Params_DoSendEvent args);

        public delegate void DoSendEvent_NormalArgs(Params_DoSendEvent args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void sendEventToGO_BeforeArgs(Params_sendEventToGO args);

        public delegate void sendEventToGO_NormalArgs(Params_sendEventToGO args);

        public sealed class Params_Reset
        {
            public ArrayListSendEventToGameObjects self;
        }

        public sealed class Params_OnEnter
        {
            public ArrayListSendEventToGameObjects self;
        }

        public sealed class Params_DoSendEvent
        {
            public ArrayListSendEventToGameObjects self;
        }

        public sealed class Params_sendEventToGO
        {
            public GameObject _go;
            public ArrayListSendEventToGameObjects self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoSendEvent_BeforeArgs DoSendEvent
        {
            add
            {
                HookHandler._beforeDoSendEvent += value;
                HookHandler.HookDoSendEvent();
            }
            remove => HookHandler._beforeDoSendEvent -= value;
        }

        public static event Delegates.sendEventToGO_BeforeArgs sendEventToGO
        {
            add
            {
                HookHandler._beforesendEventToGO += value;
                HookHandler.HooksendEventToGO();
            }
            remove => HookHandler._beforesendEventToGO -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoSendEvent_NormalArgs DoSendEvent
        {
            add
            {
                HookHandler._afterDoSendEvent += value;
                HookHandler.HookDoSendEvent();
            }
            remove => HookHandler._afterDoSendEvent -= value;
        }

        public static event Delegates.sendEventToGO_NormalArgs sendEventToGO
        {
            add
            {
                HookHandler._aftersendEventToGO += value;
                HookHandler.HooksendEventToGO();
            }
            remove => HookHandler._aftersendEventToGO -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "OnEnter"), value);
        }

        public static event Delegates.DoSendEvent_NormalArgs DoSendEvent
        {
            add => HookEndpointManager.Add<Delegates.DoSendEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "DoSendEvent"), value);
            remove => HookEndpointManager.Remove<Delegates.DoSendEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "DoSendEvent"), value);
        }

        public static event Delegates.sendEventToGO_NormalArgs sendEventToGO
        {
            add => HookEndpointManager.Add<Delegates.sendEventToGO_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "sendEventToGO"), value);
            remove => HookEndpointManager.Remove<Delegates.sendEventToGO_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ArrayListSendEventToGameObjects), "sendEventToGO"), value);
        }
    }
}