using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUpdateManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUpdateManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Instance()
        {
            if (!HookedList.Contains("get_Instance"))
            {
                HookedList.Add("get_Instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUpdateManager), "get_Instance", false),
                    get_Instance);
            }
        }

        internal static event Delegates.get_Instance_BeforeArgs _beforeget_Instance;
        internal static event Delegates.get_Instance_NormalArgs _afterget_Instance;

        private static tk2dUpdateManager get_Instance(Func<tk2dUpdateManager> orig)
        {
            _beforeget_Instance?.Invoke();
            var retVal = orig();
            if (_afterget_Instance != null) retVal = _afterget_Instance.Invoke();
            return retVal;
        }

        internal static void HookQueueCommit()
        {
            if (!HookedList.Contains("QueueCommit"))
            {
                HookedList.Add("QueueCommit");
                On.tk2dUpdateManager.QueueCommit += QueueCommit;
            }
        }

        internal static event Delegates.QueueCommit_BeforeArgs _beforeQueueCommit;
        internal static event Delegates.QueueCommit_NormalArgs _afterQueueCommit;

        private static void QueueCommit(On.tk2dUpdateManager.orig_QueueCommit orig, tk2dTextMesh textMesh)
        {
            Delegates.Params_QueueCommit @params = new()
            {
                textMesh = textMesh
            };
            _beforeQueueCommit?.Invoke(@params);
            textMesh = @params.textMesh;
            orig(textMesh);
            if (_afterQueueCommit != null) _afterQueueCommit.Invoke(@params);
        }

        internal static void HookFlushQueues()
        {
            if (!HookedList.Contains("FlushQueues"))
            {
                HookedList.Add("FlushQueues");
                On.tk2dUpdateManager.FlushQueues += FlushQueues;
            }
        }

        internal static event Delegates.FlushQueues_BeforeArgs _beforeFlushQueues;
        internal static event Delegates.FlushQueues_NormalArgs _afterFlushQueues;

        private static void FlushQueues(On.tk2dUpdateManager.orig_FlushQueues orig)
        {
            _beforeFlushQueues?.Invoke();
            orig();
            if (_afterFlushQueues != null) _afterFlushQueues.Invoke();
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUpdateManager.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUpdateManager.orig_OnEnable orig, tk2dUpdateManager self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.tk2dUpdateManager.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(On.tk2dUpdateManager.orig_LateUpdate orig, tk2dUpdateManager self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookcoSuperLateUpdate()
        {
            if (!HookedList.Contains("coSuperLateUpdate"))
            {
                HookedList.Add("coSuperLateUpdate");
                On.tk2dUpdateManager.coSuperLateUpdate += coSuperLateUpdate;
            }
        }

        internal static event Delegates.coSuperLateUpdate_BeforeArgs _beforecoSuperLateUpdate;

        private static IEnumerator coSuperLateUpdate(On.tk2dUpdateManager.orig_coSuperLateUpdate orig,
            tk2dUpdateManager self)
        {
            Delegates.Params_coSuperLateUpdate @params = new()
            {
                self = self
            };
            _beforecoSuperLateUpdate?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookQueueCommitInternal()
        {
            if (!HookedList.Contains("QueueCommitInternal"))
            {
                HookedList.Add("QueueCommitInternal");
                On.tk2dUpdateManager.QueueCommitInternal += QueueCommitInternal;
            }
        }

        internal static event Delegates.QueueCommitInternal_BeforeArgs _beforeQueueCommitInternal;
        internal static event Delegates.QueueCommitInternal_NormalArgs _afterQueueCommitInternal;

        private static void QueueCommitInternal(On.tk2dUpdateManager.orig_QueueCommitInternal orig,
            tk2dUpdateManager self, tk2dTextMesh textMesh)
        {
            Delegates.Params_QueueCommitInternal @params = new()
            {
                self = self, textMesh = textMesh
            };
            _beforeQueueCommitInternal?.Invoke(@params);
            self = @params.self;
            textMesh = @params.textMesh;
            orig(self, textMesh);
            if (_afterQueueCommitInternal != null) _afterQueueCommitInternal.Invoke(@params);
        }

        internal static void HookFlushQueuesInternal()
        {
            if (!HookedList.Contains("FlushQueuesInternal"))
            {
                HookedList.Add("FlushQueuesInternal");
                On.tk2dUpdateManager.FlushQueuesInternal += FlushQueuesInternal;
            }
        }

        internal static event Delegates.FlushQueuesInternal_BeforeArgs _beforeFlushQueuesInternal;
        internal static event Delegates.FlushQueuesInternal_NormalArgs _afterFlushQueuesInternal;

        private static void FlushQueuesInternal(On.tk2dUpdateManager.orig_FlushQueuesInternal orig,
            tk2dUpdateManager self)
        {
            Delegates.Params_FlushQueuesInternal @params = new()
            {
                self = self
            };
            _beforeFlushQueuesInternal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlushQueuesInternal != null) _afterFlushQueuesInternal.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void coSuperLateUpdate_BeforeArgs(Params_coSuperLateUpdate args);

        public delegate IEnumerator coSuperLateUpdate_NormalArgs(Params_coSuperLateUpdate args);

        public delegate void FlushQueues_BeforeArgs();

        public delegate void FlushQueues_NormalArgs();

        public delegate void FlushQueuesInternal_BeforeArgs(Params_FlushQueuesInternal args);

        public delegate void FlushQueuesInternal_NormalArgs(Params_FlushQueuesInternal args);

        public delegate void get_Instance_BeforeArgs();

        public delegate tk2dUpdateManager get_Instance_NormalArgs();

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void QueueCommit_BeforeArgs(Params_QueueCommit args);

        public delegate void QueueCommit_NormalArgs(Params_QueueCommit args);

        public delegate void QueueCommitInternal_BeforeArgs(Params_QueueCommitInternal args);

        public delegate void QueueCommitInternal_NormalArgs(Params_QueueCommitInternal args);

        public sealed class Params_QueueCommit
        {
            public tk2dTextMesh textMesh;
        }

        public sealed class Params_OnEnable
        {
            public tk2dUpdateManager self;
        }

        public sealed class Params_LateUpdate
        {
            public tk2dUpdateManager self;
        }

        public sealed class Params_coSuperLateUpdate
        {
            public tk2dUpdateManager self;
        }

        public sealed class Params_QueueCommitInternal
        {
            public tk2dUpdateManager self;
            public tk2dTextMesh textMesh;
        }

        public sealed class Params_FlushQueuesInternal
        {
            public tk2dUpdateManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Instance_BeforeArgs get_Instance
        {
            add
            {
                HookHandler._beforeget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._beforeget_Instance -= value;
        }

        public static event Delegates.QueueCommit_BeforeArgs QueueCommit
        {
            add
            {
                HookHandler._beforeQueueCommit += value;
                HookHandler.HookQueueCommit();
            }
            remove => HookHandler._beforeQueueCommit -= value;
        }

        public static event Delegates.FlushQueues_BeforeArgs FlushQueues
        {
            add
            {
                HookHandler._beforeFlushQueues += value;
                HookHandler.HookFlushQueues();
            }
            remove => HookHandler._beforeFlushQueues -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.coSuperLateUpdate_BeforeArgs coSuperLateUpdate
        {
            add
            {
                HookHandler._beforecoSuperLateUpdate += value;
                HookHandler.HookcoSuperLateUpdate();
            }
            remove => HookHandler._beforecoSuperLateUpdate -= value;
        }

        public static event Delegates.QueueCommitInternal_BeforeArgs QueueCommitInternal
        {
            add
            {
                HookHandler._beforeQueueCommitInternal += value;
                HookHandler.HookQueueCommitInternal();
            }
            remove => HookHandler._beforeQueueCommitInternal -= value;
        }

        public static event Delegates.FlushQueuesInternal_BeforeArgs FlushQueuesInternal
        {
            add
            {
                HookHandler._beforeFlushQueuesInternal += value;
                HookHandler.HookFlushQueuesInternal();
            }
            remove => HookHandler._beforeFlushQueuesInternal -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Instance_NormalArgs get_Instance
        {
            add
            {
                HookHandler._afterget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._afterget_Instance -= value;
        }

        public static event Delegates.QueueCommit_NormalArgs QueueCommit
        {
            add
            {
                HookHandler._afterQueueCommit += value;
                HookHandler.HookQueueCommit();
            }
            remove => HookHandler._afterQueueCommit -= value;
        }

        public static event Delegates.FlushQueues_NormalArgs FlushQueues
        {
            add
            {
                HookHandler._afterFlushQueues += value;
                HookHandler.HookFlushQueues();
            }
            remove => HookHandler._afterFlushQueues -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.QueueCommitInternal_NormalArgs QueueCommitInternal
        {
            add
            {
                HookHandler._afterQueueCommitInternal += value;
                HookHandler.HookQueueCommitInternal();
            }
            remove => HookHandler._afterQueueCommitInternal -= value;
        }

        public static event Delegates.FlushQueuesInternal_NormalArgs FlushQueuesInternal
        {
            add
            {
                HookHandler._afterFlushQueuesInternal += value;
                HookHandler.HookFlushQueuesInternal();
            }
            remove => HookHandler._afterFlushQueuesInternal -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Instance_NormalArgs get_Instance
        {
            add => HookEndpointManager.Add<Delegates.get_Instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUpdateManager), "get_Instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUpdateManager), "get_Instance", false), value);
        }

        public static event On.tk2dUpdateManager.hook_QueueCommit QueueCommit
        {
            add => On.tk2dUpdateManager.QueueCommit += value;
            remove => On.tk2dUpdateManager.QueueCommit -= value;
        }

        public static event On.tk2dUpdateManager.hook_FlushQueues FlushQueues
        {
            add => On.tk2dUpdateManager.FlushQueues += value;
            remove => On.tk2dUpdateManager.FlushQueues -= value;
        }

        public static event On.tk2dUpdateManager.hook_OnEnable OnEnable
        {
            add => On.tk2dUpdateManager.OnEnable += value;
            remove => On.tk2dUpdateManager.OnEnable -= value;
        }

        public static event On.tk2dUpdateManager.hook_LateUpdate LateUpdate
        {
            add => On.tk2dUpdateManager.LateUpdate += value;
            remove => On.tk2dUpdateManager.LateUpdate -= value;
        }

        public static event On.tk2dUpdateManager.hook_coSuperLateUpdate coSuperLateUpdate
        {
            add => On.tk2dUpdateManager.coSuperLateUpdate += value;
            remove => On.tk2dUpdateManager.coSuperLateUpdate -= value;
        }

        public static event On.tk2dUpdateManager.hook_QueueCommitInternal QueueCommitInternal
        {
            add => On.tk2dUpdateManager.QueueCommitInternal += value;
            remove => On.tk2dUpdateManager.QueueCommitInternal -= value;
        }

        public static event On.tk2dUpdateManager.hook_FlushQueuesInternal FlushQueuesInternal
        {
            add => On.tk2dUpdateManager.FlushQueuesInternal += value;
            remove => On.tk2dUpdateManager.FlushQueuesInternal -= value;
        }
    }
}