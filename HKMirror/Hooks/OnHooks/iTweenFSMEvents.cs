using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for iTweenFSMEvents class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OniTweenFSMEvents
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookiTweenOnStart()
        {
            if (!HookedList.Contains("iTweenOnStart"))
            {
                HookedList.Add("iTweenOnStart");
                On.iTweenFSMEvents.iTweenOnStart += iTweenOnStart;
            }
        }

        internal static event Delegates.iTweenOnStart_BeforeArgs _beforeiTweenOnStart;
        internal static event Delegates.iTweenOnStart_AfterArgs _afteriTweenOnStart;

        private static void iTweenOnStart(On.iTweenFSMEvents.orig_iTweenOnStart orig, iTweenFSMEvents self,
            int aniTweenID)
        {
            Delegates.Params_iTweenOnStart @params = new()
            {
                self = self, aniTweenID = aniTweenID
            };
            if (_beforeiTweenOnStart != null)
            {
                foreach (Delegates.iTweenOnStart_BeforeArgs toInvoke in _beforeiTweenOnStart.GetInvocationList())
                {
                    try
                    {
                        _beforeiTweenOnStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            aniTweenID = @params.aniTweenID;
            orig(self, aniTweenID);
            if (_afteriTweenOnStart != null)
            {
                foreach (Delegates.iTweenOnStart_AfterArgs toInvoke in _afteriTweenOnStart.GetInvocationList())
                {
                    try
                    {
                        _afteriTweenOnStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookiTweenOnComplete()
        {
            if (!HookedList.Contains("iTweenOnComplete"))
            {
                HookedList.Add("iTweenOnComplete");
                On.iTweenFSMEvents.iTweenOnComplete += iTweenOnComplete;
            }
        }

        internal static event Delegates.iTweenOnComplete_BeforeArgs _beforeiTweenOnComplete;
        internal static event Delegates.iTweenOnComplete_AfterArgs _afteriTweenOnComplete;

        private static void iTweenOnComplete(On.iTweenFSMEvents.orig_iTweenOnComplete orig, iTweenFSMEvents self,
            int aniTweenID)
        {
            Delegates.Params_iTweenOnComplete @params = new()
            {
                self = self, aniTweenID = aniTweenID
            };
            if (_beforeiTweenOnComplete != null)
            {
                foreach (Delegates.iTweenOnComplete_BeforeArgs toInvoke in _beforeiTweenOnComplete.GetInvocationList())
                {
                    try
                    {
                        _beforeiTweenOnComplete?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            aniTweenID = @params.aniTweenID;
            orig(self, aniTweenID);
            if (_afteriTweenOnComplete != null)
            {
                foreach (Delegates.iTweenOnComplete_AfterArgs toInvoke in _afteriTweenOnComplete.GetInvocationList())
                {
                    try
                    {
                        _afteriTweenOnComplete.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_iTweenOnStart
        {
            public iTweenFSMEvents self;
            public int aniTweenID;
        }

        public delegate void iTweenOnStart_BeforeArgs(Params_iTweenOnStart args);

        public delegate void iTweenOnStart_AfterArgs(Params_iTweenOnStart args);

        public delegate void iTweenOnStart_WithArgs(Action<iTweenFSMEvents, int> orig, iTweenFSMEvents self,
            int aniTweenID);

        public sealed class Params_iTweenOnComplete
        {
            public iTweenFSMEvents self;
            public int aniTweenID;
        }

        public delegate void iTweenOnComplete_BeforeArgs(Params_iTweenOnComplete args);

        public delegate void iTweenOnComplete_AfterArgs(Params_iTweenOnComplete args);

        public delegate void iTweenOnComplete_WithArgs(Action<iTweenFSMEvents, int> orig, iTweenFSMEvents self,
            int aniTweenID);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.iTweenOnStart_BeforeArgs iTweenOnStart
        {
            add
            {
                HookHandler._beforeiTweenOnStart += value;
                HookHandler.HookiTweenOnStart();
            }
            remove => HookHandler._beforeiTweenOnStart -= value;
        }

        public static event Delegates.iTweenOnComplete_BeforeArgs iTweenOnComplete
        {
            add
            {
                HookHandler._beforeiTweenOnComplete += value;
                HookHandler.HookiTweenOnComplete();
            }
            remove => HookHandler._beforeiTweenOnComplete -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.iTweenOnStart_AfterArgs iTweenOnStart
        {
            add
            {
                HookHandler._afteriTweenOnStart += value;
                HookHandler.HookiTweenOnStart();
            }
            remove => HookHandler._afteriTweenOnStart -= value;
        }

        public static event Delegates.iTweenOnComplete_AfterArgs iTweenOnComplete
        {
            add
            {
                HookHandler._afteriTweenOnComplete += value;
                HookHandler.HookiTweenOnComplete();
            }
            remove => HookHandler._afteriTweenOnComplete -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.iTweenFSMEvents.hook_iTweenOnStart iTweenOnStart
        {
            add => On.iTweenFSMEvents.iTweenOnStart += value;
            remove => On.iTweenFSMEvents.iTweenOnStart -= value;
        }

        public static event On.iTweenFSMEvents.hook_iTweenOnComplete iTweenOnComplete
        {
            add => On.iTweenFSMEvents.iTweenOnComplete += value;
            remove => On.iTweenFSMEvents.iTweenOnComplete -= value;
        }
    }
}