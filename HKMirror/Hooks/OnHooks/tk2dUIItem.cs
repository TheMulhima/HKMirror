using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIItem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIItem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dUIItem.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.tk2dUIItem.orig_Awake orig, tk2dUIItem self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUIItem.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.tk2dUIItem.orig_Start orig, tk2dUIItem self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsPressed()
        {
            if (!HookedList.Contains("get_IsPressed"))
            {
                HookedList.Add("get_IsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_IsPressed"), get_IsPressed);
            }
        }

        internal static event Delegates.get_IsPressed_BeforeArgs _beforeget_IsPressed;
        internal static event Delegates.get_IsPressed_AfterArgs _afterget_IsPressed;

        private static bool get_IsPressed(Func<tk2dUIItem, bool> orig, tk2dUIItem self)
        {
            Delegates.Params_get_IsPressed @params = new()
            {
                self = self
            };
            if (_beforeget_IsPressed != null)
                foreach (Delegates.get_IsPressed_BeforeArgs toInvoke in _beforeget_IsPressed.GetInvocationList())
                    try
                    {
                        _beforeget_IsPressed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsPressed != null)
                foreach (Delegates.get_IsPressed_AfterArgs toInvoke in _afterget_IsPressed.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsPressed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_Touch()
        {
            if (!HookedList.Contains("get_Touch"))
            {
                HookedList.Add("get_Touch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_Touch"), get_Touch);
            }
        }

        internal static event Delegates.get_Touch_BeforeArgs _beforeget_Touch;
        internal static event Delegates.get_Touch_AfterArgs _afterget_Touch;

        private static tk2dUITouch get_Touch(Func<tk2dUIItem, tk2dUITouch> orig, tk2dUIItem self)
        {
            Delegates.Params_get_Touch @params = new()
            {
                self = self
            };
            if (_beforeget_Touch != null)
                foreach (Delegates.get_Touch_BeforeArgs toInvoke in _beforeget_Touch.GetInvocationList())
                    try
                    {
                        _beforeget_Touch?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Touch != null)
                foreach (Delegates.get_Touch_AfterArgs toInvoke in _afterget_Touch.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Touch.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_ParentUIItem()
        {
            if (!HookedList.Contains("get_ParentUIItem"))
            {
                HookedList.Add("get_ParentUIItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_ParentUIItem"), get_ParentUIItem);
            }
        }

        internal static event Delegates.get_ParentUIItem_BeforeArgs _beforeget_ParentUIItem;
        internal static event Delegates.get_ParentUIItem_AfterArgs _afterget_ParentUIItem;

        private static tk2dUIItem get_ParentUIItem(Func<tk2dUIItem, tk2dUIItem> orig, tk2dUIItem self)
        {
            Delegates.Params_get_ParentUIItem @params = new()
            {
                self = self
            };
            if (_beforeget_ParentUIItem != null)
                foreach (Delegates.get_ParentUIItem_BeforeArgs toInvoke in _beforeget_ParentUIItem.GetInvocationList())
                    try
                    {
                        _beforeget_ParentUIItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ParentUIItem != null)
                foreach (Delegates.get_ParentUIItem_AfterArgs toInvoke in _afterget_ParentUIItem.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ParentUIItem.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateParent()
        {
            if (!HookedList.Contains("UpdateParent"))
            {
                HookedList.Add("UpdateParent");
                On.tk2dUIItem.UpdateParent += UpdateParent;
            }
        }

        internal static event Delegates.UpdateParent_BeforeArgs _beforeUpdateParent;
        internal static event Delegates.UpdateParent_AfterArgs _afterUpdateParent;

        private static void UpdateParent(On.tk2dUIItem.orig_UpdateParent orig, tk2dUIItem self)
        {
            Delegates.Params_UpdateParent @params = new()
            {
                self = self
            };
            if (_beforeUpdateParent != null)
                foreach (Delegates.UpdateParent_BeforeArgs toInvoke in _beforeUpdateParent.GetInvocationList())
                    try
                    {
                        _beforeUpdateParent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateParent != null)
                foreach (Delegates.UpdateParent_AfterArgs toInvoke in _afterUpdateParent.GetInvocationList())
                    try
                    {
                        _afterUpdateParent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookManuallySetParent()
        {
            if (!HookedList.Contains("ManuallySetParent"))
            {
                HookedList.Add("ManuallySetParent");
                On.tk2dUIItem.ManuallySetParent += ManuallySetParent;
            }
        }

        internal static event Delegates.ManuallySetParent_BeforeArgs _beforeManuallySetParent;
        internal static event Delegates.ManuallySetParent_AfterArgs _afterManuallySetParent;

        private static void ManuallySetParent(On.tk2dUIItem.orig_ManuallySetParent orig, tk2dUIItem self,
            tk2dUIItem newParentUIItem)
        {
            Delegates.Params_ManuallySetParent @params = new()
            {
                self = self, newParentUIItem = newParentUIItem
            };
            if (_beforeManuallySetParent != null)
                foreach (Delegates.ManuallySetParent_BeforeArgs toInvoke in
                         _beforeManuallySetParent.GetInvocationList())
                    try
                    {
                        _beforeManuallySetParent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            newParentUIItem = @params.newParentUIItem;
            orig(self, newParentUIItem);
            if (_afterManuallySetParent != null)
                foreach (Delegates.ManuallySetParent_AfterArgs toInvoke in _afterManuallySetParent.GetInvocationList())
                    try
                    {
                        _afterManuallySetParent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveParent()
        {
            if (!HookedList.Contains("RemoveParent"))
            {
                HookedList.Add("RemoveParent");
                On.tk2dUIItem.RemoveParent += RemoveParent;
            }
        }

        internal static event Delegates.RemoveParent_BeforeArgs _beforeRemoveParent;
        internal static event Delegates.RemoveParent_AfterArgs _afterRemoveParent;

        private static void RemoveParent(On.tk2dUIItem.orig_RemoveParent orig, tk2dUIItem self)
        {
            Delegates.Params_RemoveParent @params = new()
            {
                self = self
            };
            if (_beforeRemoveParent != null)
                foreach (Delegates.RemoveParent_BeforeArgs toInvoke in _beforeRemoveParent.GetInvocationList())
                    try
                    {
                        _beforeRemoveParent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRemoveParent != null)
                foreach (Delegates.RemoveParent_AfterArgs toInvoke in _afterRemoveParent.GetInvocationList())
                    try
                    {
                        _afterRemoveParent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPress_tk2dUITouch()
        {
            if (!HookedList.Contains("Press_tk2dUITouch"))
            {
                HookedList.Add("Press_tk2dUITouch");
                On.tk2dUIItem.Press_tk2dUITouch += Press_tk2dUITouch;
            }
        }

        internal static event Delegates.Press_tk2dUITouch_BeforeArgs _beforePress_tk2dUITouch;
        internal static event Delegates.Press_tk2dUITouch_AfterArgs _afterPress_tk2dUITouch;

        private static bool Press_tk2dUITouch(On.tk2dUIItem.orig_Press_tk2dUITouch orig, tk2dUIItem self,
            tk2dUITouch touch)
        {
            Delegates.Params_Press_tk2dUITouch @params = new()
            {
                self = self, touch = touch
            };
            if (_beforePress_tk2dUITouch != null)
                foreach (Delegates.Press_tk2dUITouch_BeforeArgs toInvoke in
                         _beforePress_tk2dUITouch.GetInvocationList())
                    try
                    {
                        _beforePress_tk2dUITouch?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            touch = @params.touch;
            var retVal = orig(self, touch);
            if (_afterPress_tk2dUITouch != null)
                foreach (Delegates.Press_tk2dUITouch_AfterArgs toInvoke in _afterPress_tk2dUITouch.GetInvocationList())
                    try
                    {
                        retVal = _afterPress_tk2dUITouch.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPress_tk2dUITouch_tk2dUIItem()
        {
            if (!HookedList.Contains("Press_tk2dUITouch_tk2dUIItem"))
            {
                HookedList.Add("Press_tk2dUITouch_tk2dUIItem");
                On.tk2dUIItem.Press_tk2dUITouch_tk2dUIItem += Press_tk2dUITouch_tk2dUIItem;
            }
        }

        internal static event Delegates.Press_tk2dUITouch_tk2dUIItem_BeforeArgs _beforePress_tk2dUITouch_tk2dUIItem;
        internal static event Delegates.Press_tk2dUITouch_tk2dUIItem_AfterArgs _afterPress_tk2dUITouch_tk2dUIItem;

        private static bool Press_tk2dUITouch_tk2dUIItem(On.tk2dUIItem.orig_Press_tk2dUITouch_tk2dUIItem orig,
            tk2dUIItem self, tk2dUITouch touch, tk2dUIItem sentFromChild)
        {
            Delegates.Params_Press_tk2dUITouch_tk2dUIItem @params = new()
            {
                self = self, touch = touch, sentFromChild = sentFromChild
            };
            if (_beforePress_tk2dUITouch_tk2dUIItem != null)
                foreach (Delegates.Press_tk2dUITouch_tk2dUIItem_BeforeArgs toInvoke in
                         _beforePress_tk2dUITouch_tk2dUIItem.GetInvocationList())
                    try
                    {
                        _beforePress_tk2dUITouch_tk2dUIItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            touch = @params.touch;
            sentFromChild = @params.sentFromChild;
            var retVal = orig(self, touch, sentFromChild);
            if (_afterPress_tk2dUITouch_tk2dUIItem != null)
                foreach (Delegates.Press_tk2dUITouch_tk2dUIItem_AfterArgs toInvoke in _afterPress_tk2dUITouch_tk2dUIItem
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterPress_tk2dUITouch_tk2dUIItem.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateTouch()
        {
            if (!HookedList.Contains("UpdateTouch"))
            {
                HookedList.Add("UpdateTouch");
                On.tk2dUIItem.UpdateTouch += UpdateTouch;
            }
        }

        internal static event Delegates.UpdateTouch_BeforeArgs _beforeUpdateTouch;
        internal static event Delegates.UpdateTouch_AfterArgs _afterUpdateTouch;

        private static void UpdateTouch(On.tk2dUIItem.orig_UpdateTouch orig, tk2dUIItem self, tk2dUITouch touch)
        {
            Delegates.Params_UpdateTouch @params = new()
            {
                self = self, touch = touch
            };
            if (_beforeUpdateTouch != null)
                foreach (Delegates.UpdateTouch_BeforeArgs toInvoke in _beforeUpdateTouch.GetInvocationList())
                    try
                    {
                        _beforeUpdateTouch?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterUpdateTouch != null)
                foreach (Delegates.UpdateTouch_AfterArgs toInvoke in _afterUpdateTouch.GetInvocationList())
                    try
                    {
                        _afterUpdateTouch.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoSendMessage()
        {
            if (!HookedList.Contains("DoSendMessage"))
            {
                HookedList.Add("DoSendMessage");
                On.tk2dUIItem.DoSendMessage += DoSendMessage;
            }
        }

        internal static event Delegates.DoSendMessage_BeforeArgs _beforeDoSendMessage;
        internal static event Delegates.DoSendMessage_AfterArgs _afterDoSendMessage;

        private static void DoSendMessage(On.tk2dUIItem.orig_DoSendMessage orig, tk2dUIItem self, string methodName)
        {
            Delegates.Params_DoSendMessage @params = new()
            {
                self = self, methodName = methodName
            };
            if (_beforeDoSendMessage != null)
                foreach (Delegates.DoSendMessage_BeforeArgs toInvoke in _beforeDoSendMessage.GetInvocationList())
                    try
                    {
                        _beforeDoSendMessage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            methodName = @params.methodName;
            orig(self, methodName);
            if (_afterDoSendMessage != null)
                foreach (Delegates.DoSendMessage_AfterArgs toInvoke in _afterDoSendMessage.GetInvocationList())
                    try
                    {
                        _afterDoSendMessage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRelease()
        {
            if (!HookedList.Contains("Release"))
            {
                HookedList.Add("Release");
                On.tk2dUIItem.Release += Release;
            }
        }

        internal static event Delegates.Release_BeforeArgs _beforeRelease;
        internal static event Delegates.Release_AfterArgs _afterRelease;

        private static void Release(On.tk2dUIItem.orig_Release orig, tk2dUIItem self)
        {
            Delegates.Params_Release @params = new()
            {
                self = self
            };
            if (_beforeRelease != null)
                foreach (Delegates.Release_BeforeArgs toInvoke in _beforeRelease.GetInvocationList())
                    try
                    {
                        _beforeRelease?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRelease != null)
                foreach (Delegates.Release_AfterArgs toInvoke in _afterRelease.GetInvocationList())
                    try
                    {
                        _afterRelease.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCurrentOverUIItem()
        {
            if (!HookedList.Contains("CurrentOverUIItem"))
            {
                HookedList.Add("CurrentOverUIItem");
                On.tk2dUIItem.CurrentOverUIItem += CurrentOverUIItem;
            }
        }

        internal static event Delegates.CurrentOverUIItem_BeforeArgs _beforeCurrentOverUIItem;
        internal static event Delegates.CurrentOverUIItem_AfterArgs _afterCurrentOverUIItem;

        private static void CurrentOverUIItem(On.tk2dUIItem.orig_CurrentOverUIItem orig, tk2dUIItem self,
            tk2dUIItem overUIItem)
        {
            Delegates.Params_CurrentOverUIItem @params = new()
            {
                self = self, overUIItem = overUIItem
            };
            if (_beforeCurrentOverUIItem != null)
                foreach (Delegates.CurrentOverUIItem_BeforeArgs toInvoke in
                         _beforeCurrentOverUIItem.GetInvocationList())
                    try
                    {
                        _beforeCurrentOverUIItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            overUIItem = @params.overUIItem;
            orig(self, overUIItem);
            if (_afterCurrentOverUIItem != null)
                foreach (Delegates.CurrentOverUIItem_AfterArgs toInvoke in _afterCurrentOverUIItem.GetInvocationList())
                    try
                    {
                        _afterCurrentOverUIItem.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckIsUIItemChildOfMe()
        {
            if (!HookedList.Contains("CheckIsUIItemChildOfMe"))
            {
                HookedList.Add("CheckIsUIItemChildOfMe");
                On.tk2dUIItem.CheckIsUIItemChildOfMe += CheckIsUIItemChildOfMe;
            }
        }

        internal static event Delegates.CheckIsUIItemChildOfMe_BeforeArgs _beforeCheckIsUIItemChildOfMe;
        internal static event Delegates.CheckIsUIItemChildOfMe_AfterArgs _afterCheckIsUIItemChildOfMe;

        private static bool CheckIsUIItemChildOfMe(On.tk2dUIItem.orig_CheckIsUIItemChildOfMe orig, tk2dUIItem self,
            tk2dUIItem uiItem)
        {
            Delegates.Params_CheckIsUIItemChildOfMe @params = new()
            {
                self = self, uiItem = uiItem
            };
            if (_beforeCheckIsUIItemChildOfMe != null)
                foreach (Delegates.CheckIsUIItemChildOfMe_BeforeArgs toInvoke in _beforeCheckIsUIItemChildOfMe
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckIsUIItemChildOfMe?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            uiItem = @params.uiItem;
            var retVal = orig(self, uiItem);
            if (_afterCheckIsUIItemChildOfMe != null)
                foreach (Delegates.CheckIsUIItemChildOfMe_AfterArgs toInvoke in _afterCheckIsUIItemChildOfMe
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCheckIsUIItemChildOfMe.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookExit()
        {
            if (!HookedList.Contains("Exit"))
            {
                HookedList.Add("Exit");
                On.tk2dUIItem.Exit += Exit;
            }
        }

        internal static event Delegates.Exit_BeforeArgs _beforeExit;
        internal static event Delegates.Exit_AfterArgs _afterExit;

        private static void Exit(On.tk2dUIItem.orig_Exit orig, tk2dUIItem self)
        {
            Delegates.Params_Exit @params = new()
            {
                self = self
            };
            if (_beforeExit != null)
                foreach (Delegates.Exit_BeforeArgs toInvoke in _beforeExit.GetInvocationList())
                    try
                    {
                        _beforeExit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterExit != null)
                foreach (Delegates.Exit_AfterArgs toInvoke in _afterExit.GetInvocationList())
                    try
                    {
                        _afterExit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHoverOver()
        {
            if (!HookedList.Contains("HoverOver"))
            {
                HookedList.Add("HoverOver");
                On.tk2dUIItem.HoverOver += HoverOver;
            }
        }

        internal static event Delegates.HoverOver_BeforeArgs _beforeHoverOver;
        internal static event Delegates.HoverOver_AfterArgs _afterHoverOver;

        private static bool HoverOver(On.tk2dUIItem.orig_HoverOver orig, tk2dUIItem self, tk2dUIItem prevHover)
        {
            Delegates.Params_HoverOver @params = new()
            {
                self = self, prevHover = prevHover
            };
            if (_beforeHoverOver != null)
                foreach (Delegates.HoverOver_BeforeArgs toInvoke in _beforeHoverOver.GetInvocationList())
                    try
                    {
                        _beforeHoverOver?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            prevHover = @params.prevHover;
            var retVal = orig(self, prevHover);
            if (_afterHoverOver != null)
                foreach (Delegates.HoverOver_AfterArgs toInvoke in _afterHoverOver.GetInvocationList())
                    try
                    {
                        retVal = _afterHoverOver.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookHoverOut()
        {
            if (!HookedList.Contains("HoverOut"))
            {
                HookedList.Add("HoverOut");
                On.tk2dUIItem.HoverOut += HoverOut;
            }
        }

        internal static event Delegates.HoverOut_BeforeArgs _beforeHoverOut;
        internal static event Delegates.HoverOut_AfterArgs _afterHoverOut;

        private static void HoverOut(On.tk2dUIItem.orig_HoverOut orig, tk2dUIItem self, tk2dUIItem currHoverButton)
        {
            Delegates.Params_HoverOut @params = new()
            {
                self = self, currHoverButton = currHoverButton
            };
            if (_beforeHoverOut != null)
                foreach (Delegates.HoverOut_BeforeArgs toInvoke in _beforeHoverOut.GetInvocationList())
                    try
                    {
                        _beforeHoverOut?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            currHoverButton = @params.currHoverButton;
            orig(self, currHoverButton);
            if (_afterHoverOut != null)
                foreach (Delegates.HoverOut_AfterArgs toInvoke in _afterHoverOut.GetInvocationList())
                    try
                    {
                        _afterHoverOut.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetParentUIItem()
        {
            if (!HookedList.Contains("GetParentUIItem"))
            {
                HookedList.Add("GetParentUIItem");
                On.tk2dUIItem.GetParentUIItem += GetParentUIItem;
            }
        }

        internal static event Delegates.GetParentUIItem_BeforeArgs _beforeGetParentUIItem;
        internal static event Delegates.GetParentUIItem_AfterArgs _afterGetParentUIItem;

        private static tk2dUIItem GetParentUIItem(On.tk2dUIItem.orig_GetParentUIItem orig, tk2dUIItem self)
        {
            Delegates.Params_GetParentUIItem @params = new()
            {
                self = self
            };
            if (_beforeGetParentUIItem != null)
                foreach (Delegates.GetParentUIItem_BeforeArgs toInvoke in _beforeGetParentUIItem.GetInvocationList())
                    try
                    {
                        _beforeGetParentUIItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetParentUIItem != null)
                foreach (Delegates.GetParentUIItem_AfterArgs toInvoke in _afterGetParentUIItem.GetInvocationList())
                    try
                    {
                        retVal = _afterGetParentUIItem.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSimulateClick()
        {
            if (!HookedList.Contains("SimulateClick"))
            {
                HookedList.Add("SimulateClick");
                On.tk2dUIItem.SimulateClick += SimulateClick;
            }
        }

        internal static event Delegates.SimulateClick_BeforeArgs _beforeSimulateClick;
        internal static event Delegates.SimulateClick_AfterArgs _afterSimulateClick;

        private static void SimulateClick(On.tk2dUIItem.orig_SimulateClick orig, tk2dUIItem self)
        {
            Delegates.Params_SimulateClick @params = new()
            {
                self = self
            };
            if (_beforeSimulateClick != null)
                foreach (Delegates.SimulateClick_BeforeArgs toInvoke in _beforeSimulateClick.GetInvocationList())
                    try
                    {
                        _beforeSimulateClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSimulateClick != null)
                foreach (Delegates.SimulateClick_AfterArgs toInvoke in _afterSimulateClick.GetInvocationList())
                    try
                    {
                        _afterSimulateClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInternalSetIsChildOfAnotherUIItem()
        {
            if (!HookedList.Contains("InternalSetIsChildOfAnotherUIItem"))
            {
                HookedList.Add("InternalSetIsChildOfAnotherUIItem");
                On.tk2dUIItem.InternalSetIsChildOfAnotherUIItem += InternalSetIsChildOfAnotherUIItem;
            }
        }

        internal static event Delegates.InternalSetIsChildOfAnotherUIItem_BeforeArgs
            _beforeInternalSetIsChildOfAnotherUIItem;

        internal static event Delegates.InternalSetIsChildOfAnotherUIItem_AfterArgs
            _afterInternalSetIsChildOfAnotherUIItem;

        private static void InternalSetIsChildOfAnotherUIItem(On.tk2dUIItem.orig_InternalSetIsChildOfAnotherUIItem orig,
            tk2dUIItem self, bool state)
        {
            Delegates.Params_InternalSetIsChildOfAnotherUIItem @params = new()
            {
                self = self, state = state
            };
            if (_beforeInternalSetIsChildOfAnotherUIItem != null)
                foreach (Delegates.InternalSetIsChildOfAnotherUIItem_BeforeArgs toInvoke in
                         _beforeInternalSetIsChildOfAnotherUIItem.GetInvocationList())
                    try
                    {
                        _beforeInternalSetIsChildOfAnotherUIItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            state = @params.state;
            orig(self, state);
            if (_afterInternalSetIsChildOfAnotherUIItem != null)
                foreach (Delegates.InternalSetIsChildOfAnotherUIItem_AfterArgs toInvoke in
                         _afterInternalSetIsChildOfAnotherUIItem.GetInvocationList())
                    try
                    {
                        _afterInternalSetIsChildOfAnotherUIItem.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInternalGetIsChildOfAnotherUIItem()
        {
            if (!HookedList.Contains("InternalGetIsChildOfAnotherUIItem"))
            {
                HookedList.Add("InternalGetIsChildOfAnotherUIItem");
                On.tk2dUIItem.InternalGetIsChildOfAnotherUIItem += InternalGetIsChildOfAnotherUIItem;
            }
        }

        internal static event Delegates.InternalGetIsChildOfAnotherUIItem_BeforeArgs
            _beforeInternalGetIsChildOfAnotherUIItem;

        internal static event Delegates.InternalGetIsChildOfAnotherUIItem_AfterArgs
            _afterInternalGetIsChildOfAnotherUIItem;

        private static bool InternalGetIsChildOfAnotherUIItem(On.tk2dUIItem.orig_InternalGetIsChildOfAnotherUIItem orig,
            tk2dUIItem self)
        {
            Delegates.Params_InternalGetIsChildOfAnotherUIItem @params = new()
            {
                self = self
            };
            if (_beforeInternalGetIsChildOfAnotherUIItem != null)
                foreach (Delegates.InternalGetIsChildOfAnotherUIItem_BeforeArgs toInvoke in
                         _beforeInternalGetIsChildOfAnotherUIItem.GetInvocationList())
                    try
                    {
                        _beforeInternalGetIsChildOfAnotherUIItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterInternalGetIsChildOfAnotherUIItem != null)
                foreach (Delegates.InternalGetIsChildOfAnotherUIItem_AfterArgs toInvoke in
                         _afterInternalGetIsChildOfAnotherUIItem.GetInvocationList())
                    try
                    {
                        retVal = _afterInternalGetIsChildOfAnotherUIItem.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<tk2dUIItem> orig, tk2dUIItem self);

        public delegate bool CheckIsUIItemChildOfMe_AfterArgs(Params_CheckIsUIItemChildOfMe args, bool ret);

        public delegate void CheckIsUIItemChildOfMe_BeforeArgs(Params_CheckIsUIItemChildOfMe args);

        public delegate bool CheckIsUIItemChildOfMe_WithArgs(Func<tk2dUIItem, tk2dUIItem, bool> orig, tk2dUIItem self,
            tk2dUIItem uiItem);

        public delegate void CurrentOverUIItem_AfterArgs(Params_CurrentOverUIItem args);

        public delegate void CurrentOverUIItem_BeforeArgs(Params_CurrentOverUIItem args);

        public delegate void CurrentOverUIItem_WithArgs(Action<tk2dUIItem, tk2dUIItem> orig, tk2dUIItem self,
            tk2dUIItem overUIItem);

        public delegate void DoSendMessage_AfterArgs(Params_DoSendMessage args);

        public delegate void DoSendMessage_BeforeArgs(Params_DoSendMessage args);

        public delegate void DoSendMessage_WithArgs(Action<tk2dUIItem, string> orig, tk2dUIItem self,
            string methodName);

        public delegate void Exit_AfterArgs(Params_Exit args);

        public delegate void Exit_BeforeArgs(Params_Exit args);

        public delegate void Exit_WithArgs(Action<tk2dUIItem> orig, tk2dUIItem self);

        public delegate bool get_IsPressed_AfterArgs(Params_get_IsPressed args, bool ret);

        public delegate void get_IsPressed_BeforeArgs(Params_get_IsPressed args);

        public delegate bool get_IsPressed_WithArgs(Func<tk2dUIItem, bool> orig, tk2dUIItem self);

        public delegate tk2dUIItem get_ParentUIItem_AfterArgs(Params_get_ParentUIItem args, tk2dUIItem ret);

        public delegate void get_ParentUIItem_BeforeArgs(Params_get_ParentUIItem args);

        public delegate tk2dUIItem get_ParentUIItem_WithArgs(Func<tk2dUIItem, tk2dUIItem> orig, tk2dUIItem self);

        public delegate tk2dUITouch get_Touch_AfterArgs(Params_get_Touch args, tk2dUITouch ret);

        public delegate void get_Touch_BeforeArgs(Params_get_Touch args);

        public delegate tk2dUITouch get_Touch_WithArgs(Func<tk2dUIItem, tk2dUITouch> orig, tk2dUIItem self);

        public delegate tk2dUIItem GetParentUIItem_AfterArgs(Params_GetParentUIItem args, tk2dUIItem ret);

        public delegate void GetParentUIItem_BeforeArgs(Params_GetParentUIItem args);

        public delegate tk2dUIItem GetParentUIItem_WithArgs(Func<tk2dUIItem, tk2dUIItem> orig, tk2dUIItem self);

        public delegate void HoverOut_AfterArgs(Params_HoverOut args);

        public delegate void HoverOut_BeforeArgs(Params_HoverOut args);

        public delegate void HoverOut_WithArgs(Action<tk2dUIItem, tk2dUIItem> orig, tk2dUIItem self,
            tk2dUIItem currHoverButton);

        public delegate bool HoverOver_AfterArgs(Params_HoverOver args, bool ret);

        public delegate void HoverOver_BeforeArgs(Params_HoverOver args);

        public delegate bool HoverOver_WithArgs(Func<tk2dUIItem, tk2dUIItem, bool> orig, tk2dUIItem self,
            tk2dUIItem prevHover);

        public delegate bool InternalGetIsChildOfAnotherUIItem_AfterArgs(Params_InternalGetIsChildOfAnotherUIItem args,
            bool ret);

        public delegate void
            InternalGetIsChildOfAnotherUIItem_BeforeArgs(Params_InternalGetIsChildOfAnotherUIItem args);

        public delegate bool InternalGetIsChildOfAnotherUIItem_WithArgs(Func<tk2dUIItem, bool> orig, tk2dUIItem self);

        public delegate void InternalSetIsChildOfAnotherUIItem_AfterArgs(Params_InternalSetIsChildOfAnotherUIItem args);

        public delegate void
            InternalSetIsChildOfAnotherUIItem_BeforeArgs(Params_InternalSetIsChildOfAnotherUIItem args);

        public delegate void InternalSetIsChildOfAnotherUIItem_WithArgs(Action<tk2dUIItem, bool> orig, tk2dUIItem self,
            bool state);

        public delegate void ManuallySetParent_AfterArgs(Params_ManuallySetParent args);

        public delegate void ManuallySetParent_BeforeArgs(Params_ManuallySetParent args);

        public delegate void ManuallySetParent_WithArgs(Action<tk2dUIItem, tk2dUIItem> orig, tk2dUIItem self,
            tk2dUIItem newParentUIItem);

        public delegate bool Press_tk2dUITouch_AfterArgs(Params_Press_tk2dUITouch args, bool ret);

        public delegate void Press_tk2dUITouch_BeforeArgs(Params_Press_tk2dUITouch args);

        public delegate bool Press_tk2dUITouch_tk2dUIItem_AfterArgs(Params_Press_tk2dUITouch_tk2dUIItem args, bool ret);

        public delegate void Press_tk2dUITouch_tk2dUIItem_BeforeArgs(Params_Press_tk2dUITouch_tk2dUIItem args);

        public delegate bool Press_tk2dUITouch_tk2dUIItem_WithArgs(Func<tk2dUIItem, tk2dUITouch, tk2dUIItem, bool> orig,
            tk2dUIItem self, tk2dUITouch touch, tk2dUIItem sentFromChild);

        public delegate bool Press_tk2dUITouch_WithArgs(Func<tk2dUIItem, tk2dUITouch, bool> orig, tk2dUIItem self,
            tk2dUITouch touch);

        public delegate void Release_AfterArgs(Params_Release args);

        public delegate void Release_BeforeArgs(Params_Release args);

        public delegate void Release_WithArgs(Action<tk2dUIItem> orig, tk2dUIItem self);

        public delegate void RemoveParent_AfterArgs(Params_RemoveParent args);

        public delegate void RemoveParent_BeforeArgs(Params_RemoveParent args);

        public delegate void RemoveParent_WithArgs(Action<tk2dUIItem> orig, tk2dUIItem self);

        public delegate void SimulateClick_AfterArgs(Params_SimulateClick args);

        public delegate void SimulateClick_BeforeArgs(Params_SimulateClick args);

        public delegate void SimulateClick_WithArgs(Action<tk2dUIItem> orig, tk2dUIItem self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<tk2dUIItem> orig, tk2dUIItem self);

        public delegate void UpdateParent_AfterArgs(Params_UpdateParent args);

        public delegate void UpdateParent_BeforeArgs(Params_UpdateParent args);

        public delegate void UpdateParent_WithArgs(Action<tk2dUIItem> orig, tk2dUIItem self);

        public delegate void UpdateTouch_AfterArgs(Params_UpdateTouch args);

        public delegate void UpdateTouch_BeforeArgs(Params_UpdateTouch args);

        public delegate void UpdateTouch_WithArgs(Action<tk2dUIItem, tk2dUITouch> orig, tk2dUIItem self,
            tk2dUITouch touch);

        public sealed class Params_Awake
        {
            public tk2dUIItem self;
        }

        public sealed class Params_Start
        {
            public tk2dUIItem self;
        }

        public sealed class Params_get_IsPressed
        {
            public tk2dUIItem self;
        }

        public sealed class Params_get_Touch
        {
            public tk2dUIItem self;
        }

        public sealed class Params_get_ParentUIItem
        {
            public tk2dUIItem self;
        }

        public sealed class Params_UpdateParent
        {
            public tk2dUIItem self;
        }

        public sealed class Params_ManuallySetParent
        {
            public tk2dUIItem newParentUIItem;
            public tk2dUIItem self;
        }

        public sealed class Params_RemoveParent
        {
            public tk2dUIItem self;
        }

        public sealed class Params_Press_tk2dUITouch
        {
            public tk2dUIItem self;
            public tk2dUITouch touch;
        }

        public sealed class Params_Press_tk2dUITouch_tk2dUIItem
        {
            public tk2dUIItem self;
            public tk2dUIItem sentFromChild;
            public tk2dUITouch touch;
        }

        public sealed class Params_UpdateTouch
        {
            public tk2dUIItem self;
            public tk2dUITouch touch;
        }

        public sealed class Params_DoSendMessage
        {
            public string methodName;
            public tk2dUIItem self;
        }

        public sealed class Params_Release
        {
            public tk2dUIItem self;
        }

        public sealed class Params_CurrentOverUIItem
        {
            public tk2dUIItem overUIItem;
            public tk2dUIItem self;
        }

        public sealed class Params_CheckIsUIItemChildOfMe
        {
            public tk2dUIItem self;
            public tk2dUIItem uiItem;
        }

        public sealed class Params_Exit
        {
            public tk2dUIItem self;
        }

        public sealed class Params_HoverOver
        {
            public tk2dUIItem prevHover;
            public tk2dUIItem self;
        }

        public sealed class Params_HoverOut
        {
            public tk2dUIItem currHoverButton;
            public tk2dUIItem self;
        }

        public sealed class Params_GetParentUIItem
        {
            public tk2dUIItem self;
        }

        public sealed class Params_SimulateClick
        {
            public tk2dUIItem self;
        }

        public sealed class Params_InternalSetIsChildOfAnotherUIItem
        {
            public tk2dUIItem self;
            public bool state;
        }

        public sealed class Params_InternalGetIsChildOfAnotherUIItem
        {
            public tk2dUIItem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.get_IsPressed_BeforeArgs get_IsPressed
        {
            add
            {
                HookHandler._beforeget_IsPressed += value;
                HookHandler.Hookget_IsPressed();
            }
            remove => HookHandler._beforeget_IsPressed -= value;
        }

        public static event Delegates.get_Touch_BeforeArgs get_Touch
        {
            add
            {
                HookHandler._beforeget_Touch += value;
                HookHandler.Hookget_Touch();
            }
            remove => HookHandler._beforeget_Touch -= value;
        }

        public static event Delegates.get_ParentUIItem_BeforeArgs get_ParentUIItem
        {
            add
            {
                HookHandler._beforeget_ParentUIItem += value;
                HookHandler.Hookget_ParentUIItem();
            }
            remove => HookHandler._beforeget_ParentUIItem -= value;
        }

        public static event Delegates.UpdateParent_BeforeArgs UpdateParent
        {
            add
            {
                HookHandler._beforeUpdateParent += value;
                HookHandler.HookUpdateParent();
            }
            remove => HookHandler._beforeUpdateParent -= value;
        }

        public static event Delegates.ManuallySetParent_BeforeArgs ManuallySetParent
        {
            add
            {
                HookHandler._beforeManuallySetParent += value;
                HookHandler.HookManuallySetParent();
            }
            remove => HookHandler._beforeManuallySetParent -= value;
        }

        public static event Delegates.RemoveParent_BeforeArgs RemoveParent
        {
            add
            {
                HookHandler._beforeRemoveParent += value;
                HookHandler.HookRemoveParent();
            }
            remove => HookHandler._beforeRemoveParent -= value;
        }

        public static event Delegates.Press_tk2dUITouch_BeforeArgs Press_tk2dUITouch
        {
            add
            {
                HookHandler._beforePress_tk2dUITouch += value;
                HookHandler.HookPress_tk2dUITouch();
            }
            remove => HookHandler._beforePress_tk2dUITouch -= value;
        }

        public static event Delegates.Press_tk2dUITouch_tk2dUIItem_BeforeArgs Press_tk2dUITouch_tk2dUIItem
        {
            add
            {
                HookHandler._beforePress_tk2dUITouch_tk2dUIItem += value;
                HookHandler.HookPress_tk2dUITouch_tk2dUIItem();
            }
            remove => HookHandler._beforePress_tk2dUITouch_tk2dUIItem -= value;
        }

        public static event Delegates.UpdateTouch_BeforeArgs UpdateTouch
        {
            add
            {
                HookHandler._beforeUpdateTouch += value;
                HookHandler.HookUpdateTouch();
            }
            remove => HookHandler._beforeUpdateTouch -= value;
        }

        public static event Delegates.DoSendMessage_BeforeArgs DoSendMessage
        {
            add
            {
                HookHandler._beforeDoSendMessage += value;
                HookHandler.HookDoSendMessage();
            }
            remove => HookHandler._beforeDoSendMessage -= value;
        }

        public static event Delegates.Release_BeforeArgs Release
        {
            add
            {
                HookHandler._beforeRelease += value;
                HookHandler.HookRelease();
            }
            remove => HookHandler._beforeRelease -= value;
        }

        public static event Delegates.CurrentOverUIItem_BeforeArgs CurrentOverUIItem
        {
            add
            {
                HookHandler._beforeCurrentOverUIItem += value;
                HookHandler.HookCurrentOverUIItem();
            }
            remove => HookHandler._beforeCurrentOverUIItem -= value;
        }

        public static event Delegates.CheckIsUIItemChildOfMe_BeforeArgs CheckIsUIItemChildOfMe
        {
            add
            {
                HookHandler._beforeCheckIsUIItemChildOfMe += value;
                HookHandler.HookCheckIsUIItemChildOfMe();
            }
            remove => HookHandler._beforeCheckIsUIItemChildOfMe -= value;
        }

        public static event Delegates.Exit_BeforeArgs Exit
        {
            add
            {
                HookHandler._beforeExit += value;
                HookHandler.HookExit();
            }
            remove => HookHandler._beforeExit -= value;
        }

        public static event Delegates.HoverOver_BeforeArgs HoverOver
        {
            add
            {
                HookHandler._beforeHoverOver += value;
                HookHandler.HookHoverOver();
            }
            remove => HookHandler._beforeHoverOver -= value;
        }

        public static event Delegates.HoverOut_BeforeArgs HoverOut
        {
            add
            {
                HookHandler._beforeHoverOut += value;
                HookHandler.HookHoverOut();
            }
            remove => HookHandler._beforeHoverOut -= value;
        }

        public static event Delegates.GetParentUIItem_BeforeArgs GetParentUIItem
        {
            add
            {
                HookHandler._beforeGetParentUIItem += value;
                HookHandler.HookGetParentUIItem();
            }
            remove => HookHandler._beforeGetParentUIItem -= value;
        }

        public static event Delegates.SimulateClick_BeforeArgs SimulateClick
        {
            add
            {
                HookHandler._beforeSimulateClick += value;
                HookHandler.HookSimulateClick();
            }
            remove => HookHandler._beforeSimulateClick -= value;
        }

        public static event Delegates.InternalSetIsChildOfAnotherUIItem_BeforeArgs InternalSetIsChildOfAnotherUIItem
        {
            add
            {
                HookHandler._beforeInternalSetIsChildOfAnotherUIItem += value;
                HookHandler.HookInternalSetIsChildOfAnotherUIItem();
            }
            remove => HookHandler._beforeInternalSetIsChildOfAnotherUIItem -= value;
        }

        public static event Delegates.InternalGetIsChildOfAnotherUIItem_BeforeArgs InternalGetIsChildOfAnotherUIItem
        {
            add
            {
                HookHandler._beforeInternalGetIsChildOfAnotherUIItem += value;
                HookHandler.HookInternalGetIsChildOfAnotherUIItem();
            }
            remove => HookHandler._beforeInternalGetIsChildOfAnotherUIItem -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.get_IsPressed_AfterArgs get_IsPressed
        {
            add
            {
                HookHandler._afterget_IsPressed += value;
                HookHandler.Hookget_IsPressed();
            }
            remove => HookHandler._afterget_IsPressed -= value;
        }

        public static event Delegates.get_Touch_AfterArgs get_Touch
        {
            add
            {
                HookHandler._afterget_Touch += value;
                HookHandler.Hookget_Touch();
            }
            remove => HookHandler._afterget_Touch -= value;
        }

        public static event Delegates.get_ParentUIItem_AfterArgs get_ParentUIItem
        {
            add
            {
                HookHandler._afterget_ParentUIItem += value;
                HookHandler.Hookget_ParentUIItem();
            }
            remove => HookHandler._afterget_ParentUIItem -= value;
        }

        public static event Delegates.UpdateParent_AfterArgs UpdateParent
        {
            add
            {
                HookHandler._afterUpdateParent += value;
                HookHandler.HookUpdateParent();
            }
            remove => HookHandler._afterUpdateParent -= value;
        }

        public static event Delegates.ManuallySetParent_AfterArgs ManuallySetParent
        {
            add
            {
                HookHandler._afterManuallySetParent += value;
                HookHandler.HookManuallySetParent();
            }
            remove => HookHandler._afterManuallySetParent -= value;
        }

        public static event Delegates.RemoveParent_AfterArgs RemoveParent
        {
            add
            {
                HookHandler._afterRemoveParent += value;
                HookHandler.HookRemoveParent();
            }
            remove => HookHandler._afterRemoveParent -= value;
        }

        public static event Delegates.Press_tk2dUITouch_AfterArgs Press_tk2dUITouch
        {
            add
            {
                HookHandler._afterPress_tk2dUITouch += value;
                HookHandler.HookPress_tk2dUITouch();
            }
            remove => HookHandler._afterPress_tk2dUITouch -= value;
        }

        public static event Delegates.Press_tk2dUITouch_tk2dUIItem_AfterArgs Press_tk2dUITouch_tk2dUIItem
        {
            add
            {
                HookHandler._afterPress_tk2dUITouch_tk2dUIItem += value;
                HookHandler.HookPress_tk2dUITouch_tk2dUIItem();
            }
            remove => HookHandler._afterPress_tk2dUITouch_tk2dUIItem -= value;
        }

        public static event Delegates.UpdateTouch_AfterArgs UpdateTouch
        {
            add
            {
                HookHandler._afterUpdateTouch += value;
                HookHandler.HookUpdateTouch();
            }
            remove => HookHandler._afterUpdateTouch -= value;
        }

        public static event Delegates.DoSendMessage_AfterArgs DoSendMessage
        {
            add
            {
                HookHandler._afterDoSendMessage += value;
                HookHandler.HookDoSendMessage();
            }
            remove => HookHandler._afterDoSendMessage -= value;
        }

        public static event Delegates.Release_AfterArgs Release
        {
            add
            {
                HookHandler._afterRelease += value;
                HookHandler.HookRelease();
            }
            remove => HookHandler._afterRelease -= value;
        }

        public static event Delegates.CurrentOverUIItem_AfterArgs CurrentOverUIItem
        {
            add
            {
                HookHandler._afterCurrentOverUIItem += value;
                HookHandler.HookCurrentOverUIItem();
            }
            remove => HookHandler._afterCurrentOverUIItem -= value;
        }

        public static event Delegates.CheckIsUIItemChildOfMe_AfterArgs CheckIsUIItemChildOfMe
        {
            add
            {
                HookHandler._afterCheckIsUIItemChildOfMe += value;
                HookHandler.HookCheckIsUIItemChildOfMe();
            }
            remove => HookHandler._afterCheckIsUIItemChildOfMe -= value;
        }

        public static event Delegates.Exit_AfterArgs Exit
        {
            add
            {
                HookHandler._afterExit += value;
                HookHandler.HookExit();
            }
            remove => HookHandler._afterExit -= value;
        }

        public static event Delegates.HoverOver_AfterArgs HoverOver
        {
            add
            {
                HookHandler._afterHoverOver += value;
                HookHandler.HookHoverOver();
            }
            remove => HookHandler._afterHoverOver -= value;
        }

        public static event Delegates.HoverOut_AfterArgs HoverOut
        {
            add
            {
                HookHandler._afterHoverOut += value;
                HookHandler.HookHoverOut();
            }
            remove => HookHandler._afterHoverOut -= value;
        }

        public static event Delegates.GetParentUIItem_AfterArgs GetParentUIItem
        {
            add
            {
                HookHandler._afterGetParentUIItem += value;
                HookHandler.HookGetParentUIItem();
            }
            remove => HookHandler._afterGetParentUIItem -= value;
        }

        public static event Delegates.SimulateClick_AfterArgs SimulateClick
        {
            add
            {
                HookHandler._afterSimulateClick += value;
                HookHandler.HookSimulateClick();
            }
            remove => HookHandler._afterSimulateClick -= value;
        }

        public static event Delegates.InternalSetIsChildOfAnotherUIItem_AfterArgs InternalSetIsChildOfAnotherUIItem
        {
            add
            {
                HookHandler._afterInternalSetIsChildOfAnotherUIItem += value;
                HookHandler.HookInternalSetIsChildOfAnotherUIItem();
            }
            remove => HookHandler._afterInternalSetIsChildOfAnotherUIItem -= value;
        }

        public static event Delegates.InternalGetIsChildOfAnotherUIItem_AfterArgs InternalGetIsChildOfAnotherUIItem
        {
            add
            {
                HookHandler._afterInternalGetIsChildOfAnotherUIItem += value;
                HookHandler.HookInternalGetIsChildOfAnotherUIItem();
            }
            remove => HookHandler._afterInternalGetIsChildOfAnotherUIItem -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dUIItem.hook_Awake Awake
        {
            add => On.tk2dUIItem.Awake += value;
            remove => On.tk2dUIItem.Awake -= value;
        }

        public static event On.tk2dUIItem.hook_Start Start
        {
            add => On.tk2dUIItem.Start += value;
            remove => On.tk2dUIItem.Start -= value;
        }

        public static event Delegates.get_IsPressed_WithArgs get_IsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_IsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_IsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_IsPressed"), value);
        }

        public static event Delegates.get_Touch_WithArgs get_Touch
        {
            add => HookEndpointManager.Add<Delegates.get_Touch_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_Touch"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Touch_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_Touch"), value);
        }

        public static event Delegates.get_ParentUIItem_WithArgs get_ParentUIItem
        {
            add => HookEndpointManager.Add<Delegates.get_ParentUIItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_ParentUIItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ParentUIItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIItem), "get_ParentUIItem"), value);
        }

        public static event On.tk2dUIItem.hook_UpdateParent UpdateParent
        {
            add => On.tk2dUIItem.UpdateParent += value;
            remove => On.tk2dUIItem.UpdateParent -= value;
        }

        public static event On.tk2dUIItem.hook_ManuallySetParent ManuallySetParent
        {
            add => On.tk2dUIItem.ManuallySetParent += value;
            remove => On.tk2dUIItem.ManuallySetParent -= value;
        }

        public static event On.tk2dUIItem.hook_RemoveParent RemoveParent
        {
            add => On.tk2dUIItem.RemoveParent += value;
            remove => On.tk2dUIItem.RemoveParent -= value;
        }

        public static event On.tk2dUIItem.hook_Press_tk2dUITouch Press_tk2dUITouch
        {
            add => On.tk2dUIItem.Press_tk2dUITouch += value;
            remove => On.tk2dUIItem.Press_tk2dUITouch -= value;
        }

        public static event On.tk2dUIItem.hook_Press_tk2dUITouch_tk2dUIItem Press_tk2dUITouch_tk2dUIItem
        {
            add => On.tk2dUIItem.Press_tk2dUITouch_tk2dUIItem += value;
            remove => On.tk2dUIItem.Press_tk2dUITouch_tk2dUIItem -= value;
        }

        public static event On.tk2dUIItem.hook_UpdateTouch UpdateTouch
        {
            add => On.tk2dUIItem.UpdateTouch += value;
            remove => On.tk2dUIItem.UpdateTouch -= value;
        }

        public static event On.tk2dUIItem.hook_DoSendMessage DoSendMessage
        {
            add => On.tk2dUIItem.DoSendMessage += value;
            remove => On.tk2dUIItem.DoSendMessage -= value;
        }

        public static event On.tk2dUIItem.hook_Release Release
        {
            add => On.tk2dUIItem.Release += value;
            remove => On.tk2dUIItem.Release -= value;
        }

        public static event On.tk2dUIItem.hook_CurrentOverUIItem CurrentOverUIItem
        {
            add => On.tk2dUIItem.CurrentOverUIItem += value;
            remove => On.tk2dUIItem.CurrentOverUIItem -= value;
        }

        public static event On.tk2dUIItem.hook_CheckIsUIItemChildOfMe CheckIsUIItemChildOfMe
        {
            add => On.tk2dUIItem.CheckIsUIItemChildOfMe += value;
            remove => On.tk2dUIItem.CheckIsUIItemChildOfMe -= value;
        }

        public static event On.tk2dUIItem.hook_Exit Exit
        {
            add => On.tk2dUIItem.Exit += value;
            remove => On.tk2dUIItem.Exit -= value;
        }

        public static event On.tk2dUIItem.hook_HoverOver HoverOver
        {
            add => On.tk2dUIItem.HoverOver += value;
            remove => On.tk2dUIItem.HoverOver -= value;
        }

        public static event On.tk2dUIItem.hook_HoverOut HoverOut
        {
            add => On.tk2dUIItem.HoverOut += value;
            remove => On.tk2dUIItem.HoverOut -= value;
        }

        public static event On.tk2dUIItem.hook_GetParentUIItem GetParentUIItem
        {
            add => On.tk2dUIItem.GetParentUIItem += value;
            remove => On.tk2dUIItem.GetParentUIItem -= value;
        }

        public static event On.tk2dUIItem.hook_SimulateClick SimulateClick
        {
            add => On.tk2dUIItem.SimulateClick += value;
            remove => On.tk2dUIItem.SimulateClick -= value;
        }

        public static event On.tk2dUIItem.hook_InternalSetIsChildOfAnotherUIItem InternalSetIsChildOfAnotherUIItem
        {
            add => On.tk2dUIItem.InternalSetIsChildOfAnotherUIItem += value;
            remove => On.tk2dUIItem.InternalSetIsChildOfAnotherUIItem -= value;
        }

        public static event On.tk2dUIItem.hook_InternalGetIsChildOfAnotherUIItem InternalGetIsChildOfAnotherUIItem
        {
            add => On.tk2dUIItem.InternalGetIsChildOfAnotherUIItem += value;
            remove => On.tk2dUIItem.InternalGetIsChildOfAnotherUIItem -= value;
        }
    }
}