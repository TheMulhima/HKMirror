using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_FontAsset class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_FontAsset
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_defaultFontAsset()
        {
            if (!HookedList.Contains("get_defaultFontAsset"))
            {
                HookedList.Add("get_defaultFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_defaultFontAsset", false),
                    get_defaultFontAsset);
            }
        }

        internal static event Delegates.get_defaultFontAsset_BeforeArgs _beforeget_defaultFontAsset;
        internal static event Delegates.get_defaultFontAsset_NormalArgs _afterget_defaultFontAsset;

        private static TMP_FontAsset get_defaultFontAsset(Func<TMP_FontAsset> orig)
        {
            _beforeget_defaultFontAsset?.Invoke();
            var retVal = orig();
            if (_afterget_defaultFontAsset != null) retVal = _afterget_defaultFontAsset.Invoke();
            return retVal;
        }

        internal static void Hookget_fontInfo()
        {
            if (!HookedList.Contains("get_fontInfo"))
            {
                HookedList.Add("get_fontInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_fontInfo"), get_fontInfo);
            }
        }

        internal static event Delegates.get_fontInfo_BeforeArgs _beforeget_fontInfo;
        internal static event Delegates.get_fontInfo_NormalArgs _afterget_fontInfo;

        private static FaceInfo get_fontInfo(Func<TMP_FontAsset, FaceInfo> orig, TMP_FontAsset self)
        {
            Delegates.Params_get_fontInfo @params = new()
            {
                self = self
            };
            _beforeget_fontInfo?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontInfo != null) retVal = _afterget_fontInfo.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_characterDictionary()
        {
            if (!HookedList.Contains("get_characterDictionary"))
            {
                HookedList.Add("get_characterDictionary");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_characterDictionary"),
                    get_characterDictionary);
            }
        }

        internal static event Delegates.get_characterDictionary_BeforeArgs _beforeget_characterDictionary;
        internal static event Delegates.get_characterDictionary_NormalArgs _afterget_characterDictionary;

        private static Dictionary<int, TMP_Glyph> get_characterDictionary(
            Func<TMP_FontAsset, Dictionary<int, TMP_Glyph>> orig, TMP_FontAsset self)
        {
            Delegates.Params_get_characterDictionary @params = new()
            {
                self = self
            };
            _beforeget_characterDictionary?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_characterDictionary != null) retVal = _afterget_characterDictionary.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_kerningDictionary()
        {
            if (!HookedList.Contains("get_kerningDictionary"))
            {
                HookedList.Add("get_kerningDictionary");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_kerningDictionary"),
                    get_kerningDictionary);
            }
        }

        internal static event Delegates.get_kerningDictionary_BeforeArgs _beforeget_kerningDictionary;
        internal static event Delegates.get_kerningDictionary_NormalArgs _afterget_kerningDictionary;

        private static Dictionary<int, KerningPair> get_kerningDictionary(
            Func<TMP_FontAsset, Dictionary<int, KerningPair>> orig, TMP_FontAsset self)
        {
            Delegates.Params_get_kerningDictionary @params = new()
            {
                self = self
            };
            _beforeget_kerningDictionary?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_kerningDictionary != null) retVal = _afterget_kerningDictionary.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_kerningInfo()
        {
            if (!HookedList.Contains("get_kerningInfo"))
            {
                HookedList.Add("get_kerningInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_kerningInfo"), get_kerningInfo);
            }
        }

        internal static event Delegates.get_kerningInfo_BeforeArgs _beforeget_kerningInfo;
        internal static event Delegates.get_kerningInfo_NormalArgs _afterget_kerningInfo;

        private static KerningTable get_kerningInfo(Func<TMP_FontAsset, KerningTable> orig, TMP_FontAsset self)
        {
            Delegates.Params_get_kerningInfo @params = new()
            {
                self = self
            };
            _beforeget_kerningInfo?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_kerningInfo != null) retVal = _afterget_kerningInfo.Invoke(@params);
            return retVal;
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<TMP_FontAsset> orig, TMP_FontAsset self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<TMP_FontAsset> orig, TMP_FontAsset self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookAddFaceInfo()
        {
            if (!HookedList.Contains("AddFaceInfo"))
            {
                HookedList.Add("AddFaceInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddFaceInfo"), AddFaceInfo);
            }
        }

        internal static event Delegates.AddFaceInfo_BeforeArgs _beforeAddFaceInfo;
        internal static event Delegates.AddFaceInfo_NormalArgs _afterAddFaceInfo;

        private static void AddFaceInfo(Action<TMP_FontAsset, FaceInfo> orig, TMP_FontAsset self, FaceInfo faceInfo)
        {
            Delegates.Params_AddFaceInfo @params = new()
            {
                self = self, faceInfo = faceInfo
            };
            _beforeAddFaceInfo?.Invoke(@params);
            self = @params.self;
            faceInfo = @params.faceInfo;
            orig(self, faceInfo);
            if (_afterAddFaceInfo != null) _afterAddFaceInfo.Invoke(@params);
        }

        internal static void HookAddGlyphInfo()
        {
            if (!HookedList.Contains("AddGlyphInfo"))
            {
                HookedList.Add("AddGlyphInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddGlyphInfo"), AddGlyphInfo);
            }
        }

        internal static event Delegates.AddGlyphInfo_BeforeArgs _beforeAddGlyphInfo;
        internal static event Delegates.AddGlyphInfo_NormalArgs _afterAddGlyphInfo;

        private static void AddGlyphInfo(Action<TMP_FontAsset, TMP_Glyph[]> orig, TMP_FontAsset self,
            TMP_Glyph[] glyphInfo)
        {
            Delegates.Params_AddGlyphInfo @params = new()
            {
                self = self, glyphInfo = glyphInfo
            };
            _beforeAddGlyphInfo?.Invoke(@params);
            self = @params.self;
            glyphInfo = @params.glyphInfo;
            orig(self, glyphInfo);
            if (_afterAddGlyphInfo != null) _afterAddGlyphInfo.Invoke(@params);
        }

        internal static void HookAddKerningInfo()
        {
            if (!HookedList.Contains("AddKerningInfo"))
            {
                HookedList.Add("AddKerningInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddKerningInfo"), AddKerningInfo);
            }
        }

        internal static event Delegates.AddKerningInfo_BeforeArgs _beforeAddKerningInfo;
        internal static event Delegates.AddKerningInfo_NormalArgs _afterAddKerningInfo;

        private static void AddKerningInfo(Action<TMP_FontAsset, KerningTable> orig, TMP_FontAsset self,
            KerningTable kerningTable)
        {
            Delegates.Params_AddKerningInfo @params = new()
            {
                self = self, kerningTable = kerningTable
            };
            _beforeAddKerningInfo?.Invoke(@params);
            self = @params.self;
            kerningTable = @params.kerningTable;
            orig(self, kerningTable);
            if (_afterAddKerningInfo != null) _afterAddKerningInfo.Invoke(@params);
        }

        internal static void HookReadFontDefinition()
        {
            if (!HookedList.Contains("ReadFontDefinition"))
            {
                HookedList.Add("ReadFontDefinition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "ReadFontDefinition"),
                    ReadFontDefinition);
            }
        }

        internal static event Delegates.ReadFontDefinition_BeforeArgs _beforeReadFontDefinition;
        internal static event Delegates.ReadFontDefinition_NormalArgs _afterReadFontDefinition;

        private static void ReadFontDefinition(Action<TMP_FontAsset> orig, TMP_FontAsset self)
        {
            Delegates.Params_ReadFontDefinition @params = new()
            {
                self = self
            };
            _beforeReadFontDefinition?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReadFontDefinition != null) _afterReadFontDefinition.Invoke(@params);
        }

        internal static void HookHasCharacter_int()
        {
            if (!HookedList.Contains("HasCharacter_int"))
            {
                HookedList.Add("HasCharacter_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter_int"), HasCharacter_int);
            }
        }

        internal static event Delegates.HasCharacter_int_BeforeArgs _beforeHasCharacter_int;
        internal static event Delegates.HasCharacter_int_NormalArgs _afterHasCharacter_int;

        private static bool HasCharacter_int(Func<TMP_FontAsset, int, bool> orig, TMP_FontAsset self, int character)
        {
            Delegates.Params_HasCharacter_int @params = new()
            {
                self = self, character = character
            };
            _beforeHasCharacter_int?.Invoke(@params);
            self = @params.self;
            character = @params.character;
            var retVal = orig(self, character);
            if (_afterHasCharacter_int != null) retVal = _afterHasCharacter_int.Invoke(@params);
            return retVal;
        }

        internal static void HookHasCharacter_Char()
        {
            if (!HookedList.Contains("HasCharacter_Char"))
            {
                HookedList.Add("HasCharacter_Char");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter_Char"), HasCharacter_Char);
            }
        }

        internal static event Delegates.HasCharacter_Char_BeforeArgs _beforeHasCharacter_Char;
        internal static event Delegates.HasCharacter_Char_NormalArgs _afterHasCharacter_Char;

        private static bool HasCharacter_Char(Func<TMP_FontAsset, char, bool> orig, TMP_FontAsset self, char character)
        {
            Delegates.Params_HasCharacter_Char @params = new()
            {
                self = self, character = character
            };
            _beforeHasCharacter_Char?.Invoke(@params);
            self = @params.self;
            character = @params.character;
            var retVal = orig(self, character);
            if (_afterHasCharacter_Char != null) retVal = _afterHasCharacter_Char.Invoke(@params);
            return retVal;
        }

        internal static void HookHasCharacter_Char_bool()
        {
            if (!HookedList.Contains("HasCharacter_Char_bool"))
            {
                HookedList.Add("HasCharacter_Char_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter_Char_bool"),
                    HasCharacter_Char_bool);
            }
        }

        internal static event Delegates.HasCharacter_Char_bool_BeforeArgs _beforeHasCharacter_Char_bool;
        internal static event Delegates.HasCharacter_Char_bool_NormalArgs _afterHasCharacter_Char_bool;

        private static bool HasCharacter_Char_bool(Func<TMP_FontAsset, char, bool, bool> orig, TMP_FontAsset self,
            char character, bool searchFallbacks)
        {
            Delegates.Params_HasCharacter_Char_bool @params = new()
            {
                self = self, character = character, searchFallbacks = searchFallbacks
            };
            _beforeHasCharacter_Char_bool?.Invoke(@params);
            self = @params.self;
            character = @params.character;
            searchFallbacks = @params.searchFallbacks;
            var retVal = orig(self, character, searchFallbacks);
            if (_afterHasCharacter_Char_bool != null) retVal = _afterHasCharacter_Char_bool.Invoke(@params);
            return retVal;
        }

        internal static void HookHasCharacters()
        {
            if (!HookedList.Contains("HasCharacters"))
            {
                HookedList.Add("HasCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacters"), HasCharacters);
            }
        }

        internal static event Delegates.HasCharacters_BeforeArgs _beforeHasCharacters;
        internal static event Delegates.HasCharacters_NormalArgs _afterHasCharacters;

        private static bool HasCharacters(Func<TMP_FontAsset, string, List<char>, bool> orig, TMP_FontAsset self,
            string text, List<char> missingCharacters)
        {
            Delegates.Params_HasCharacters @params = new()
            {
                self = self, text = text, missingCharacters = missingCharacters
            };
            _beforeHasCharacters?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            missingCharacters = @params.missingCharacters;
            var retVal = orig(self, text, missingCharacters);
            if (_afterHasCharacters != null) retVal = _afterHasCharacters.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCharacters()
        {
            if (!HookedList.Contains("GetCharacters"))
            {
                HookedList.Add("GetCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "GetCharacters", false), GetCharacters);
            }
        }

        internal static event Delegates.GetCharacters_BeforeArgs _beforeGetCharacters;
        internal static event Delegates.GetCharacters_NormalArgs _afterGetCharacters;

        private static string GetCharacters(Func<TMP_FontAsset, string> orig, TMP_FontAsset fontAsset)
        {
            Delegates.Params_GetCharacters @params = new()
            {
                fontAsset = fontAsset
            };
            _beforeGetCharacters?.Invoke(@params);
            fontAsset = @params.fontAsset;
            var retVal = orig(fontAsset);
            if (_afterGetCharacters != null) retVal = _afterGetCharacters.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCharactersArray()
        {
            if (!HookedList.Contains("GetCharactersArray"))
            {
                HookedList.Add("GetCharactersArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "GetCharactersArray", false),
                    GetCharactersArray);
            }
        }

        internal static event Delegates.GetCharactersArray_BeforeArgs _beforeGetCharactersArray;
        internal static event Delegates.GetCharactersArray_NormalArgs _afterGetCharactersArray;

        private static int[] GetCharactersArray(Func<TMP_FontAsset, int[]> orig, TMP_FontAsset fontAsset)
        {
            Delegates.Params_GetCharactersArray @params = new()
            {
                fontAsset = fontAsset
            };
            _beforeGetCharactersArray?.Invoke(@params);
            fontAsset = @params.fontAsset;
            var retVal = orig(fontAsset);
            if (_afterGetCharactersArray != null) retVal = _afterGetCharactersArray.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddFaceInfo_BeforeArgs(Params_AddFaceInfo args);

        public delegate void AddFaceInfo_NormalArgs(Params_AddFaceInfo args);

        public delegate void AddGlyphInfo_BeforeArgs(Params_AddGlyphInfo args);

        public delegate void AddGlyphInfo_NormalArgs(Params_AddGlyphInfo args);

        public delegate void AddKerningInfo_BeforeArgs(Params_AddKerningInfo args);

        public delegate void AddKerningInfo_NormalArgs(Params_AddKerningInfo args);

        public delegate void get_characterDictionary_BeforeArgs(Params_get_characterDictionary args);

        public delegate Dictionary<int, TMP_Glyph> get_characterDictionary_NormalArgs(
            Params_get_characterDictionary args);

        public delegate void get_defaultFontAsset_BeforeArgs();

        public delegate TMP_FontAsset get_defaultFontAsset_NormalArgs();

        public delegate void get_fontInfo_BeforeArgs(Params_get_fontInfo args);

        public delegate FaceInfo get_fontInfo_NormalArgs(Params_get_fontInfo args);

        public delegate void get_kerningDictionary_BeforeArgs(Params_get_kerningDictionary args);

        public delegate Dictionary<int, KerningPair>
            get_kerningDictionary_NormalArgs(Params_get_kerningDictionary args);

        public delegate void get_kerningInfo_BeforeArgs(Params_get_kerningInfo args);

        public delegate KerningTable get_kerningInfo_NormalArgs(Params_get_kerningInfo args);

        public delegate void GetCharacters_BeforeArgs(Params_GetCharacters args);

        public delegate string GetCharacters_NormalArgs(Params_GetCharacters args);

        public delegate void GetCharactersArray_BeforeArgs(Params_GetCharactersArray args);

        public delegate int[] GetCharactersArray_NormalArgs(Params_GetCharactersArray args);

        public delegate void HasCharacter_Char_BeforeArgs(Params_HasCharacter_Char args);

        public delegate void HasCharacter_Char_bool_BeforeArgs(Params_HasCharacter_Char_bool args);

        public delegate bool HasCharacter_Char_bool_NormalArgs(Params_HasCharacter_Char_bool args);

        public delegate bool HasCharacter_Char_NormalArgs(Params_HasCharacter_Char args);

        public delegate void HasCharacter_int_BeforeArgs(Params_HasCharacter_int args);

        public delegate bool HasCharacter_int_NormalArgs(Params_HasCharacter_int args);

        public delegate void HasCharacters_BeforeArgs(Params_HasCharacters args);

        public delegate bool HasCharacters_NormalArgs(Params_HasCharacters args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void ReadFontDefinition_BeforeArgs(Params_ReadFontDefinition args);

        public delegate void ReadFontDefinition_NormalArgs(Params_ReadFontDefinition args);

        public sealed class Params_get_fontInfo
        {
            public TMP_FontAsset self;
        }

        public sealed class Params_get_characterDictionary
        {
            public TMP_FontAsset self;
        }

        public sealed class Params_get_kerningDictionary
        {
            public TMP_FontAsset self;
        }

        public sealed class Params_get_kerningInfo
        {
            public TMP_FontAsset self;
        }

        public sealed class Params_OnEnable
        {
            public TMP_FontAsset self;
        }

        public sealed class Params_OnDisable
        {
            public TMP_FontAsset self;
        }

        public sealed class Params_AddFaceInfo
        {
            public FaceInfo faceInfo;
            public TMP_FontAsset self;
        }

        public sealed class Params_AddGlyphInfo
        {
            public TMP_Glyph[] glyphInfo;
            public TMP_FontAsset self;
        }

        public sealed class Params_AddKerningInfo
        {
            public KerningTable kerningTable;
            public TMP_FontAsset self;
        }

        public sealed class Params_ReadFontDefinition
        {
            public TMP_FontAsset self;
        }

        public sealed class Params_HasCharacter_int
        {
            public int character;
            public TMP_FontAsset self;
        }

        public sealed class Params_HasCharacter_Char
        {
            public char character;
            public TMP_FontAsset self;
        }

        public sealed class Params_HasCharacter_Char_bool
        {
            public char character;
            public bool searchFallbacks;
            public TMP_FontAsset self;
        }

        public sealed class Params_HasCharacters
        {
            public List<char> missingCharacters;
            public TMP_FontAsset self;
            public string text;
        }

        public sealed class Params_GetCharacters
        {
            public TMP_FontAsset fontAsset;
        }

        public sealed class Params_GetCharactersArray
        {
            public TMP_FontAsset fontAsset;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_defaultFontAsset_BeforeArgs get_defaultFontAsset
        {
            add
            {
                HookHandler._beforeget_defaultFontAsset += value;
                HookHandler.Hookget_defaultFontAsset();
            }
            remove => HookHandler._beforeget_defaultFontAsset -= value;
        }

        public static event Delegates.get_fontInfo_BeforeArgs get_fontInfo
        {
            add
            {
                HookHandler._beforeget_fontInfo += value;
                HookHandler.Hookget_fontInfo();
            }
            remove => HookHandler._beforeget_fontInfo -= value;
        }

        public static event Delegates.get_characterDictionary_BeforeArgs get_characterDictionary
        {
            add
            {
                HookHandler._beforeget_characterDictionary += value;
                HookHandler.Hookget_characterDictionary();
            }
            remove => HookHandler._beforeget_characterDictionary -= value;
        }

        public static event Delegates.get_kerningDictionary_BeforeArgs get_kerningDictionary
        {
            add
            {
                HookHandler._beforeget_kerningDictionary += value;
                HookHandler.Hookget_kerningDictionary();
            }
            remove => HookHandler._beforeget_kerningDictionary -= value;
        }

        public static event Delegates.get_kerningInfo_BeforeArgs get_kerningInfo
        {
            add
            {
                HookHandler._beforeget_kerningInfo += value;
                HookHandler.Hookget_kerningInfo();
            }
            remove => HookHandler._beforeget_kerningInfo -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.AddFaceInfo_BeforeArgs AddFaceInfo
        {
            add
            {
                HookHandler._beforeAddFaceInfo += value;
                HookHandler.HookAddFaceInfo();
            }
            remove => HookHandler._beforeAddFaceInfo -= value;
        }

        public static event Delegates.AddGlyphInfo_BeforeArgs AddGlyphInfo
        {
            add
            {
                HookHandler._beforeAddGlyphInfo += value;
                HookHandler.HookAddGlyphInfo();
            }
            remove => HookHandler._beforeAddGlyphInfo -= value;
        }

        public static event Delegates.AddKerningInfo_BeforeArgs AddKerningInfo
        {
            add
            {
                HookHandler._beforeAddKerningInfo += value;
                HookHandler.HookAddKerningInfo();
            }
            remove => HookHandler._beforeAddKerningInfo -= value;
        }

        public static event Delegates.ReadFontDefinition_BeforeArgs ReadFontDefinition
        {
            add
            {
                HookHandler._beforeReadFontDefinition += value;
                HookHandler.HookReadFontDefinition();
            }
            remove => HookHandler._beforeReadFontDefinition -= value;
        }

        public static event Delegates.HasCharacter_int_BeforeArgs HasCharacter_int
        {
            add
            {
                HookHandler._beforeHasCharacter_int += value;
                HookHandler.HookHasCharacter_int();
            }
            remove => HookHandler._beforeHasCharacter_int -= value;
        }

        public static event Delegates.HasCharacter_Char_BeforeArgs HasCharacter_Char
        {
            add
            {
                HookHandler._beforeHasCharacter_Char += value;
                HookHandler.HookHasCharacter_Char();
            }
            remove => HookHandler._beforeHasCharacter_Char -= value;
        }

        public static event Delegates.HasCharacter_Char_bool_BeforeArgs HasCharacter_Char_bool
        {
            add
            {
                HookHandler._beforeHasCharacter_Char_bool += value;
                HookHandler.HookHasCharacter_Char_bool();
            }
            remove => HookHandler._beforeHasCharacter_Char_bool -= value;
        }

        public static event Delegates.HasCharacters_BeforeArgs HasCharacters
        {
            add
            {
                HookHandler._beforeHasCharacters += value;
                HookHandler.HookHasCharacters();
            }
            remove => HookHandler._beforeHasCharacters -= value;
        }

        public static event Delegates.GetCharacters_BeforeArgs GetCharacters
        {
            add
            {
                HookHandler._beforeGetCharacters += value;
                HookHandler.HookGetCharacters();
            }
            remove => HookHandler._beforeGetCharacters -= value;
        }

        public static event Delegates.GetCharactersArray_BeforeArgs GetCharactersArray
        {
            add
            {
                HookHandler._beforeGetCharactersArray += value;
                HookHandler.HookGetCharactersArray();
            }
            remove => HookHandler._beforeGetCharactersArray -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_defaultFontAsset_NormalArgs get_defaultFontAsset
        {
            add
            {
                HookHandler._afterget_defaultFontAsset += value;
                HookHandler.Hookget_defaultFontAsset();
            }
            remove => HookHandler._afterget_defaultFontAsset -= value;
        }

        public static event Delegates.get_fontInfo_NormalArgs get_fontInfo
        {
            add
            {
                HookHandler._afterget_fontInfo += value;
                HookHandler.Hookget_fontInfo();
            }
            remove => HookHandler._afterget_fontInfo -= value;
        }

        public static event Delegates.get_characterDictionary_NormalArgs get_characterDictionary
        {
            add
            {
                HookHandler._afterget_characterDictionary += value;
                HookHandler.Hookget_characterDictionary();
            }
            remove => HookHandler._afterget_characterDictionary -= value;
        }

        public static event Delegates.get_kerningDictionary_NormalArgs get_kerningDictionary
        {
            add
            {
                HookHandler._afterget_kerningDictionary += value;
                HookHandler.Hookget_kerningDictionary();
            }
            remove => HookHandler._afterget_kerningDictionary -= value;
        }

        public static event Delegates.get_kerningInfo_NormalArgs get_kerningInfo
        {
            add
            {
                HookHandler._afterget_kerningInfo += value;
                HookHandler.Hookget_kerningInfo();
            }
            remove => HookHandler._afterget_kerningInfo -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.AddFaceInfo_NormalArgs AddFaceInfo
        {
            add
            {
                HookHandler._afterAddFaceInfo += value;
                HookHandler.HookAddFaceInfo();
            }
            remove => HookHandler._afterAddFaceInfo -= value;
        }

        public static event Delegates.AddGlyphInfo_NormalArgs AddGlyphInfo
        {
            add
            {
                HookHandler._afterAddGlyphInfo += value;
                HookHandler.HookAddGlyphInfo();
            }
            remove => HookHandler._afterAddGlyphInfo -= value;
        }

        public static event Delegates.AddKerningInfo_NormalArgs AddKerningInfo
        {
            add
            {
                HookHandler._afterAddKerningInfo += value;
                HookHandler.HookAddKerningInfo();
            }
            remove => HookHandler._afterAddKerningInfo -= value;
        }

        public static event Delegates.ReadFontDefinition_NormalArgs ReadFontDefinition
        {
            add
            {
                HookHandler._afterReadFontDefinition += value;
                HookHandler.HookReadFontDefinition();
            }
            remove => HookHandler._afterReadFontDefinition -= value;
        }

        public static event Delegates.HasCharacter_int_NormalArgs HasCharacter_int
        {
            add
            {
                HookHandler._afterHasCharacter_int += value;
                HookHandler.HookHasCharacter_int();
            }
            remove => HookHandler._afterHasCharacter_int -= value;
        }

        public static event Delegates.HasCharacter_Char_NormalArgs HasCharacter_Char
        {
            add
            {
                HookHandler._afterHasCharacter_Char += value;
                HookHandler.HookHasCharacter_Char();
            }
            remove => HookHandler._afterHasCharacter_Char -= value;
        }

        public static event Delegates.HasCharacter_Char_bool_NormalArgs HasCharacter_Char_bool
        {
            add
            {
                HookHandler._afterHasCharacter_Char_bool += value;
                HookHandler.HookHasCharacter_Char_bool();
            }
            remove => HookHandler._afterHasCharacter_Char_bool -= value;
        }

        public static event Delegates.HasCharacters_NormalArgs HasCharacters
        {
            add
            {
                HookHandler._afterHasCharacters += value;
                HookHandler.HookHasCharacters();
            }
            remove => HookHandler._afterHasCharacters -= value;
        }

        public static event Delegates.GetCharacters_NormalArgs GetCharacters
        {
            add
            {
                HookHandler._afterGetCharacters += value;
                HookHandler.HookGetCharacters();
            }
            remove => HookHandler._afterGetCharacters -= value;
        }

        public static event Delegates.GetCharactersArray_NormalArgs GetCharactersArray
        {
            add
            {
                HookHandler._afterGetCharactersArray += value;
                HookHandler.HookGetCharactersArray();
            }
            remove => HookHandler._afterGetCharactersArray -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_defaultFontAsset_NormalArgs get_defaultFontAsset
        {
            add => HookEndpointManager.Add<Delegates.get_defaultFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_defaultFontAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_defaultFontAsset", false), value);
        }

        public static event Delegates.get_fontInfo_NormalArgs get_fontInfo
        {
            add => HookEndpointManager.Add<Delegates.get_fontInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_fontInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_fontInfo"), value);
        }

        public static event Delegates.get_characterDictionary_NormalArgs get_characterDictionary
        {
            add => HookEndpointManager.Add<Delegates.get_characterDictionary_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_characterDictionary"), value);
            remove => HookEndpointManager.Remove<Delegates.get_characterDictionary_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_characterDictionary"), value);
        }

        public static event Delegates.get_kerningDictionary_NormalArgs get_kerningDictionary
        {
            add => HookEndpointManager.Add<Delegates.get_kerningDictionary_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_kerningDictionary"), value);
            remove => HookEndpointManager.Remove<Delegates.get_kerningDictionary_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_kerningDictionary"), value);
        }

        public static event Delegates.get_kerningInfo_NormalArgs get_kerningInfo
        {
            add => HookEndpointManager.Add<Delegates.get_kerningInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_kerningInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.get_kerningInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "get_kerningInfo"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "OnDisable"), value);
        }

        public static event Delegates.AddFaceInfo_NormalArgs AddFaceInfo
        {
            add => HookEndpointManager.Add<Delegates.AddFaceInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddFaceInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.AddFaceInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddFaceInfo"), value);
        }

        public static event Delegates.AddGlyphInfo_NormalArgs AddGlyphInfo
        {
            add => HookEndpointManager.Add<Delegates.AddGlyphInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddGlyphInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.AddGlyphInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddGlyphInfo"), value);
        }

        public static event Delegates.AddKerningInfo_NormalArgs AddKerningInfo
        {
            add => HookEndpointManager.Add<Delegates.AddKerningInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddKerningInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.AddKerningInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "AddKerningInfo"), value);
        }

        public static event Delegates.ReadFontDefinition_NormalArgs ReadFontDefinition
        {
            add => HookEndpointManager.Add<Delegates.ReadFontDefinition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "ReadFontDefinition"), value);
            remove => HookEndpointManager.Remove<Delegates.ReadFontDefinition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "ReadFontDefinition"), value);
        }

        public static event Delegates.HasCharacter_int_NormalArgs HasCharacter_int
        {
            add => HookEndpointManager.Add<Delegates.HasCharacter_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter"), value);
            remove => HookEndpointManager.Remove<Delegates.HasCharacter_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter"), value);
        }

        public static event Delegates.HasCharacter_Char_NormalArgs HasCharacter_Char
        {
            add => HookEndpointManager.Add<Delegates.HasCharacter_Char_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter"), value);
            remove => HookEndpointManager.Remove<Delegates.HasCharacter_Char_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter"), value);
        }

        public static event Delegates.HasCharacter_Char_bool_NormalArgs HasCharacter_Char_bool
        {
            add => HookEndpointManager.Add<Delegates.HasCharacter_Char_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter"), value);
            remove => HookEndpointManager.Remove<Delegates.HasCharacter_Char_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacter"), value);
        }

        public static event Delegates.HasCharacters_NormalArgs HasCharacters
        {
            add => HookEndpointManager.Add<Delegates.HasCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacters"), value);
            remove => HookEndpointManager.Remove<Delegates.HasCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "HasCharacters"), value);
        }

        public static event Delegates.GetCharacters_NormalArgs GetCharacters
        {
            add => HookEndpointManager.Add<Delegates.GetCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "GetCharacters", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "GetCharacters", false), value);
        }

        public static event Delegates.GetCharactersArray_NormalArgs GetCharactersArray
        {
            add => HookEndpointManager.Add<Delegates.GetCharactersArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "GetCharactersArray", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetCharactersArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_FontAsset), "GetCharactersArray", false), value);
        }
    }
}