using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TransitionPoint class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTransitionPoint
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_TransitionPoints()
        {
            if (!HookedList.Contains("get_TransitionPoints"))
            {
                HookedList.Add("get_TransitionPoints");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TransitionPoint), "get_TransitionPoints", false),
                    get_TransitionPoints);
            }
        }

        internal static event Delegates.get_TransitionPoints_BeforeArgs _beforeget_TransitionPoints;
        internal static event Delegates.get_TransitionPoints_NormalArgs _afterget_TransitionPoints;

        private static List<TransitionPoint> get_TransitionPoints(Func<List<TransitionPoint>> orig)
        {
            _beforeget_TransitionPoints?.Invoke();
            var retVal = orig();
            if (_afterget_TransitionPoints != null) retVal = _afterget_TransitionPoints.Invoke();
            return retVal;
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.TransitionPoint.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_NormalArgs _afterInit;

        private static void Init(On.TransitionPoint.orig_Init orig)
        {
            _beforeInit?.Invoke();
            orig();
            if (_afterInit != null) _afterInit.Invoke();
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.TransitionPoint.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.TransitionPoint.orig_Awake orig, TransitionPoint self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.TransitionPoint.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.TransitionPoint.orig_OnDestroy orig, TransitionPoint self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.TransitionPoint.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.TransitionPoint.orig_Start orig, TransitionPoint self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.TransitionPoint.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.TransitionPoint.orig_OnTriggerEnter2D orig, TransitionPoint self,
            Collider2D movingObj)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, movingObj = movingObj
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            movingObj = @params.movingObj;
            orig(self, movingObj);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookOnTriggerStay2D()
        {
            if (!HookedList.Contains("OnTriggerStay2D"))
            {
                HookedList.Add("OnTriggerStay2D");
                On.TransitionPoint.OnTriggerStay2D += OnTriggerStay2D;
            }
        }

        internal static event Delegates.OnTriggerStay2D_BeforeArgs _beforeOnTriggerStay2D;
        internal static event Delegates.OnTriggerStay2D_NormalArgs _afterOnTriggerStay2D;

        private static void OnTriggerStay2D(On.TransitionPoint.orig_OnTriggerStay2D orig, TransitionPoint self,
            Collider2D movingObj)
        {
            Delegates.Params_OnTriggerStay2D @params = new()
            {
                self = self, movingObj = movingObj
            };
            _beforeOnTriggerStay2D?.Invoke(@params);
            self = @params.self;
            movingObj = @params.movingObj;
            orig(self, movingObj);
            if (_afterOnTriggerStay2D != null) _afterOnTriggerStay2D.Invoke(@params);
        }

        internal static void HookOnDrawGizmos()
        {
            if (!HookedList.Contains("OnDrawGizmos"))
            {
                HookedList.Add("OnDrawGizmos");
                On.TransitionPoint.OnDrawGizmos += OnDrawGizmos;
            }
        }

        internal static event Delegates.OnDrawGizmos_BeforeArgs _beforeOnDrawGizmos;
        internal static event Delegates.OnDrawGizmos_NormalArgs _afterOnDrawGizmos;

        private static void OnDrawGizmos(On.TransitionPoint.orig_OnDrawGizmos orig, TransitionPoint self)
        {
            Delegates.Params_OnDrawGizmos @params = new()
            {
                self = self
            };
            _beforeOnDrawGizmos?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDrawGizmos != null) _afterOnDrawGizmos.Invoke(@params);
        }

        internal static void HookGetGatePosition()
        {
            if (!HookedList.Contains("GetGatePosition"))
            {
                HookedList.Add("GetGatePosition");
                On.TransitionPoint.GetGatePosition += GetGatePosition;
            }
        }

        internal static event Delegates.GetGatePosition_BeforeArgs _beforeGetGatePosition;
        internal static event Delegates.GetGatePosition_NormalArgs _afterGetGatePosition;

        private static GatePosition GetGatePosition(On.TransitionPoint.orig_GetGatePosition orig, TransitionPoint self)
        {
            Delegates.Params_GetGatePosition @params = new()
            {
                self = self
            };
            _beforeGetGatePosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetGatePosition != null) retVal = _afterGetGatePosition.Invoke(@params);
            return retVal;
        }

        internal static void HookSetTargetScene()
        {
            if (!HookedList.Contains("SetTargetScene"))
            {
                HookedList.Add("SetTargetScene");
                On.TransitionPoint.SetTargetScene += SetTargetScene;
            }
        }

        internal static event Delegates.SetTargetScene_BeforeArgs _beforeSetTargetScene;
        internal static event Delegates.SetTargetScene_NormalArgs _afterSetTargetScene;

        private static void SetTargetScene(On.TransitionPoint.orig_SetTargetScene orig, TransitionPoint self,
            string newScene)
        {
            Delegates.Params_SetTargetScene @params = new()
            {
                self = self, newScene = newScene
            };
            _beforeSetTargetScene?.Invoke(@params);
            self = @params.self;
            newScene = @params.newScene;
            orig(self, newScene);
            if (_afterSetTargetScene != null) _afterSetTargetScene.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void get_TransitionPoints_BeforeArgs();

        public delegate List<TransitionPoint> get_TransitionPoints_NormalArgs();

        public delegate void GetGatePosition_BeforeArgs(Params_GetGatePosition args);

        public delegate GatePosition GetGatePosition_NormalArgs(Params_GetGatePosition args);

        public delegate void Init_BeforeArgs();

        public delegate void Init_NormalArgs();

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnDrawGizmos_BeforeArgs(Params_OnDrawGizmos args);

        public delegate void OnDrawGizmos_NormalArgs(Params_OnDrawGizmos args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerStay2D_BeforeArgs(Params_OnTriggerStay2D args);

        public delegate void OnTriggerStay2D_NormalArgs(Params_OnTriggerStay2D args);

        public delegate void SetTargetScene_BeforeArgs(Params_SetTargetScene args);

        public delegate void SetTargetScene_NormalArgs(Params_SetTargetScene args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public TransitionPoint self;
        }

        public sealed class Params_OnDestroy
        {
            public TransitionPoint self;
        }

        public sealed class Params_Start
        {
            public TransitionPoint self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D movingObj;
            public TransitionPoint self;
        }

        public sealed class Params_OnTriggerStay2D
        {
            public Collider2D movingObj;
            public TransitionPoint self;
        }

        public sealed class Params_OnDrawGizmos
        {
            public TransitionPoint self;
        }

        public sealed class Params_GetGatePosition
        {
            public TransitionPoint self;
        }

        public sealed class Params_SetTargetScene
        {
            public string newScene;
            public TransitionPoint self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_TransitionPoints_BeforeArgs get_TransitionPoints
        {
            add
            {
                HookHandler._beforeget_TransitionPoints += value;
                HookHandler.Hookget_TransitionPoints();
            }
            remove => HookHandler._beforeget_TransitionPoints -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_BeforeArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._beforeOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._beforeOnTriggerStay2D -= value;
        }

        public static event Delegates.OnDrawGizmos_BeforeArgs OnDrawGizmos
        {
            add
            {
                HookHandler._beforeOnDrawGizmos += value;
                HookHandler.HookOnDrawGizmos();
            }
            remove => HookHandler._beforeOnDrawGizmos -= value;
        }

        public static event Delegates.GetGatePosition_BeforeArgs GetGatePosition
        {
            add
            {
                HookHandler._beforeGetGatePosition += value;
                HookHandler.HookGetGatePosition();
            }
            remove => HookHandler._beforeGetGatePosition -= value;
        }

        public static event Delegates.SetTargetScene_BeforeArgs SetTargetScene
        {
            add
            {
                HookHandler._beforeSetTargetScene += value;
                HookHandler.HookSetTargetScene();
            }
            remove => HookHandler._beforeSetTargetScene -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_TransitionPoints_NormalArgs get_TransitionPoints
        {
            add
            {
                HookHandler._afterget_TransitionPoints += value;
                HookHandler.Hookget_TransitionPoints();
            }
            remove => HookHandler._afterget_TransitionPoints -= value;
        }

        public static event Delegates.Init_NormalArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_NormalArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._afterOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._afterOnTriggerStay2D -= value;
        }

        public static event Delegates.OnDrawGizmos_NormalArgs OnDrawGizmos
        {
            add
            {
                HookHandler._afterOnDrawGizmos += value;
                HookHandler.HookOnDrawGizmos();
            }
            remove => HookHandler._afterOnDrawGizmos -= value;
        }

        public static event Delegates.GetGatePosition_NormalArgs GetGatePosition
        {
            add
            {
                HookHandler._afterGetGatePosition += value;
                HookHandler.HookGetGatePosition();
            }
            remove => HookHandler._afterGetGatePosition -= value;
        }

        public static event Delegates.SetTargetScene_NormalArgs SetTargetScene
        {
            add
            {
                HookHandler._afterSetTargetScene += value;
                HookHandler.HookSetTargetScene();
            }
            remove => HookHandler._afterSetTargetScene -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_TransitionPoints_NormalArgs get_TransitionPoints
        {
            add => HookEndpointManager.Add<Delegates.get_TransitionPoints_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TransitionPoint), "get_TransitionPoints", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_TransitionPoints_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TransitionPoint), "get_TransitionPoints", false), value);
        }

        public static event On.TransitionPoint.hook_Init Init
        {
            add => On.TransitionPoint.Init += value;
            remove => On.TransitionPoint.Init -= value;
        }

        public static event On.TransitionPoint.hook_Awake Awake
        {
            add => On.TransitionPoint.Awake += value;
            remove => On.TransitionPoint.Awake -= value;
        }

        public static event On.TransitionPoint.hook_OnDestroy OnDestroy
        {
            add => On.TransitionPoint.OnDestroy += value;
            remove => On.TransitionPoint.OnDestroy -= value;
        }

        public static event On.TransitionPoint.hook_Start Start
        {
            add => On.TransitionPoint.Start += value;
            remove => On.TransitionPoint.Start -= value;
        }

        public static event On.TransitionPoint.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.TransitionPoint.OnTriggerEnter2D += value;
            remove => On.TransitionPoint.OnTriggerEnter2D -= value;
        }

        public static event On.TransitionPoint.hook_OnTriggerStay2D OnTriggerStay2D
        {
            add => On.TransitionPoint.OnTriggerStay2D += value;
            remove => On.TransitionPoint.OnTriggerStay2D -= value;
        }

        public static event On.TransitionPoint.hook_OnDrawGizmos OnDrawGizmos
        {
            add => On.TransitionPoint.OnDrawGizmos += value;
            remove => On.TransitionPoint.OnDrawGizmos -= value;
        }

        public static event On.TransitionPoint.hook_GetGatePosition GetGatePosition
        {
            add => On.TransitionPoint.GetGatePosition += value;
            remove => On.TransitionPoint.GetGatePosition -= value;
        }

        public static event On.TransitionPoint.hook_SetTargetScene SetTargetScene
        {
            add => On.TransitionPoint.SetTargetScene += value;
            remove => On.TransitionPoint.SetTargetScene -= value;
        }
    }
}