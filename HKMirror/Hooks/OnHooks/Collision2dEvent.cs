using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Collision2dEvent class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCollision2dEvent
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<Collision2dEvent> orig, Collision2dEvent self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnPreprocess()
        {
            if (!HookedList.Contains("OnPreprocess"))
            {
                HookedList.Add("OnPreprocess");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "OnPreprocess"), OnPreprocess);
            }
        }

        internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
        internal static event Delegates.OnPreprocess_NormalArgs _afterOnPreprocess;

        private static void OnPreprocess(Action<Collision2dEvent> orig, Collision2dEvent self)
        {
            Delegates.Params_OnPreprocess @params = new()
            {
                self = self
            };
            _beforeOnPreprocess?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnPreprocess != null) _afterOnPreprocess.Invoke(@params);
        }

        internal static void HookStoreCollisionInfo()
        {
            if (!HookedList.Contains("StoreCollisionInfo"))
            {
                HookedList.Add("StoreCollisionInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "StoreCollisionInfo"),
                    StoreCollisionInfo);
            }
        }

        internal static event Delegates.StoreCollisionInfo_BeforeArgs _beforeStoreCollisionInfo;
        internal static event Delegates.StoreCollisionInfo_NormalArgs _afterStoreCollisionInfo;

        private static void StoreCollisionInfo(Action<Collision2dEvent, Collision2D> orig, Collision2dEvent self,
            Collision2D collisionInfo)
        {
            Delegates.Params_StoreCollisionInfo @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeStoreCollisionInfo?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterStoreCollisionInfo != null) _afterStoreCollisionInfo.Invoke(@params);
        }

        internal static void HookDoCollisionEnter2D()
        {
            if (!HookedList.Contains("DoCollisionEnter2D"))
            {
                HookedList.Add("DoCollisionEnter2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionEnter2D"),
                    DoCollisionEnter2D);
            }
        }

        internal static event Delegates.DoCollisionEnter2D_BeforeArgs _beforeDoCollisionEnter2D;
        internal static event Delegates.DoCollisionEnter2D_NormalArgs _afterDoCollisionEnter2D;

        private static void DoCollisionEnter2D(Action<Collision2dEvent, Collision2D> orig, Collision2dEvent self,
            Collision2D collisionInfo)
        {
            Delegates.Params_DoCollisionEnter2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeDoCollisionEnter2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoCollisionEnter2D != null) _afterDoCollisionEnter2D.Invoke(@params);
        }

        internal static void HookDoCollisionStay2D()
        {
            if (!HookedList.Contains("DoCollisionStay2D"))
            {
                HookedList.Add("DoCollisionStay2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionStay2D"),
                    DoCollisionStay2D);
            }
        }

        internal static event Delegates.DoCollisionStay2D_BeforeArgs _beforeDoCollisionStay2D;
        internal static event Delegates.DoCollisionStay2D_NormalArgs _afterDoCollisionStay2D;

        private static void DoCollisionStay2D(Action<Collision2dEvent, Collision2D> orig, Collision2dEvent self,
            Collision2D collisionInfo)
        {
            Delegates.Params_DoCollisionStay2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeDoCollisionStay2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoCollisionStay2D != null) _afterDoCollisionStay2D.Invoke(@params);
        }

        internal static void HookDoCollisionExit2D()
        {
            if (!HookedList.Contains("DoCollisionExit2D"))
            {
                HookedList.Add("DoCollisionExit2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionExit2D"),
                    DoCollisionExit2D);
            }
        }

        internal static event Delegates.DoCollisionExit2D_BeforeArgs _beforeDoCollisionExit2D;
        internal static event Delegates.DoCollisionExit2D_NormalArgs _afterDoCollisionExit2D;

        private static void DoCollisionExit2D(Action<Collision2dEvent, Collision2D> orig, Collision2dEvent self,
            Collision2D collisionInfo)
        {
            Delegates.Params_DoCollisionExit2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeDoCollisionExit2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoCollisionExit2D != null) _afterDoCollisionExit2D.Invoke(@params);
        }

        internal static void HookDoParticleCollision()
        {
            if (!HookedList.Contains("DoParticleCollision"))
            {
                HookedList.Add("DoParticleCollision");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoParticleCollision"),
                    DoParticleCollision);
            }
        }

        internal static event Delegates.DoParticleCollision_BeforeArgs _beforeDoParticleCollision;
        internal static event Delegates.DoParticleCollision_NormalArgs _afterDoParticleCollision;

        private static void DoParticleCollision(Action<Collision2dEvent, GameObject> orig, Collision2dEvent self,
            GameObject other)
        {
            Delegates.Params_DoParticleCollision @params = new()
            {
                self = self, other = other
            };
            _beforeDoParticleCollision?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterDoParticleCollision != null) _afterDoParticleCollision.Invoke(@params);
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "ErrorCheck"), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_NormalArgs _afterErrorCheck;

        private static string ErrorCheck(Func<Collision2dEvent, string> orig, Collision2dEvent self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            _beforeErrorCheck?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null) retVal = _afterErrorCheck.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoCollisionEnter2D_BeforeArgs(Params_DoCollisionEnter2D args);

        public delegate void DoCollisionEnter2D_NormalArgs(Params_DoCollisionEnter2D args);

        public delegate void DoCollisionExit2D_BeforeArgs(Params_DoCollisionExit2D args);

        public delegate void DoCollisionExit2D_NormalArgs(Params_DoCollisionExit2D args);

        public delegate void DoCollisionStay2D_BeforeArgs(Params_DoCollisionStay2D args);

        public delegate void DoCollisionStay2D_NormalArgs(Params_DoCollisionStay2D args);

        public delegate void DoParticleCollision_BeforeArgs(Params_DoParticleCollision args);

        public delegate void DoParticleCollision_NormalArgs(Params_DoParticleCollision args);

        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_NormalArgs(Params_ErrorCheck args);

        public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_NormalArgs(Params_OnPreprocess args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void StoreCollisionInfo_BeforeArgs(Params_StoreCollisionInfo args);

        public delegate void StoreCollisionInfo_NormalArgs(Params_StoreCollisionInfo args);

        public sealed class Params_Reset
        {
            public Collision2dEvent self;
        }

        public sealed class Params_OnPreprocess
        {
            public Collision2dEvent self;
        }

        public sealed class Params_StoreCollisionInfo
        {
            public Collision2D collisionInfo;
            public Collision2dEvent self;
        }

        public sealed class Params_DoCollisionEnter2D
        {
            public Collision2D collisionInfo;
            public Collision2dEvent self;
        }

        public sealed class Params_DoCollisionStay2D
        {
            public Collision2D collisionInfo;
            public Collision2dEvent self;
        }

        public sealed class Params_DoCollisionExit2D
        {
            public Collision2D collisionInfo;
            public Collision2dEvent self;
        }

        public sealed class Params_DoParticleCollision
        {
            public GameObject other;
            public Collision2dEvent self;
        }

        public sealed class Params_ErrorCheck
        {
            public Collision2dEvent self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
        {
            add
            {
                HookHandler._beforeOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._beforeOnPreprocess -= value;
        }

        public static event Delegates.StoreCollisionInfo_BeforeArgs StoreCollisionInfo
        {
            add
            {
                HookHandler._beforeStoreCollisionInfo += value;
                HookHandler.HookStoreCollisionInfo();
            }
            remove => HookHandler._beforeStoreCollisionInfo -= value;
        }

        public static event Delegates.DoCollisionEnter2D_BeforeArgs DoCollisionEnter2D
        {
            add
            {
                HookHandler._beforeDoCollisionEnter2D += value;
                HookHandler.HookDoCollisionEnter2D();
            }
            remove => HookHandler._beforeDoCollisionEnter2D -= value;
        }

        public static event Delegates.DoCollisionStay2D_BeforeArgs DoCollisionStay2D
        {
            add
            {
                HookHandler._beforeDoCollisionStay2D += value;
                HookHandler.HookDoCollisionStay2D();
            }
            remove => HookHandler._beforeDoCollisionStay2D -= value;
        }

        public static event Delegates.DoCollisionExit2D_BeforeArgs DoCollisionExit2D
        {
            add
            {
                HookHandler._beforeDoCollisionExit2D += value;
                HookHandler.HookDoCollisionExit2D();
            }
            remove => HookHandler._beforeDoCollisionExit2D -= value;
        }

        public static event Delegates.DoParticleCollision_BeforeArgs DoParticleCollision
        {
            add
            {
                HookHandler._beforeDoParticleCollision += value;
                HookHandler.HookDoParticleCollision();
            }
            remove => HookHandler._beforeDoParticleCollision -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnPreprocess_NormalArgs OnPreprocess
        {
            add
            {
                HookHandler._afterOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._afterOnPreprocess -= value;
        }

        public static event Delegates.StoreCollisionInfo_NormalArgs StoreCollisionInfo
        {
            add
            {
                HookHandler._afterStoreCollisionInfo += value;
                HookHandler.HookStoreCollisionInfo();
            }
            remove => HookHandler._afterStoreCollisionInfo -= value;
        }

        public static event Delegates.DoCollisionEnter2D_NormalArgs DoCollisionEnter2D
        {
            add
            {
                HookHandler._afterDoCollisionEnter2D += value;
                HookHandler.HookDoCollisionEnter2D();
            }
            remove => HookHandler._afterDoCollisionEnter2D -= value;
        }

        public static event Delegates.DoCollisionStay2D_NormalArgs DoCollisionStay2D
        {
            add
            {
                HookHandler._afterDoCollisionStay2D += value;
                HookHandler.HookDoCollisionStay2D();
            }
            remove => HookHandler._afterDoCollisionStay2D -= value;
        }

        public static event Delegates.DoCollisionExit2D_NormalArgs DoCollisionExit2D
        {
            add
            {
                HookHandler._afterDoCollisionExit2D += value;
                HookHandler.HookDoCollisionExit2D();
            }
            remove => HookHandler._afterDoCollisionExit2D -= value;
        }

        public static event Delegates.DoParticleCollision_NormalArgs DoParticleCollision
        {
            add
            {
                HookHandler._afterDoParticleCollision += value;
                HookHandler.HookDoParticleCollision();
            }
            remove => HookHandler._afterDoParticleCollision -= value;
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "Reset"), value);
        }

        public static event Delegates.OnPreprocess_NormalArgs OnPreprocess
        {
            add => HookEndpointManager.Add<Delegates.OnPreprocess_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "OnPreprocess"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreprocess_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "OnPreprocess"), value);
        }

        public static event Delegates.StoreCollisionInfo_NormalArgs StoreCollisionInfo
        {
            add => HookEndpointManager.Add<Delegates.StoreCollisionInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "StoreCollisionInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.StoreCollisionInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "StoreCollisionInfo"), value);
        }

        public static event Delegates.DoCollisionEnter2D_NormalArgs DoCollisionEnter2D
        {
            add => HookEndpointManager.Add<Delegates.DoCollisionEnter2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionEnter2D"), value);
            remove => HookEndpointManager.Remove<Delegates.DoCollisionEnter2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionEnter2D"), value);
        }

        public static event Delegates.DoCollisionStay2D_NormalArgs DoCollisionStay2D
        {
            add => HookEndpointManager.Add<Delegates.DoCollisionStay2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionStay2D"), value);
            remove => HookEndpointManager.Remove<Delegates.DoCollisionStay2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionStay2D"), value);
        }

        public static event Delegates.DoCollisionExit2D_NormalArgs DoCollisionExit2D
        {
            add => HookEndpointManager.Add<Delegates.DoCollisionExit2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionExit2D"), value);
            remove => HookEndpointManager.Remove<Delegates.DoCollisionExit2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoCollisionExit2D"), value);
        }

        public static event Delegates.DoParticleCollision_NormalArgs DoParticleCollision
        {
            add => HookEndpointManager.Add<Delegates.DoParticleCollision_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoParticleCollision"), value);
            remove => HookEndpointManager.Remove<Delegates.DoParticleCollision_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "DoParticleCollision"), value);
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "ErrorCheck"), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Collision2dEvent), "ErrorCheck"), value);
        }
    }
}