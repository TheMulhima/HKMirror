using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for GameSaveLoadedArgs class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameSaveLoadedArgs
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_Data()
        {
            if (!HookedList.Contains("get_Data"))
            {
                HookedList.Add("get_Data");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.GameSaveLoadedArgs), "get_Data", true),
                    get_Data);
            }
        }

        internal static event Delegates.get_Data_BeforeArgs _beforeget_Data;
        internal static event Delegates.get_Data_AfterArgs _afterget_Data;

        private static byte[] get_Data(Func<Microsoft.Xbox.GameSaveLoadedArgs, byte[]> orig,
            Microsoft.Xbox.GameSaveLoadedArgs self)
        {
            Delegates.Params_get_Data @params = new()
            {
                self = self
            };
            if (_beforeget_Data != null)
            {
                foreach (Delegates.get_Data_BeforeArgs toInvoke in _beforeget_Data.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Data?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Data != null)
            {
                foreach (Delegates.get_Data_AfterArgs toInvoke in _afterget_Data.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Data.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Data()
        {
            if (!HookedList.Contains("set_Data"))
            {
                HookedList.Add("set_Data");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.GameSaveLoadedArgs), "set_Data", true),
                    set_Data);
            }
        }

        internal static event Delegates.set_Data_BeforeArgs _beforeset_Data;
        internal static event Delegates.set_Data_AfterArgs _afterset_Data;

        private static void set_Data(Action<Microsoft.Xbox.GameSaveLoadedArgs, byte[]> orig,
            Microsoft.Xbox.GameSaveLoadedArgs self, byte[] value)
        {
            Delegates.Params_set_Data @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Data != null)
            {
                foreach (Delegates.set_Data_BeforeArgs toInvoke in _beforeset_Data.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Data?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Data != null)
            {
                foreach (Delegates.set_Data_AfterArgs toInvoke in _afterset_Data.GetInvocationList())
                {
                    try
                    {
                        _afterset_Data.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_Data
        {
            public Microsoft.Xbox.GameSaveLoadedArgs self;
        }

        public delegate void get_Data_BeforeArgs(Params_get_Data args);

        public delegate byte[] get_Data_AfterArgs(Params_get_Data args, byte[] ret);

        public delegate byte[] get_Data_WithArgs(Func<Microsoft.Xbox.GameSaveLoadedArgs, byte[]> orig,
            Microsoft.Xbox.GameSaveLoadedArgs self);

        public sealed class Params_set_Data
        {
            public Microsoft.Xbox.GameSaveLoadedArgs self;
            public byte[] value;
        }

        public delegate void set_Data_BeforeArgs(Params_set_Data args);

        public delegate void set_Data_AfterArgs(Params_set_Data args);

        public delegate void set_Data_WithArgs(Action<Microsoft.Xbox.GameSaveLoadedArgs, byte[]> orig,
            Microsoft.Xbox.GameSaveLoadedArgs self, byte[] value);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Data_BeforeArgs get_Data
        {
            add
            {
                HookHandler._beforeget_Data += value;
                HookHandler.Hookget_Data();
            }
            remove => HookHandler._beforeget_Data -= value;
        }

        public static event Delegates.set_Data_BeforeArgs set_Data
        {
            add
            {
                HookHandler._beforeset_Data += value;
                HookHandler.Hookset_Data();
            }
            remove => HookHandler._beforeset_Data -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Data_AfterArgs get_Data
        {
            add
            {
                HookHandler._afterget_Data += value;
                HookHandler.Hookget_Data();
            }
            remove => HookHandler._afterget_Data -= value;
        }

        public static event Delegates.set_Data_AfterArgs set_Data
        {
            add
            {
                HookHandler._afterset_Data += value;
                HookHandler.Hookset_Data();
            }
            remove => HookHandler._afterset_Data -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Data_WithArgs get_Data
        {
            add => HookEndpointManager.Add<Delegates.get_Data_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.GameSaveLoadedArgs), "get_Data", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Data_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.GameSaveLoadedArgs), "get_Data", true), value);
        }

        public static event Delegates.set_Data_WithArgs set_Data
        {
            add => HookEndpointManager.Add<Delegates.set_Data_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.GameSaveLoadedArgs), "set_Data", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Data_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.GameSaveLoadedArgs), "set_Data", true), value);
        }
    }
}