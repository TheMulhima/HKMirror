using Modding.Menu;
using Modding.Menu.Config;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for KeybindContent class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnKeybindContent
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAddKeybind_ContentArea_string_PlayerAction_KeybindConfig()
        {
            if (!HookedList.Contains("AddKeybind_ContentArea_string_PlayerAction_KeybindConfig"))
            {
                HookedList.Add("AddKeybind_ContentArea_string_PlayerAction_KeybindConfig");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(KeybindContent),
                        "AddKeybind_ContentArea_string_PlayerAction_KeybindConfig", false),
                    AddKeybind_ContentArea_string_PlayerAction_KeybindConfig);
            }
        }

        internal static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_BeforeArgs
            _beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig;

        internal static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_AfterArgs
            _afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig;

        private static ContentArea AddKeybind_ContentArea_string_PlayerAction_KeybindConfig(
            Func<ContentArea, string, PlayerAction, KeybindConfig, ContentArea> orig, ContentArea content, string name,
            PlayerAction action, KeybindConfig config)
        {
            Delegates.Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig @params = new()
            {
                content = content, name = name, action = action, config = config
            };
            if (_beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig != null)
                foreach (Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_BeforeArgs toInvoke in
                         _beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig.GetInvocationList())
                    try
                    {
                        _beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            content = @params.content;
            name = @params.name;
            action = @params.action;
            config = @params.config;
            var retVal = orig(content, name, action, config);
            if (_afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig != null)
                foreach (Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_AfterArgs toInvoke in
                         _afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig.GetInvocationList())
                    try
                    {
                        retVal = _afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey()
        {
            if (!HookedList.Contains("AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey"))
            {
                HookedList.Add("AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(KeybindContent),
                        "AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey", false),
                    AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey);
            }
        }

        internal static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_BeforeArgs
            _beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey;

        internal static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_AfterArgs
            _afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey;

        private static ContentArea AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey(
            Func<ContentArea, string, PlayerAction, KeybindConfig, MappableKey, ContentArea> orig, ContentArea content,
            string name, PlayerAction action, KeybindConfig config, MappableKey mappableKey)
        {
            Delegates.Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey @params = new()
            {
                content = content, name = name, action = action, config = config, mappableKey = mappableKey
            };
            if (_beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey != null)
                foreach (Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_BeforeArgs
                             toInvoke in _beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey
                             .GetInvocationList())
                    try
                    {
                        _beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            content = @params.content;
            name = @params.name;
            action = @params.action;
            config = @params.config;
            mappableKey = @params.mappableKey;
            var retVal = orig(content, name, action, config, mappableKey);
            if (_afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey != null)
                foreach (Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_AfterArgs
                             toInvoke in _afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey
                             .GetInvocationList())
                    try
                    {
                        retVal =
                            _afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey.Invoke(@params,
                                retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddButtonBind()
        {
            if (!HookedList.Contains("AddButtonBind"))
            {
                HookedList.Add("AddButtonBind");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KeybindContent), "AddButtonBind", false), AddButtonBind);
            }
        }

        internal static event Delegates.AddButtonBind_BeforeArgs _beforeAddButtonBind;
        internal static event Delegates.AddButtonBind_AfterArgs _afterAddButtonBind;

        private static ContentArea AddButtonBind(
            Func<ContentArea, string, PlayerAction, ButtonBindConfig, MappableControllerButton, ContentArea> orig,
            ContentArea content, string name, PlayerAction action, ButtonBindConfig config,
            MappableControllerButton mappableControllerButton)
        {
            Delegates.Params_AddButtonBind @params = new()
            {
                content = content, name = name, action = action, config = config,
                mappableControllerButton = mappableControllerButton
            };
            if (_beforeAddButtonBind != null)
                foreach (Delegates.AddButtonBind_BeforeArgs toInvoke in _beforeAddButtonBind.GetInvocationList())
                    try
                    {
                        _beforeAddButtonBind?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            content = @params.content;
            name = @params.name;
            action = @params.action;
            config = @params.config;
            mappableControllerButton = @params.mappableControllerButton;
            var retVal = orig(content, name, action, config, mappableControllerButton);
            if (_afterAddButtonBind != null)
                foreach (Delegates.AddButtonBind_AfterArgs toInvoke in _afterAddButtonBind.GetInvocationList())
                    try
                    {
                        retVal = _afterAddButtonBind.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate ContentArea AddButtonBind_AfterArgs(Params_AddButtonBind args, ContentArea ret);

        public delegate void AddButtonBind_BeforeArgs(Params_AddButtonBind args);

        public delegate ContentArea AddButtonBind_WithArgs(
            Func<ContentArea, string, PlayerAction, ButtonBindConfig, MappableControllerButton, ContentArea> orig,
            ContentArea content, string name, PlayerAction action, ButtonBindConfig config,
            MappableControllerButton mappableControllerButton);

        public delegate ContentArea AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_AfterArgs(
            Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig args, ContentArea ret);

        public delegate void AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_BeforeArgs(
            Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig args);

        public delegate ContentArea AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_AfterArgs(
            Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey args, ContentArea ret);

        public delegate void AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_BeforeArgs(
            Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey args);

        public delegate ContentArea AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_WithArgs(
            Func<ContentArea, string, PlayerAction, KeybindConfig, MappableKey, ContentArea> orig, ContentArea content,
            string name, PlayerAction action, KeybindConfig config, MappableKey mappableKey);

        public delegate ContentArea AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_WithArgs(
            Func<ContentArea, string, PlayerAction, KeybindConfig, ContentArea> orig, ContentArea content, string name,
            PlayerAction action, KeybindConfig config);

        public sealed class Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig
        {
            public PlayerAction action;
            public KeybindConfig config;
            public ContentArea content;
            public string name;
        }

        public sealed class Params_AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey
        {
            public PlayerAction action;
            public KeybindConfig config;
            public ContentArea content;
            public MappableKey mappableKey;
            public string name;
        }

        public sealed class Params_AddButtonBind
        {
            public PlayerAction action;
            public ButtonBindConfig config;
            public ContentArea content;
            public MappableControllerButton mappableControllerButton;
            public string name;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_BeforeArgs
            AddKeybind_ContentArea_string_PlayerAction_KeybindConfig
            {
                add
                {
                    HookHandler._beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig += value;
                    HookHandler.HookAddKeybind_ContentArea_string_PlayerAction_KeybindConfig();
                }
                remove => HookHandler._beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig -= value;
            }

        public static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_BeforeArgs
            AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey
            {
                add
                {
                    HookHandler._beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey += value;
                    HookHandler.HookAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey();
                }
                remove => HookHandler._beforeAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey -=
                    value;
            }

        public static event Delegates.AddButtonBind_BeforeArgs AddButtonBind
        {
            add
            {
                HookHandler._beforeAddButtonBind += value;
                HookHandler.HookAddButtonBind();
            }
            remove => HookHandler._beforeAddButtonBind -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_AfterArgs
            AddKeybind_ContentArea_string_PlayerAction_KeybindConfig
            {
                add
                {
                    HookHandler._afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig += value;
                    HookHandler.HookAddKeybind_ContentArea_string_PlayerAction_KeybindConfig();
                }
                remove => HookHandler._afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig -= value;
            }

        public static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_AfterArgs
            AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey
            {
                add
                {
                    HookHandler._afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey += value;
                    HookHandler.HookAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey();
                }
                remove => HookHandler._afterAddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey -=
                    value;
            }

        public static event Delegates.AddButtonBind_AfterArgs AddButtonBind
        {
            add
            {
                HookHandler._afterAddButtonBind += value;
                HookHandler.HookAddButtonBind();
            }
            remove => HookHandler._afterAddButtonBind -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_WithArgs
            AddKeybind_ContentArea_string_PlayerAction_KeybindConfig
            {
                add => HookEndpointManager
                    .Add<Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(KeybindContent), "AddKeybind", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(KeybindContent), "AddKeybind", false), value);
            }

        public static event Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_WithArgs
            AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey
            {
                add => HookEndpointManager
                    .Add<Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(KeybindContent), "AddKeybind", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<
                            Delegates.AddKeybind_ContentArea_string_PlayerAction_KeybindConfig_MappableKey_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(KeybindContent), "AddKeybind", false), value);
            }

        public static event Delegates.AddButtonBind_WithArgs AddButtonBind
        {
            add => HookEndpointManager.Add<Delegates.AddButtonBind_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KeybindContent), "AddButtonBind", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddButtonBind_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KeybindContent), "AddButtonBind", false), value);
        }
    }
}