using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for BossStatueLoadManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossStatueLoadManager
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_ShouldUnload()
        {
            if (!HookedList.Contains("get_ShouldUnload"))
            {
                HookedList.Add("get_ShouldUnload");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossStatueLoadManager), "get_ShouldUnload", false),
                    get_ShouldUnload);
            }
        }

        internal static event Delegates.get_ShouldUnload_BeforeArgs _beforeget_ShouldUnload;
        internal static event Delegates.get_ShouldUnload_AfterArgs _afterget_ShouldUnload;

        private static bool get_ShouldUnload(Func<bool> orig)
        {
            if (_beforeget_ShouldUnload != null)
            {
                foreach (Delegates.get_ShouldUnload_BeforeArgs toInvoke in _beforeget_ShouldUnload.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ShouldUnload?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_ShouldUnload != null)
            {
                foreach (Delegates.get_ShouldUnload_AfterArgs toInvoke in _afterget_ShouldUnload.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ShouldUnload.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.BossStatueLoadManager.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.BossStatueLoadManager.orig_OnEnable orig, BossStatueLoadManager self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.BossStatueLoadManager.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.BossStatueLoadManager.orig_OnDisable orig, BossStatueLoadManager self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClear()
        {
            if (!HookedList.Contains("Clear"))
            {
                HookedList.Add("Clear");
                On.BossStatueLoadManager.Clear += Clear;
            }
        }

        internal static event Delegates.Clear_BeforeArgs _beforeClear;
        internal static event Delegates.Clear_AfterArgs _afterClear;

        private static void Clear(On.BossStatueLoadManager.orig_Clear orig)
        {
            if (_beforeClear != null)
            {
                foreach (Delegates.Clear_BeforeArgs toInvoke in _beforeClear.GetInvocationList())
                {
                    try
                    {
                        _beforeClear?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterClear != null)
            {
                foreach (Delegates.Clear_AfterArgs toInvoke in _afterClear.GetInvocationList())
                {
                    try
                    {
                        _afterClear.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRecordBossScene()
        {
            if (!HookedList.Contains("RecordBossScene"))
            {
                HookedList.Add("RecordBossScene");
                On.BossStatueLoadManager.RecordBossScene += RecordBossScene;
            }
        }

        internal static event Delegates.RecordBossScene_BeforeArgs _beforeRecordBossScene;
        internal static event Delegates.RecordBossScene_AfterArgs _afterRecordBossScene;

        private static void RecordBossScene(On.BossStatueLoadManager.orig_RecordBossScene orig, BossScene bossScene)
        {
            Delegates.Params_RecordBossScene @params = new()
            {
                bossScene = bossScene
            };
            if (_beforeRecordBossScene != null)
            {
                foreach (Delegates.RecordBossScene_BeforeArgs toInvoke in _beforeRecordBossScene.GetInvocationList())
                {
                    try
                    {
                        _beforeRecordBossScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            bossScene = @params.bossScene;
            orig(bossScene);
            if (_afterRecordBossScene != null)
            {
                foreach (Delegates.RecordBossScene_AfterArgs toInvoke in _afterRecordBossScene.GetInvocationList())
                {
                    try
                    {
                        _afterRecordBossScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_ShouldUnload_BeforeArgs();

        public delegate bool get_ShouldUnload_AfterArgs(bool ret);

        public delegate bool get_ShouldUnload_WithArgs(Func<bool> orig);

        public sealed class Params_OnEnable
        {
            public BossStatueLoadManager self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<BossStatueLoadManager> orig, BossStatueLoadManager self);

        public sealed class Params_OnDisable
        {
            public BossStatueLoadManager self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<BossStatueLoadManager> orig, BossStatueLoadManager self);

        public delegate void Clear_BeforeArgs();

        public delegate void Clear_AfterArgs();

        public delegate void Clear_WithArgs(Action orig);

        public sealed class Params_RecordBossScene
        {
            public BossScene bossScene;
        }

        public delegate void RecordBossScene_BeforeArgs(Params_RecordBossScene args);

        public delegate void RecordBossScene_AfterArgs(Params_RecordBossScene args);

        public delegate void RecordBossScene_WithArgs(Action<BossScene> orig, BossScene bossScene);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ShouldUnload_BeforeArgs get_ShouldUnload
        {
            add
            {
                HookHandler._beforeget_ShouldUnload += value;
                HookHandler.Hookget_ShouldUnload();
            }
            remove => HookHandler._beforeget_ShouldUnload -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Clear_BeforeArgs Clear
        {
            add
            {
                HookHandler._beforeClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._beforeClear -= value;
        }

        public static event Delegates.RecordBossScene_BeforeArgs RecordBossScene
        {
            add
            {
                HookHandler._beforeRecordBossScene += value;
                HookHandler.HookRecordBossScene();
            }
            remove => HookHandler._beforeRecordBossScene -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ShouldUnload_AfterArgs get_ShouldUnload
        {
            add
            {
                HookHandler._afterget_ShouldUnload += value;
                HookHandler.Hookget_ShouldUnload();
            }
            remove => HookHandler._afterget_ShouldUnload -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Clear_AfterArgs Clear
        {
            add
            {
                HookHandler._afterClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._afterClear -= value;
        }

        public static event Delegates.RecordBossScene_AfterArgs RecordBossScene
        {
            add
            {
                HookHandler._afterRecordBossScene += value;
                HookHandler.HookRecordBossScene();
            }
            remove => HookHandler._afterRecordBossScene -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ShouldUnload_WithArgs get_ShouldUnload
        {
            add => HookEndpointManager.Add<Delegates.get_ShouldUnload_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossStatueLoadManager), "get_ShouldUnload", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ShouldUnload_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossStatueLoadManager), "get_ShouldUnload", false), value);
        }

        public static event On.BossStatueLoadManager.hook_OnEnable OnEnable
        {
            add => On.BossStatueLoadManager.OnEnable += value;
            remove => On.BossStatueLoadManager.OnEnable -= value;
        }

        public static event On.BossStatueLoadManager.hook_OnDisable OnDisable
        {
            add => On.BossStatueLoadManager.OnDisable += value;
            remove => On.BossStatueLoadManager.OnDisable -= value;
        }

        public static event On.BossStatueLoadManager.hook_Clear Clear
        {
            add => On.BossStatueLoadManager.Clear += value;
            remove => On.BossStatueLoadManager.Clear -= value;
        }

        public static event On.BossStatueLoadManager.hook_RecordBossScene RecordBossScene
        {
            add => On.BossStatueLoadManager.RecordBossScene += value;
            remove => On.BossStatueLoadManager.RecordBossScene -= value;
        }
    }
}