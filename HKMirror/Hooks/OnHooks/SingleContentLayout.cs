using Modding.Menu;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SingleContentLayout class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSingleContentLayout
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Position()
        {
            if (!HookedList.Contains("get_Position"))
            {
                HookedList.Add("get_Position");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "get_Position"), get_Position);
            }
        }

        internal static event Delegates.get_Position_BeforeArgs _beforeget_Position;
        internal static event Delegates.get_Position_AfterArgs _afterget_Position;

        private static AnchoredPosition get_Position(Func<SingleContentLayout, AnchoredPosition> orig,
            SingleContentLayout self)
        {
            Delegates.Params_get_Position @params = new()
            {
                self = self
            };
            if (_beforeget_Position != null)
                foreach (Delegates.get_Position_BeforeArgs toInvoke in _beforeget_Position.GetInvocationList())
                    try
                    {
                        _beforeget_Position?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Position != null)
                foreach (Delegates.get_Position_AfterArgs toInvoke in _afterget_Position.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Position.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Position()
        {
            if (!HookedList.Contains("set_Position"))
            {
                HookedList.Add("set_Position");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "set_Position"), set_Position);
            }
        }

        internal static event Delegates.set_Position_BeforeArgs _beforeset_Position;
        internal static event Delegates.set_Position_AfterArgs _afterset_Position;

        private static void set_Position(Action<SingleContentLayout, AnchoredPosition> orig, SingleContentLayout self,
            AnchoredPosition value)
        {
            Delegates.Params_set_Position @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Position != null)
                foreach (Delegates.set_Position_BeforeArgs toInvoke in _beforeset_Position.GetInvocationList())
                    try
                    {
                        _beforeset_Position?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Position != null)
                foreach (Delegates.set_Position_AfterArgs toInvoke in _afterset_Position.GetInvocationList())
                    try
                    {
                        _afterset_Position.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookModifyNext()
        {
            if (!HookedList.Contains("ModifyNext"))
            {
                HookedList.Add("ModifyNext");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "ModifyNext"), ModifyNext);
            }
        }

        internal static event Delegates.ModifyNext_BeforeArgs _beforeModifyNext;
        internal static event Delegates.ModifyNext_AfterArgs _afterModifyNext;

        private static void ModifyNext(Action<SingleContentLayout, RectTransform> orig, SingleContentLayout self,
            RectTransform rt)
        {
            Delegates.Params_ModifyNext @params = new()
            {
                self = self, rt = rt
            };
            if (_beforeModifyNext != null)
                foreach (Delegates.ModifyNext_BeforeArgs toInvoke in _beforeModifyNext.GetInvocationList())
                    try
                    {
                        _beforeModifyNext?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            rt = @params.rt;
            orig(self, rt);
            if (_afterModifyNext != null)
                foreach (Delegates.ModifyNext_AfterArgs toInvoke in _afterModifyNext.GetInvocationList())
                    try
                    {
                        _afterModifyNext.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate AnchoredPosition get_Position_AfterArgs(Params_get_Position args, AnchoredPosition ret);

        public delegate void get_Position_BeforeArgs(Params_get_Position args);

        public delegate AnchoredPosition get_Position_WithArgs(Func<SingleContentLayout, AnchoredPosition> orig,
            SingleContentLayout self);

        public delegate void ModifyNext_AfterArgs(Params_ModifyNext args);

        public delegate void ModifyNext_BeforeArgs(Params_ModifyNext args);

        public delegate void ModifyNext_WithArgs(Action<SingleContentLayout, RectTransform> orig,
            SingleContentLayout self, RectTransform rt);

        public delegate void set_Position_AfterArgs(Params_set_Position args);

        public delegate void set_Position_BeforeArgs(Params_set_Position args);

        public delegate void set_Position_WithArgs(Action<SingleContentLayout, AnchoredPosition> orig,
            SingleContentLayout self, AnchoredPosition value);

        public sealed class Params_get_Position
        {
            public SingleContentLayout self;
        }

        public sealed class Params_set_Position
        {
            public SingleContentLayout self;
            public AnchoredPosition value;
        }

        public sealed class Params_ModifyNext
        {
            public RectTransform rt;
            public SingleContentLayout self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Position_BeforeArgs get_Position
        {
            add
            {
                HookHandler._beforeget_Position += value;
                HookHandler.Hookget_Position();
            }
            remove => HookHandler._beforeget_Position -= value;
        }

        public static event Delegates.set_Position_BeforeArgs set_Position
        {
            add
            {
                HookHandler._beforeset_Position += value;
                HookHandler.Hookset_Position();
            }
            remove => HookHandler._beforeset_Position -= value;
        }

        public static event Delegates.ModifyNext_BeforeArgs ModifyNext
        {
            add
            {
                HookHandler._beforeModifyNext += value;
                HookHandler.HookModifyNext();
            }
            remove => HookHandler._beforeModifyNext -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Position_AfterArgs get_Position
        {
            add
            {
                HookHandler._afterget_Position += value;
                HookHandler.Hookget_Position();
            }
            remove => HookHandler._afterget_Position -= value;
        }

        public static event Delegates.set_Position_AfterArgs set_Position
        {
            add
            {
                HookHandler._afterset_Position += value;
                HookHandler.Hookset_Position();
            }
            remove => HookHandler._afterset_Position -= value;
        }

        public static event Delegates.ModifyNext_AfterArgs ModifyNext
        {
            add
            {
                HookHandler._afterModifyNext += value;
                HookHandler.HookModifyNext();
            }
            remove => HookHandler._afterModifyNext -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Position_WithArgs get_Position
        {
            add => HookEndpointManager.Add<Delegates.get_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "get_Position"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "get_Position"), value);
        }

        public static event Delegates.set_Position_WithArgs set_Position
        {
            add => HookEndpointManager.Add<Delegates.set_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "set_Position"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "set_Position"), value);
        }

        public static event Delegates.ModifyNext_WithArgs ModifyNext
        {
            add => HookEndpointManager.Add<Delegates.ModifyNext_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "ModifyNext"), value);
            remove => HookEndpointManager.Remove<Delegates.ModifyNext_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SingleContentLayout), "ModifyNext"), value);
        }
    }
}