using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for CharmItem class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCharmItem
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookGetListNumber()
        {
            if (!HookedList.Contains("GetListNumber"))
            {
                HookedList.Add("GetListNumber");
                On.CharmItem.GetListNumber += GetListNumber;
            }
        }

        internal static event Delegates.GetListNumber_BeforeArgs _beforeGetListNumber;
        internal static event Delegates.GetListNumber_AfterArgs _afterGetListNumber;

        private static int GetListNumber(On.CharmItem.orig_GetListNumber orig, CharmItem self)
        {
            Delegates.Params_GetListNumber @params = new()
            {
                self = self
            };
            if (_beforeGetListNumber != null)
            {
                foreach (Delegates.GetListNumber_BeforeArgs toInvoke in _beforeGetListNumber.GetInvocationList())
                {
                    try
                    {
                        _beforeGetListNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetListNumber != null)
            {
                foreach (Delegates.GetListNumber_AfterArgs toInvoke in _afterGetListNumber.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetListNumber.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetListNumber()
        {
            if (!HookedList.Contains("SetListNumber"))
            {
                HookedList.Add("SetListNumber");
                On.CharmItem.SetListNumber += SetListNumber;
            }
        }

        internal static event Delegates.SetListNumber_BeforeArgs _beforeSetListNumber;
        internal static event Delegates.SetListNumber_AfterArgs _afterSetListNumber;

        private static void SetListNumber(On.CharmItem.orig_SetListNumber orig, CharmItem self, int newNumber)
        {
            Delegates.Params_SetListNumber @params = new()
            {
                self = self, newNumber = newNumber
            };
            if (_beforeSetListNumber != null)
            {
                foreach (Delegates.SetListNumber_BeforeArgs toInvoke in _beforeSetListNumber.GetInvocationList())
                {
                    try
                    {
                        _beforeSetListNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            newNumber = @params.newNumber;
            orig(self, newNumber);
            if (_afterSetListNumber != null)
            {
                foreach (Delegates.SetListNumber_AfterArgs toInvoke in _afterSetListNumber.GetInvocationList())
                {
                    try
                    {
                        _afterSetListNumber.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_GetListNumber
        {
            public CharmItem self;
        }

        public delegate void GetListNumber_BeforeArgs(Params_GetListNumber args);

        public delegate int GetListNumber_AfterArgs(Params_GetListNumber args, int ret);

        public delegate int GetListNumber_WithArgs(Func<CharmItem, int> orig, CharmItem self);

        public sealed class Params_SetListNumber
        {
            public CharmItem self;
            public int newNumber;
        }

        public delegate void SetListNumber_BeforeArgs(Params_SetListNumber args);

        public delegate void SetListNumber_AfterArgs(Params_SetListNumber args);

        public delegate void SetListNumber_WithArgs(Action<CharmItem, int> orig, CharmItem self, int newNumber);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetListNumber_BeforeArgs GetListNumber
        {
            add
            {
                HookHandler._beforeGetListNumber += value;
                HookHandler.HookGetListNumber();
            }
            remove => HookHandler._beforeGetListNumber -= value;
        }

        public static event Delegates.SetListNumber_BeforeArgs SetListNumber
        {
            add
            {
                HookHandler._beforeSetListNumber += value;
                HookHandler.HookSetListNumber();
            }
            remove => HookHandler._beforeSetListNumber -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetListNumber_AfterArgs GetListNumber
        {
            add
            {
                HookHandler._afterGetListNumber += value;
                HookHandler.HookGetListNumber();
            }
            remove => HookHandler._afterGetListNumber -= value;
        }

        public static event Delegates.SetListNumber_AfterArgs SetListNumber
        {
            add
            {
                HookHandler._afterSetListNumber += value;
                HookHandler.HookSetListNumber();
            }
            remove => HookHandler._afterSetListNumber -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CharmItem.hook_GetListNumber GetListNumber
        {
            add => On.CharmItem.GetListNumber += value;
            remove => On.CharmItem.GetListNumber -= value;
        }

        public static event On.CharmItem.hook_SetListNumber SetListNumber
        {
            add => On.CharmItem.SetListNumber += value;
            remove => On.CharmItem.SetListNumber -= value;
        }
    }
}