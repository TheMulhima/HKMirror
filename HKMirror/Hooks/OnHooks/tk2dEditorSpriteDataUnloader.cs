using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for tk2dEditorSpriteDataUnloader class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dEditorSpriteDataUnloader
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookRegister()
        {
            if (!HookedList.Contains("Register"))
            {
                HookedList.Add("Register");
                On.tk2dEditorSpriteDataUnloader.Register += Register;
            }
        }

        internal static event Delegates.Register_BeforeArgs _beforeRegister;
        internal static event Delegates.Register_AfterArgs _afterRegister;

        private static void Register(On.tk2dEditorSpriteDataUnloader.orig_Register orig, tk2dSpriteCollectionData data)
        {
            Delegates.Params_Register @params = new()
            {
                data = data
            };
            if (_beforeRegister != null)
            {
                foreach (Delegates.Register_BeforeArgs toInvoke in _beforeRegister.GetInvocationList())
                {
                    try
                    {
                        _beforeRegister?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            data = @params.data;
            orig(data);
            if (_afterRegister != null)
            {
                foreach (Delegates.Register_AfterArgs toInvoke in _afterRegister.GetInvocationList())
                {
                    try
                    {
                        _afterRegister.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUnregister()
        {
            if (!HookedList.Contains("Unregister"))
            {
                HookedList.Add("Unregister");
                On.tk2dEditorSpriteDataUnloader.Unregister += Unregister;
            }
        }

        internal static event Delegates.Unregister_BeforeArgs _beforeUnregister;
        internal static event Delegates.Unregister_AfterArgs _afterUnregister;

        private static void Unregister(On.tk2dEditorSpriteDataUnloader.orig_Unregister orig,
            tk2dSpriteCollectionData data)
        {
            Delegates.Params_Unregister @params = new()
            {
                data = data
            };
            if (_beforeUnregister != null)
            {
                foreach (Delegates.Unregister_BeforeArgs toInvoke in _beforeUnregister.GetInvocationList())
                {
                    try
                    {
                        _beforeUnregister?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            data = @params.data;
            orig(data);
            if (_afterUnregister != null)
            {
                foreach (Delegates.Unregister_AfterArgs toInvoke in _afterUnregister.GetInvocationList())
                {
                    try
                    {
                        _afterUnregister.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Register
        {
            public tk2dSpriteCollectionData data;
        }

        public delegate void Register_BeforeArgs(Params_Register args);

        public delegate void Register_AfterArgs(Params_Register args);

        public delegate void Register_WithArgs(Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData data);

        public sealed class Params_Unregister
        {
            public tk2dSpriteCollectionData data;
        }

        public delegate void Unregister_BeforeArgs(Params_Unregister args);

        public delegate void Unregister_AfterArgs(Params_Unregister args);

        public delegate void Unregister_WithArgs(Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData data);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Register_BeforeArgs Register
        {
            add
            {
                HookHandler._beforeRegister += value;
                HookHandler.HookRegister();
            }
            remove => HookHandler._beforeRegister -= value;
        }

        public static event Delegates.Unregister_BeforeArgs Unregister
        {
            add
            {
                HookHandler._beforeUnregister += value;
                HookHandler.HookUnregister();
            }
            remove => HookHandler._beforeUnregister -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Register_AfterArgs Register
        {
            add
            {
                HookHandler._afterRegister += value;
                HookHandler.HookRegister();
            }
            remove => HookHandler._afterRegister -= value;
        }

        public static event Delegates.Unregister_AfterArgs Unregister
        {
            add
            {
                HookHandler._afterUnregister += value;
                HookHandler.HookUnregister();
            }
            remove => HookHandler._afterUnregister -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dEditorSpriteDataUnloader.hook_Register Register
        {
            add => On.tk2dEditorSpriteDataUnloader.Register += value;
            remove => On.tk2dEditorSpriteDataUnloader.Register -= value;
        }

        public static event On.tk2dEditorSpriteDataUnloader.hook_Unregister Unregister
        {
            add => On.tk2dEditorSpriteDataUnloader.Unregister += value;
            remove => On.tk2dEditorSpriteDataUnloader.Unregister -= value;
        }
    }
}