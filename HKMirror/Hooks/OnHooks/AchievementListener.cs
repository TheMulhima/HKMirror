using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for AchievementListener class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAchievementListener
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.AchievementListener.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.AchievementListener.orig_OnEnable orig,AchievementListener self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.AchievementListener.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.AchievementListener.orig_OnDisable orig,AchievementListener self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCaptureAchievementEvent()
{
if (!HookedList.Contains("CaptureAchievementEvent"))
{
HookedList.Add("CaptureAchievementEvent");
On.AchievementListener.CaptureAchievementEvent += CaptureAchievementEvent;

}
}
internal static event Delegates.CaptureAchievementEvent_BeforeArgs _beforeCaptureAchievementEvent;
internal static event Delegates.CaptureAchievementEvent_AfterArgs _afterCaptureAchievementEvent;
private static void CaptureAchievementEvent(On.AchievementListener.orig_CaptureAchievementEvent orig,AchievementListener self,  string achievementKey)
{
Delegates.Params_CaptureAchievementEvent @params = new() 
{
self = self
, achievementKey = achievementKey
};
if (_beforeCaptureAchievementEvent != null)
{
foreach (Delegates.CaptureAchievementEvent_BeforeArgs toInvoke in _beforeCaptureAchievementEvent.GetInvocationList())
{
try
{
_beforeCaptureAchievementEvent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
achievementKey = @params.achievementKey;
orig(self, achievementKey);
if (_afterCaptureAchievementEvent != null)
{
foreach (Delegates.CaptureAchievementEvent_AfterArgs toInvoke in _afterCaptureAchievementEvent.GetInvocationList())
{
try
{
_afterCaptureAchievementEvent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnEnable
{
public AchievementListener self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<AchievementListener> orig, AchievementListener self);
public sealed class Params_OnDisable
{
public AchievementListener self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<AchievementListener> orig, AchievementListener self);
public sealed class Params_CaptureAchievementEvent
{
public AchievementListener self;
public string achievementKey;
}
public delegate void CaptureAchievementEvent_BeforeArgs(Params_CaptureAchievementEvent args);
public delegate void CaptureAchievementEvent_AfterArgs(Params_CaptureAchievementEvent args);
public delegate void CaptureAchievementEvent_WithArgs (Action<AchievementListener,  string> orig, AchievementListener self,  string achievementKey);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.CaptureAchievementEvent_BeforeArgs CaptureAchievementEvent
{
add
{

HookHandler._beforeCaptureAchievementEvent += value;
HookHandler.HookCaptureAchievementEvent();
}
remove => HookHandler._beforeCaptureAchievementEvent -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.CaptureAchievementEvent_AfterArgs CaptureAchievementEvent
{
add
{

HookHandler._afterCaptureAchievementEvent += value;
HookHandler.HookCaptureAchievementEvent();
}
remove => HookHandler._afterCaptureAchievementEvent -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.AchievementListener.hook_OnEnable OnEnable
{
add => On.AchievementListener.OnEnable += value;
remove => On.AchievementListener.OnEnable -= value;
}
public static event On.AchievementListener.hook_OnDisable OnDisable
{
add => On.AchievementListener.OnDisable += value;
remove => On.AchievementListener.OnDisable -= value;
}
public static event On.AchievementListener.hook_CaptureAchievementEvent CaptureAchievementEvent
{
add => On.AchievementListener.CaptureAchievementEvent += value;
remove => On.AchievementListener.CaptureAchievementEvent -= value;
}
}

}
