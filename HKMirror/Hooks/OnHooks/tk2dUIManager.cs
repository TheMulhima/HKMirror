using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Instance()
        {
            if (!HookedList.Contains("get_Instance"))
            {
                HookedList.Add("get_Instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance", false), get_Instance);
            }
        }

        internal static event Delegates.get_Instance_BeforeArgs _beforeget_Instance;
        internal static event Delegates.get_Instance_NormalArgs _afterget_Instance;

        private static tk2dUIManager get_Instance(Func<tk2dUIManager> orig)
        {
            _beforeget_Instance?.Invoke();
            var retVal = orig();
            if (_afterget_Instance != null) retVal = _afterget_Instance.Invoke();
            return retVal;
        }

        internal static void Hookget_Instance__NoCreate()
        {
            if (!HookedList.Contains("get_Instance__NoCreate"))
            {
                HookedList.Add("get_Instance__NoCreate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance__NoCreate", false),
                    get_Instance__NoCreate);
            }
        }

        internal static event Delegates.get_Instance__NoCreate_BeforeArgs _beforeget_Instance__NoCreate;
        internal static event Delegates.get_Instance__NoCreate_NormalArgs _afterget_Instance__NoCreate;

        private static tk2dUIManager get_Instance__NoCreate(Func<tk2dUIManager> orig)
        {
            _beforeget_Instance__NoCreate?.Invoke();
            var retVal = orig();
            if (_afterget_Instance__NoCreate != null) retVal = _afterget_Instance__NoCreate.Invoke();
            return retVal;
        }

        internal static void Hookget_UICamera()
        {
            if (!HookedList.Contains("get_UICamera"))
            {
                HookedList.Add("get_UICamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UICamera"), get_UICamera);
            }
        }

        internal static event Delegates.get_UICamera_BeforeArgs _beforeget_UICamera;
        internal static event Delegates.get_UICamera_NormalArgs _afterget_UICamera;

        private static Camera get_UICamera(Func<tk2dUIManager, Camera> orig, tk2dUIManager self)
        {
            Delegates.Params_get_UICamera @params = new()
            {
                self = self
            };
            _beforeget_UICamera?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UICamera != null) retVal = _afterget_UICamera.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_UICamera()
        {
            if (!HookedList.Contains("set_UICamera"))
            {
                HookedList.Add("set_UICamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UICamera"), set_UICamera);
            }
        }

        internal static event Delegates.set_UICamera_BeforeArgs _beforeset_UICamera;
        internal static event Delegates.set_UICamera_NormalArgs _afterset_UICamera;

        private static void set_UICamera(Action<tk2dUIManager, Camera> orig, tk2dUIManager self, Camera value)
        {
            Delegates.Params_set_UICamera @params = new()
            {
                self = self, value = value
            };
            _beforeset_UICamera?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UICamera != null) _afterset_UICamera.Invoke(@params);
        }

        internal static void HookGetUICameraForControl()
        {
            if (!HookedList.Contains("GetUICameraForControl"))
            {
                HookedList.Add("GetUICameraForControl");
                On.tk2dUIManager.GetUICameraForControl += GetUICameraForControl;
            }
        }

        internal static event Delegates.GetUICameraForControl_BeforeArgs _beforeGetUICameraForControl;
        internal static event Delegates.GetUICameraForControl_NormalArgs _afterGetUICameraForControl;

        private static Camera GetUICameraForControl(On.tk2dUIManager.orig_GetUICameraForControl orig,
            tk2dUIManager self, GameObject go)
        {
            Delegates.Params_GetUICameraForControl @params = new()
            {
                self = self, go = go
            };
            _beforeGetUICameraForControl?.Invoke(@params);
            self = @params.self;
            go = @params.go;
            var retVal = orig(self, go);
            if (_afterGetUICameraForControl != null) retVal = _afterGetUICameraForControl.Invoke(@params);
            return retVal;
        }

        internal static void HookRegisterCamera()
        {
            if (!HookedList.Contains("RegisterCamera"))
            {
                HookedList.Add("RegisterCamera");
                On.tk2dUIManager.RegisterCamera += RegisterCamera;
            }
        }

        internal static event Delegates.RegisterCamera_BeforeArgs _beforeRegisterCamera;
        internal static event Delegates.RegisterCamera_NormalArgs _afterRegisterCamera;

        private static void RegisterCamera(On.tk2dUIManager.orig_RegisterCamera orig, tk2dUICamera cam)
        {
            Delegates.Params_RegisterCamera @params = new()
            {
                cam = cam
            };
            _beforeRegisterCamera?.Invoke(@params);
            cam = @params.cam;
            orig(cam);
            if (_afterRegisterCamera != null) _afterRegisterCamera.Invoke(@params);
        }

        internal static void HookUnregisterCamera()
        {
            if (!HookedList.Contains("UnregisterCamera"))
            {
                HookedList.Add("UnregisterCamera");
                On.tk2dUIManager.UnregisterCamera += UnregisterCamera;
            }
        }

        internal static event Delegates.UnregisterCamera_BeforeArgs _beforeUnregisterCamera;
        internal static event Delegates.UnregisterCamera_NormalArgs _afterUnregisterCamera;

        private static void UnregisterCamera(On.tk2dUIManager.orig_UnregisterCamera orig, tk2dUICamera cam)
        {
            Delegates.Params_UnregisterCamera @params = new()
            {
                cam = cam
            };
            _beforeUnregisterCamera?.Invoke(@params);
            cam = @params.cam;
            orig(cam);
            if (_afterUnregisterCamera != null) _afterUnregisterCamera.Invoke(@params);
        }

        internal static void Hookget_InputEnabled()
        {
            if (!HookedList.Contains("get_InputEnabled"))
            {
                HookedList.Add("get_InputEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_InputEnabled"), get_InputEnabled);
            }
        }

        internal static event Delegates.get_InputEnabled_BeforeArgs _beforeget_InputEnabled;
        internal static event Delegates.get_InputEnabled_NormalArgs _afterget_InputEnabled;

        private static bool get_InputEnabled(Func<tk2dUIManager, bool> orig, tk2dUIManager self)
        {
            Delegates.Params_get_InputEnabled @params = new()
            {
                self = self
            };
            _beforeget_InputEnabled?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_InputEnabled != null) retVal = _afterget_InputEnabled.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_InputEnabled()
        {
            if (!HookedList.Contains("set_InputEnabled"))
            {
                HookedList.Add("set_InputEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_InputEnabled"), set_InputEnabled);
            }
        }

        internal static event Delegates.set_InputEnabled_BeforeArgs _beforeset_InputEnabled;
        internal static event Delegates.set_InputEnabled_NormalArgs _afterset_InputEnabled;

        private static void set_InputEnabled(Action<tk2dUIManager, bool> orig, tk2dUIManager self, bool value)
        {
            Delegates.Params_set_InputEnabled @params = new()
            {
                self = self, value = value
            };
            _beforeset_InputEnabled?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_InputEnabled != null) _afterset_InputEnabled.Invoke(@params);
        }

        internal static void Hookget_PressedUIItem()
        {
            if (!HookedList.Contains("get_PressedUIItem"))
            {
                HookedList.Add("get_PressedUIItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItem"), get_PressedUIItem);
            }
        }

        internal static event Delegates.get_PressedUIItem_BeforeArgs _beforeget_PressedUIItem;
        internal static event Delegates.get_PressedUIItem_NormalArgs _afterget_PressedUIItem;

        private static tk2dUIItem get_PressedUIItem(Func<tk2dUIManager, tk2dUIItem> orig, tk2dUIManager self)
        {
            Delegates.Params_get_PressedUIItem @params = new()
            {
                self = self
            };
            _beforeget_PressedUIItem?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PressedUIItem != null) retVal = _afterget_PressedUIItem.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_PressedUIItems()
        {
            if (!HookedList.Contains("get_PressedUIItems"))
            {
                HookedList.Add("get_PressedUIItems");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItems"),
                    get_PressedUIItems);
            }
        }

        internal static event Delegates.get_PressedUIItems_BeforeArgs _beforeget_PressedUIItems;
        internal static event Delegates.get_PressedUIItems_NormalArgs _afterget_PressedUIItems;

        private static tk2dUIItem[] get_PressedUIItems(Func<tk2dUIManager, tk2dUIItem[]> orig, tk2dUIManager self)
        {
            Delegates.Params_get_PressedUIItems @params = new()
            {
                self = self
            };
            _beforeget_PressedUIItems?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PressedUIItems != null) retVal = _afterget_PressedUIItems.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_UseMultiTouch()
        {
            if (!HookedList.Contains("get_UseMultiTouch"))
            {
                HookedList.Add("get_UseMultiTouch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UseMultiTouch"), get_UseMultiTouch);
            }
        }

        internal static event Delegates.get_UseMultiTouch_BeforeArgs _beforeget_UseMultiTouch;
        internal static event Delegates.get_UseMultiTouch_NormalArgs _afterget_UseMultiTouch;

        private static bool get_UseMultiTouch(Func<tk2dUIManager, bool> orig, tk2dUIManager self)
        {
            Delegates.Params_get_UseMultiTouch @params = new()
            {
                self = self
            };
            _beforeget_UseMultiTouch?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UseMultiTouch != null) retVal = _afterget_UseMultiTouch.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_UseMultiTouch()
        {
            if (!HookedList.Contains("set_UseMultiTouch"))
            {
                HookedList.Add("set_UseMultiTouch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UseMultiTouch"), set_UseMultiTouch);
            }
        }

        internal static event Delegates.set_UseMultiTouch_BeforeArgs _beforeset_UseMultiTouch;
        internal static event Delegates.set_UseMultiTouch_NormalArgs _afterset_UseMultiTouch;

        private static void set_UseMultiTouch(Action<tk2dUIManager, bool> orig, tk2dUIManager self, bool value)
        {
            Delegates.Params_set_UseMultiTouch @params = new()
            {
                self = self, value = value
            };
            _beforeset_UseMultiTouch?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UseMultiTouch != null) _afterset_UseMultiTouch.Invoke(@params);
        }

        internal static void HookSortCameras()
        {
            if (!HookedList.Contains("SortCameras"))
            {
                HookedList.Add("SortCameras");
                On.tk2dUIManager.SortCameras += SortCameras;
            }
        }

        internal static event Delegates.SortCameras_BeforeArgs _beforeSortCameras;
        internal static event Delegates.SortCameras_NormalArgs _afterSortCameras;

        private static void SortCameras(On.tk2dUIManager.orig_SortCameras orig, tk2dUIManager self)
        {
            Delegates.Params_SortCameras @params = new()
            {
                self = self
            };
            _beforeSortCameras?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSortCameras != null) _afterSortCameras.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dUIManager.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dUIManager.orig_Awake orig, tk2dUIManager self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookHookUpLegacyCamera()
        {
            if (!HookedList.Contains("HookUpLegacyCamera"))
            {
                HookedList.Add("HookUpLegacyCamera");
                On.tk2dUIManager.HookUpLegacyCamera += HookUpLegacyCamera;
            }
        }

        internal static event Delegates.HookUpLegacyCamera_BeforeArgs _beforeHookUpLegacyCamera;
        internal static event Delegates.HookUpLegacyCamera_NormalArgs _afterHookUpLegacyCamera;

        private static void HookUpLegacyCamera(On.tk2dUIManager.orig_HookUpLegacyCamera orig, tk2dUIManager self,
            Camera cam)
        {
            Delegates.Params_HookUpLegacyCamera @params = new()
            {
                self = self, cam = cam
            };
            _beforeHookUpLegacyCamera?.Invoke(@params);
            self = @params.self;
            cam = @params.cam;
            orig(self, cam);
            if (_afterHookUpLegacyCamera != null) _afterHookUpLegacyCamera.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUIManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.tk2dUIManager.orig_Start orig, tk2dUIManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.tk2dUIManager.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(On.tk2dUIManager.orig_Setup orig, tk2dUIManager self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.tk2dUIManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.tk2dUIManager.orig_Update orig, tk2dUIManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookCheckInputs()
        {
            if (!HookedList.Contains("CheckInputs"))
            {
                HookedList.Add("CheckInputs");
                On.tk2dUIManager.CheckInputs += CheckInputs;
            }
        }

        internal static event Delegates.CheckInputs_BeforeArgs _beforeCheckInputs;
        internal static event Delegates.CheckInputs_NormalArgs _afterCheckInputs;

        private static void CheckInputs(On.tk2dUIManager.orig_CheckInputs orig, tk2dUIManager self)
        {
            Delegates.Params_CheckInputs @params = new()
            {
                self = self
            };
            _beforeCheckInputs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCheckInputs != null) _afterCheckInputs.Invoke(@params);
        }

        internal static void HookCheckMultiTouchInputs()
        {
            if (!HookedList.Contains("CheckMultiTouchInputs"))
            {
                HookedList.Add("CheckMultiTouchInputs");
                On.tk2dUIManager.CheckMultiTouchInputs += CheckMultiTouchInputs;
            }
        }

        internal static event Delegates.CheckMultiTouchInputs_BeforeArgs _beforeCheckMultiTouchInputs;
        internal static event Delegates.CheckMultiTouchInputs_NormalArgs _afterCheckMultiTouchInputs;

        private static void CheckMultiTouchInputs(On.tk2dUIManager.orig_CheckMultiTouchInputs orig, tk2dUIManager self)
        {
            Delegates.Params_CheckMultiTouchInputs @params = new()
            {
                self = self
            };
            _beforeCheckMultiTouchInputs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCheckMultiTouchInputs != null) _afterCheckMultiTouchInputs.Invoke(@params);
        }

        internal static void HookRaycastForUIItem()
        {
            if (!HookedList.Contains("RaycastForUIItem"))
            {
                HookedList.Add("RaycastForUIItem");
                On.tk2dUIManager.RaycastForUIItem += RaycastForUIItem;
            }
        }

        internal static event Delegates.RaycastForUIItem_BeforeArgs _beforeRaycastForUIItem;
        internal static event Delegates.RaycastForUIItem_NormalArgs _afterRaycastForUIItem;

        private static tk2dUIItem RaycastForUIItem(On.tk2dUIManager.orig_RaycastForUIItem orig, tk2dUIManager self,
            Vector2 screenPos)
        {
            Delegates.Params_RaycastForUIItem @params = new()
            {
                self = self, screenPos = screenPos
            };
            _beforeRaycastForUIItem?.Invoke(@params);
            self = @params.self;
            screenPos = @params.screenPos;
            var retVal = orig(self, screenPos);
            if (_afterRaycastForUIItem != null) retVal = _afterRaycastForUIItem.Invoke(@params);
            return retVal;
        }

        internal static void HookOverrideClearAllChildrenPresses()
        {
            if (!HookedList.Contains("OverrideClearAllChildrenPresses"))
            {
                HookedList.Add("OverrideClearAllChildrenPresses");
                On.tk2dUIManager.OverrideClearAllChildrenPresses += OverrideClearAllChildrenPresses;
            }
        }

        internal static event Delegates.OverrideClearAllChildrenPresses_BeforeArgs
            _beforeOverrideClearAllChildrenPresses;

        internal static event Delegates.OverrideClearAllChildrenPresses_NormalArgs
            _afterOverrideClearAllChildrenPresses;

        private static void OverrideClearAllChildrenPresses(On.tk2dUIManager.orig_OverrideClearAllChildrenPresses orig,
            tk2dUIManager self, tk2dUIItem item)
        {
            Delegates.Params_OverrideClearAllChildrenPresses @params = new()
            {
                self = self, item = item
            };
            _beforeOverrideClearAllChildrenPresses?.Invoke(@params);
            self = @params.self;
            item = @params.item;
            orig(self, item);
            if (_afterOverrideClearAllChildrenPresses != null) _afterOverrideClearAllChildrenPresses.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CheckInputs_BeforeArgs(Params_CheckInputs args);

        public delegate void CheckInputs_NormalArgs(Params_CheckInputs args);

        public delegate void CheckMultiTouchInputs_BeforeArgs(Params_CheckMultiTouchInputs args);

        public delegate void CheckMultiTouchInputs_NormalArgs(Params_CheckMultiTouchInputs args);

        public delegate void get_InputEnabled_BeforeArgs(Params_get_InputEnabled args);

        public delegate bool get_InputEnabled_NormalArgs(Params_get_InputEnabled args);

        public delegate void get_Instance__NoCreate_BeforeArgs();

        public delegate tk2dUIManager get_Instance__NoCreate_NormalArgs();

        public delegate void get_Instance_BeforeArgs();

        public delegate tk2dUIManager get_Instance_NormalArgs();

        public delegate void get_PressedUIItem_BeforeArgs(Params_get_PressedUIItem args);

        public delegate tk2dUIItem get_PressedUIItem_NormalArgs(Params_get_PressedUIItem args);

        public delegate void get_PressedUIItems_BeforeArgs(Params_get_PressedUIItems args);

        public delegate tk2dUIItem[] get_PressedUIItems_NormalArgs(Params_get_PressedUIItems args);

        public delegate void get_UICamera_BeforeArgs(Params_get_UICamera args);

        public delegate Camera get_UICamera_NormalArgs(Params_get_UICamera args);

        public delegate void get_UseMultiTouch_BeforeArgs(Params_get_UseMultiTouch args);

        public delegate bool get_UseMultiTouch_NormalArgs(Params_get_UseMultiTouch args);

        public delegate void GetUICameraForControl_BeforeArgs(Params_GetUICameraForControl args);

        public delegate Camera GetUICameraForControl_NormalArgs(Params_GetUICameraForControl args);

        public delegate void HookUpLegacyCamera_BeforeArgs(Params_HookUpLegacyCamera args);

        public delegate void HookUpLegacyCamera_NormalArgs(Params_HookUpLegacyCamera args);

        public delegate void OverrideClearAllChildrenPresses_BeforeArgs(Params_OverrideClearAllChildrenPresses args);

        public delegate void OverrideClearAllChildrenPresses_NormalArgs(Params_OverrideClearAllChildrenPresses args);

        public delegate void RaycastForUIItem_BeforeArgs(Params_RaycastForUIItem args);

        public delegate tk2dUIItem RaycastForUIItem_NormalArgs(Params_RaycastForUIItem args);

        public delegate void RegisterCamera_BeforeArgs(Params_RegisterCamera args);

        public delegate void RegisterCamera_NormalArgs(Params_RegisterCamera args);

        public delegate void set_InputEnabled_BeforeArgs(Params_set_InputEnabled args);

        public delegate void set_InputEnabled_NormalArgs(Params_set_InputEnabled args);

        public delegate void set_UICamera_BeforeArgs(Params_set_UICamera args);

        public delegate void set_UICamera_NormalArgs(Params_set_UICamera args);

        public delegate void set_UseMultiTouch_BeforeArgs(Params_set_UseMultiTouch args);

        public delegate void set_UseMultiTouch_NormalArgs(Params_set_UseMultiTouch args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void SortCameras_BeforeArgs(Params_SortCameras args);

        public delegate void SortCameras_NormalArgs(Params_SortCameras args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UnregisterCamera_BeforeArgs(Params_UnregisterCamera args);

        public delegate void UnregisterCamera_NormalArgs(Params_UnregisterCamera args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_get_UICamera
        {
            public tk2dUIManager self;
        }

        public sealed class Params_set_UICamera
        {
            public tk2dUIManager self;
            public Camera value;
        }

        public sealed class Params_GetUICameraForControl
        {
            public GameObject go;
            public tk2dUIManager self;
        }

        public sealed class Params_RegisterCamera
        {
            public tk2dUICamera cam;
        }

        public sealed class Params_UnregisterCamera
        {
            public tk2dUICamera cam;
        }

        public sealed class Params_get_InputEnabled
        {
            public tk2dUIManager self;
        }

        public sealed class Params_set_InputEnabled
        {
            public tk2dUIManager self;
            public bool value;
        }

        public sealed class Params_get_PressedUIItem
        {
            public tk2dUIManager self;
        }

        public sealed class Params_get_PressedUIItems
        {
            public tk2dUIManager self;
        }

        public sealed class Params_get_UseMultiTouch
        {
            public tk2dUIManager self;
        }

        public sealed class Params_set_UseMultiTouch
        {
            public tk2dUIManager self;
            public bool value;
        }

        public sealed class Params_SortCameras
        {
            public tk2dUIManager self;
        }

        public sealed class Params_Awake
        {
            public tk2dUIManager self;
        }

        public sealed class Params_HookUpLegacyCamera
        {
            public Camera cam;
            public tk2dUIManager self;
        }

        public sealed class Params_Start
        {
            public tk2dUIManager self;
        }

        public sealed class Params_Setup
        {
            public tk2dUIManager self;
        }

        public sealed class Params_Update
        {
            public tk2dUIManager self;
        }

        public sealed class Params_CheckInputs
        {
            public tk2dUIManager self;
        }

        public sealed class Params_CheckMultiTouchInputs
        {
            public tk2dUIManager self;
        }

        public sealed class Params_RaycastForUIItem
        {
            public Vector2 screenPos;
            public tk2dUIManager self;
        }

        public sealed class Params_OverrideClearAllChildrenPresses
        {
            public tk2dUIItem item;
            public tk2dUIManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Instance_BeforeArgs get_Instance
        {
            add
            {
                HookHandler._beforeget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._beforeget_Instance -= value;
        }

        public static event Delegates.get_Instance__NoCreate_BeforeArgs get_Instance__NoCreate
        {
            add
            {
                HookHandler._beforeget_Instance__NoCreate += value;
                HookHandler.Hookget_Instance__NoCreate();
            }
            remove => HookHandler._beforeget_Instance__NoCreate -= value;
        }

        public static event Delegates.get_UICamera_BeforeArgs get_UICamera
        {
            add
            {
                HookHandler._beforeget_UICamera += value;
                HookHandler.Hookget_UICamera();
            }
            remove => HookHandler._beforeget_UICamera -= value;
        }

        public static event Delegates.set_UICamera_BeforeArgs set_UICamera
        {
            add
            {
                HookHandler._beforeset_UICamera += value;
                HookHandler.Hookset_UICamera();
            }
            remove => HookHandler._beforeset_UICamera -= value;
        }

        public static event Delegates.GetUICameraForControl_BeforeArgs GetUICameraForControl
        {
            add
            {
                HookHandler._beforeGetUICameraForControl += value;
                HookHandler.HookGetUICameraForControl();
            }
            remove => HookHandler._beforeGetUICameraForControl -= value;
        }

        public static event Delegates.RegisterCamera_BeforeArgs RegisterCamera
        {
            add
            {
                HookHandler._beforeRegisterCamera += value;
                HookHandler.HookRegisterCamera();
            }
            remove => HookHandler._beforeRegisterCamera -= value;
        }

        public static event Delegates.UnregisterCamera_BeforeArgs UnregisterCamera
        {
            add
            {
                HookHandler._beforeUnregisterCamera += value;
                HookHandler.HookUnregisterCamera();
            }
            remove => HookHandler._beforeUnregisterCamera -= value;
        }

        public static event Delegates.get_InputEnabled_BeforeArgs get_InputEnabled
        {
            add
            {
                HookHandler._beforeget_InputEnabled += value;
                HookHandler.Hookget_InputEnabled();
            }
            remove => HookHandler._beforeget_InputEnabled -= value;
        }

        public static event Delegates.set_InputEnabled_BeforeArgs set_InputEnabled
        {
            add
            {
                HookHandler._beforeset_InputEnabled += value;
                HookHandler.Hookset_InputEnabled();
            }
            remove => HookHandler._beforeset_InputEnabled -= value;
        }

        public static event Delegates.get_PressedUIItem_BeforeArgs get_PressedUIItem
        {
            add
            {
                HookHandler._beforeget_PressedUIItem += value;
                HookHandler.Hookget_PressedUIItem();
            }
            remove => HookHandler._beforeget_PressedUIItem -= value;
        }

        public static event Delegates.get_PressedUIItems_BeforeArgs get_PressedUIItems
        {
            add
            {
                HookHandler._beforeget_PressedUIItems += value;
                HookHandler.Hookget_PressedUIItems();
            }
            remove => HookHandler._beforeget_PressedUIItems -= value;
        }

        public static event Delegates.get_UseMultiTouch_BeforeArgs get_UseMultiTouch
        {
            add
            {
                HookHandler._beforeget_UseMultiTouch += value;
                HookHandler.Hookget_UseMultiTouch();
            }
            remove => HookHandler._beforeget_UseMultiTouch -= value;
        }

        public static event Delegates.set_UseMultiTouch_BeforeArgs set_UseMultiTouch
        {
            add
            {
                HookHandler._beforeset_UseMultiTouch += value;
                HookHandler.Hookset_UseMultiTouch();
            }
            remove => HookHandler._beforeset_UseMultiTouch -= value;
        }

        public static event Delegates.SortCameras_BeforeArgs SortCameras
        {
            add
            {
                HookHandler._beforeSortCameras += value;
                HookHandler.HookSortCameras();
            }
            remove => HookHandler._beforeSortCameras -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.HookUpLegacyCamera_BeforeArgs HookUpLegacyCamera
        {
            add
            {
                HookHandler._beforeHookUpLegacyCamera += value;
                HookHandler.HookHookUpLegacyCamera();
            }
            remove => HookHandler._beforeHookUpLegacyCamera -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.CheckInputs_BeforeArgs CheckInputs
        {
            add
            {
                HookHandler._beforeCheckInputs += value;
                HookHandler.HookCheckInputs();
            }
            remove => HookHandler._beforeCheckInputs -= value;
        }

        public static event Delegates.CheckMultiTouchInputs_BeforeArgs CheckMultiTouchInputs
        {
            add
            {
                HookHandler._beforeCheckMultiTouchInputs += value;
                HookHandler.HookCheckMultiTouchInputs();
            }
            remove => HookHandler._beforeCheckMultiTouchInputs -= value;
        }

        public static event Delegates.RaycastForUIItem_BeforeArgs RaycastForUIItem
        {
            add
            {
                HookHandler._beforeRaycastForUIItem += value;
                HookHandler.HookRaycastForUIItem();
            }
            remove => HookHandler._beforeRaycastForUIItem -= value;
        }

        public static event Delegates.OverrideClearAllChildrenPresses_BeforeArgs OverrideClearAllChildrenPresses
        {
            add
            {
                HookHandler._beforeOverrideClearAllChildrenPresses += value;
                HookHandler.HookOverrideClearAllChildrenPresses();
            }
            remove => HookHandler._beforeOverrideClearAllChildrenPresses -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Instance_NormalArgs get_Instance
        {
            add
            {
                HookHandler._afterget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._afterget_Instance -= value;
        }

        public static event Delegates.get_Instance__NoCreate_NormalArgs get_Instance__NoCreate
        {
            add
            {
                HookHandler._afterget_Instance__NoCreate += value;
                HookHandler.Hookget_Instance__NoCreate();
            }
            remove => HookHandler._afterget_Instance__NoCreate -= value;
        }

        public static event Delegates.get_UICamera_NormalArgs get_UICamera
        {
            add
            {
                HookHandler._afterget_UICamera += value;
                HookHandler.Hookget_UICamera();
            }
            remove => HookHandler._afterget_UICamera -= value;
        }

        public static event Delegates.set_UICamera_NormalArgs set_UICamera
        {
            add
            {
                HookHandler._afterset_UICamera += value;
                HookHandler.Hookset_UICamera();
            }
            remove => HookHandler._afterset_UICamera -= value;
        }

        public static event Delegates.GetUICameraForControl_NormalArgs GetUICameraForControl
        {
            add
            {
                HookHandler._afterGetUICameraForControl += value;
                HookHandler.HookGetUICameraForControl();
            }
            remove => HookHandler._afterGetUICameraForControl -= value;
        }

        public static event Delegates.RegisterCamera_NormalArgs RegisterCamera
        {
            add
            {
                HookHandler._afterRegisterCamera += value;
                HookHandler.HookRegisterCamera();
            }
            remove => HookHandler._afterRegisterCamera -= value;
        }

        public static event Delegates.UnregisterCamera_NormalArgs UnregisterCamera
        {
            add
            {
                HookHandler._afterUnregisterCamera += value;
                HookHandler.HookUnregisterCamera();
            }
            remove => HookHandler._afterUnregisterCamera -= value;
        }

        public static event Delegates.get_InputEnabled_NormalArgs get_InputEnabled
        {
            add
            {
                HookHandler._afterget_InputEnabled += value;
                HookHandler.Hookget_InputEnabled();
            }
            remove => HookHandler._afterget_InputEnabled -= value;
        }

        public static event Delegates.set_InputEnabled_NormalArgs set_InputEnabled
        {
            add
            {
                HookHandler._afterset_InputEnabled += value;
                HookHandler.Hookset_InputEnabled();
            }
            remove => HookHandler._afterset_InputEnabled -= value;
        }

        public static event Delegates.get_PressedUIItem_NormalArgs get_PressedUIItem
        {
            add
            {
                HookHandler._afterget_PressedUIItem += value;
                HookHandler.Hookget_PressedUIItem();
            }
            remove => HookHandler._afterget_PressedUIItem -= value;
        }

        public static event Delegates.get_PressedUIItems_NormalArgs get_PressedUIItems
        {
            add
            {
                HookHandler._afterget_PressedUIItems += value;
                HookHandler.Hookget_PressedUIItems();
            }
            remove => HookHandler._afterget_PressedUIItems -= value;
        }

        public static event Delegates.get_UseMultiTouch_NormalArgs get_UseMultiTouch
        {
            add
            {
                HookHandler._afterget_UseMultiTouch += value;
                HookHandler.Hookget_UseMultiTouch();
            }
            remove => HookHandler._afterget_UseMultiTouch -= value;
        }

        public static event Delegates.set_UseMultiTouch_NormalArgs set_UseMultiTouch
        {
            add
            {
                HookHandler._afterset_UseMultiTouch += value;
                HookHandler.Hookset_UseMultiTouch();
            }
            remove => HookHandler._afterset_UseMultiTouch -= value;
        }

        public static event Delegates.SortCameras_NormalArgs SortCameras
        {
            add
            {
                HookHandler._afterSortCameras += value;
                HookHandler.HookSortCameras();
            }
            remove => HookHandler._afterSortCameras -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.HookUpLegacyCamera_NormalArgs HookUpLegacyCamera
        {
            add
            {
                HookHandler._afterHookUpLegacyCamera += value;
                HookHandler.HookHookUpLegacyCamera();
            }
            remove => HookHandler._afterHookUpLegacyCamera -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.CheckInputs_NormalArgs CheckInputs
        {
            add
            {
                HookHandler._afterCheckInputs += value;
                HookHandler.HookCheckInputs();
            }
            remove => HookHandler._afterCheckInputs -= value;
        }

        public static event Delegates.CheckMultiTouchInputs_NormalArgs CheckMultiTouchInputs
        {
            add
            {
                HookHandler._afterCheckMultiTouchInputs += value;
                HookHandler.HookCheckMultiTouchInputs();
            }
            remove => HookHandler._afterCheckMultiTouchInputs -= value;
        }

        public static event Delegates.RaycastForUIItem_NormalArgs RaycastForUIItem
        {
            add
            {
                HookHandler._afterRaycastForUIItem += value;
                HookHandler.HookRaycastForUIItem();
            }
            remove => HookHandler._afterRaycastForUIItem -= value;
        }

        public static event Delegates.OverrideClearAllChildrenPresses_NormalArgs OverrideClearAllChildrenPresses
        {
            add
            {
                HookHandler._afterOverrideClearAllChildrenPresses += value;
                HookHandler.HookOverrideClearAllChildrenPresses();
            }
            remove => HookHandler._afterOverrideClearAllChildrenPresses -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Instance_NormalArgs get_Instance
        {
            add => HookEndpointManager.Add<Delegates.get_Instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance", false), value);
        }

        public static event Delegates.get_Instance__NoCreate_NormalArgs get_Instance__NoCreate
        {
            add => HookEndpointManager.Add<Delegates.get_Instance__NoCreate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance__NoCreate", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Instance__NoCreate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance__NoCreate", false), value);
        }

        public static event Delegates.get_UICamera_NormalArgs get_UICamera
        {
            add => HookEndpointManager.Add<Delegates.get_UICamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UICamera"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UICamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UICamera"), value);
        }

        public static event Delegates.set_UICamera_NormalArgs set_UICamera
        {
            add => HookEndpointManager.Add<Delegates.set_UICamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UICamera"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UICamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UICamera"), value);
        }

        public static event On.tk2dUIManager.hook_GetUICameraForControl GetUICameraForControl
        {
            add => On.tk2dUIManager.GetUICameraForControl += value;
            remove => On.tk2dUIManager.GetUICameraForControl -= value;
        }

        public static event On.tk2dUIManager.hook_RegisterCamera RegisterCamera
        {
            add => On.tk2dUIManager.RegisterCamera += value;
            remove => On.tk2dUIManager.RegisterCamera -= value;
        }

        public static event On.tk2dUIManager.hook_UnregisterCamera UnregisterCamera
        {
            add => On.tk2dUIManager.UnregisterCamera += value;
            remove => On.tk2dUIManager.UnregisterCamera -= value;
        }

        public static event Delegates.get_InputEnabled_NormalArgs get_InputEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_InputEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_InputEnabled"), value);
            remove => HookEndpointManager.Remove<Delegates.get_InputEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_InputEnabled"), value);
        }

        public static event Delegates.set_InputEnabled_NormalArgs set_InputEnabled
        {
            add => HookEndpointManager.Add<Delegates.set_InputEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_InputEnabled"), value);
            remove => HookEndpointManager.Remove<Delegates.set_InputEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_InputEnabled"), value);
        }

        public static event Delegates.get_PressedUIItem_NormalArgs get_PressedUIItem
        {
            add => HookEndpointManager.Add<Delegates.get_PressedUIItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PressedUIItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItem"), value);
        }

        public static event Delegates.get_PressedUIItems_NormalArgs get_PressedUIItems
        {
            add => HookEndpointManager.Add<Delegates.get_PressedUIItems_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItems"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PressedUIItems_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItems"), value);
        }

        public static event Delegates.get_UseMultiTouch_NormalArgs get_UseMultiTouch
        {
            add => HookEndpointManager.Add<Delegates.get_UseMultiTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UseMultiTouch"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UseMultiTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UseMultiTouch"), value);
        }

        public static event Delegates.set_UseMultiTouch_NormalArgs set_UseMultiTouch
        {
            add => HookEndpointManager.Add<Delegates.set_UseMultiTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UseMultiTouch"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UseMultiTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UseMultiTouch"), value);
        }

        public static event On.tk2dUIManager.hook_SortCameras SortCameras
        {
            add => On.tk2dUIManager.SortCameras += value;
            remove => On.tk2dUIManager.SortCameras -= value;
        }

        public static event On.tk2dUIManager.hook_Awake Awake
        {
            add => On.tk2dUIManager.Awake += value;
            remove => On.tk2dUIManager.Awake -= value;
        }

        public static event On.tk2dUIManager.hook_HookUpLegacyCamera HookUpLegacyCamera
        {
            add => On.tk2dUIManager.HookUpLegacyCamera += value;
            remove => On.tk2dUIManager.HookUpLegacyCamera -= value;
        }

        public static event On.tk2dUIManager.hook_Start Start
        {
            add => On.tk2dUIManager.Start += value;
            remove => On.tk2dUIManager.Start -= value;
        }

        public static event On.tk2dUIManager.hook_Setup Setup
        {
            add => On.tk2dUIManager.Setup += value;
            remove => On.tk2dUIManager.Setup -= value;
        }

        public static event On.tk2dUIManager.hook_Update Update
        {
            add => On.tk2dUIManager.Update += value;
            remove => On.tk2dUIManager.Update -= value;
        }

        public static event On.tk2dUIManager.hook_CheckInputs CheckInputs
        {
            add => On.tk2dUIManager.CheckInputs += value;
            remove => On.tk2dUIManager.CheckInputs -= value;
        }

        public static event On.tk2dUIManager.hook_CheckMultiTouchInputs CheckMultiTouchInputs
        {
            add => On.tk2dUIManager.CheckMultiTouchInputs += value;
            remove => On.tk2dUIManager.CheckMultiTouchInputs -= value;
        }

        public static event On.tk2dUIManager.hook_RaycastForUIItem RaycastForUIItem
        {
            add => On.tk2dUIManager.RaycastForUIItem += value;
            remove => On.tk2dUIManager.RaycastForUIItem -= value;
        }

        public static event On.tk2dUIManager.hook_OverrideClearAllChildrenPresses OverrideClearAllChildrenPresses
        {
            add => On.tk2dUIManager.OverrideClearAllChildrenPresses += value;
            remove => On.tk2dUIManager.OverrideClearAllChildrenPresses -= value;
        }
    }
}