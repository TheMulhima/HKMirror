using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for tk2dUIManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIManager
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_Instance()
{
if (!HookedList.Contains("get_Instance"))
{
HookedList.Add("get_Instance");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance", false), get_Instance);

}
}
internal static event Delegates.get_Instance_BeforeArgs _beforeget_Instance;
internal static event Delegates.get_Instance_AfterArgs _afterget_Instance;
private static tk2dUIManager get_Instance(Func<tk2dUIManager> orig)
{
if (_beforeget_Instance != null)
{
foreach (Delegates.get_Instance_BeforeArgs toInvoke in _beforeget_Instance.GetInvocationList())
{
try
{
_beforeget_Instance?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_Instance != null)
{
foreach (Delegates.get_Instance_AfterArgs toInvoke in _afterget_Instance.GetInvocationList())
{
try
{
retVal = _afterget_Instance.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_Instance__NoCreate()
{
if (!HookedList.Contains("get_Instance__NoCreate"))
{
HookedList.Add("get_Instance__NoCreate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance__NoCreate", false), get_Instance__NoCreate);

}
}
internal static event Delegates.get_Instance__NoCreate_BeforeArgs _beforeget_Instance__NoCreate;
internal static event Delegates.get_Instance__NoCreate_AfterArgs _afterget_Instance__NoCreate;
private static tk2dUIManager get_Instance__NoCreate(Func<tk2dUIManager> orig)
{
if (_beforeget_Instance__NoCreate != null)
{
foreach (Delegates.get_Instance__NoCreate_BeforeArgs toInvoke in _beforeget_Instance__NoCreate.GetInvocationList())
{
try
{
_beforeget_Instance__NoCreate?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_Instance__NoCreate != null)
{
foreach (Delegates.get_Instance__NoCreate_AfterArgs toInvoke in _afterget_Instance__NoCreate.GetInvocationList())
{
try
{
retVal = _afterget_Instance__NoCreate.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_UICamera()
{
if (!HookedList.Contains("get_UICamera"))
{
HookedList.Add("get_UICamera");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UICamera", true), get_UICamera);

}
}
internal static event Delegates.get_UICamera_BeforeArgs _beforeget_UICamera;
internal static event Delegates.get_UICamera_AfterArgs _afterget_UICamera;
private static UnityEngine.Camera get_UICamera(Func<tk2dUIManager, UnityEngine.Camera> orig, tk2dUIManager self)
{
Delegates.Params_get_UICamera @params = new() 
{
self = self
};
if (_beforeget_UICamera != null)
{
foreach (Delegates.get_UICamera_BeforeArgs toInvoke in _beforeget_UICamera.GetInvocationList())
{
try
{
_beforeget_UICamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_UICamera != null)
{
foreach (Delegates.get_UICamera_AfterArgs toInvoke in _afterget_UICamera.GetInvocationList())
{
try
{
retVal = _afterget_UICamera.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_UICamera()
{
if (!HookedList.Contains("set_UICamera"))
{
HookedList.Add("set_UICamera");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UICamera", true), set_UICamera);

}
}
internal static event Delegates.set_UICamera_BeforeArgs _beforeset_UICamera;
internal static event Delegates.set_UICamera_AfterArgs _afterset_UICamera;
private static void set_UICamera(Action<tk2dUIManager,  UnityEngine.Camera> orig, tk2dUIManager self,  UnityEngine.Camera value)
{
Delegates.Params_set_UICamera @params = new() 
{
self = self
, value = value
};
if (_beforeset_UICamera != null)
{
foreach (Delegates.set_UICamera_BeforeArgs toInvoke in _beforeset_UICamera.GetInvocationList())
{
try
{
_beforeset_UICamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_UICamera != null)
{
foreach (Delegates.set_UICamera_AfterArgs toInvoke in _afterset_UICamera.GetInvocationList())
{
try
{
_afterset_UICamera.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetUICameraForControl()
{
if (!HookedList.Contains("GetUICameraForControl"))
{
HookedList.Add("GetUICameraForControl");
On.tk2dUIManager.GetUICameraForControl += GetUICameraForControl;

}
}
internal static event Delegates.GetUICameraForControl_BeforeArgs _beforeGetUICameraForControl;
internal static event Delegates.GetUICameraForControl_AfterArgs _afterGetUICameraForControl;
private static UnityEngine.Camera GetUICameraForControl(On.tk2dUIManager.orig_GetUICameraForControl orig,tk2dUIManager self,  UnityEngine.GameObject go)
{
Delegates.Params_GetUICameraForControl @params = new() 
{
self = self
, go = go
};
if (_beforeGetUICameraForControl != null)
{
foreach (Delegates.GetUICameraForControl_BeforeArgs toInvoke in _beforeGetUICameraForControl.GetInvocationList())
{
try
{
_beforeGetUICameraForControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
go = @params.go;
var retVal = orig(self, go);
if (_afterGetUICameraForControl != null)
{
foreach (Delegates.GetUICameraForControl_AfterArgs toInvoke in _afterGetUICameraForControl.GetInvocationList())
{
try
{
retVal = _afterGetUICameraForControl.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookRegisterCamera()
{
if (!HookedList.Contains("RegisterCamera"))
{
HookedList.Add("RegisterCamera");
On.tk2dUIManager.RegisterCamera += RegisterCamera;

}
}
internal static event Delegates.RegisterCamera_BeforeArgs _beforeRegisterCamera;
internal static event Delegates.RegisterCamera_AfterArgs _afterRegisterCamera;
private static void RegisterCamera(On.tk2dUIManager.orig_RegisterCamera orig, tk2dUICamera cam)
{
Delegates.Params_RegisterCamera @params = new() 
{
cam = cam
};
if (_beforeRegisterCamera != null)
{
foreach (Delegates.RegisterCamera_BeforeArgs toInvoke in _beforeRegisterCamera.GetInvocationList())
{
try
{
_beforeRegisterCamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
cam = @params.cam;
orig(cam);
if (_afterRegisterCamera != null)
{
foreach (Delegates.RegisterCamera_AfterArgs toInvoke in _afterRegisterCamera.GetInvocationList())
{
try
{
_afterRegisterCamera.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUnregisterCamera()
{
if (!HookedList.Contains("UnregisterCamera"))
{
HookedList.Add("UnregisterCamera");
On.tk2dUIManager.UnregisterCamera += UnregisterCamera;

}
}
internal static event Delegates.UnregisterCamera_BeforeArgs _beforeUnregisterCamera;
internal static event Delegates.UnregisterCamera_AfterArgs _afterUnregisterCamera;
private static void UnregisterCamera(On.tk2dUIManager.orig_UnregisterCamera orig, tk2dUICamera cam)
{
Delegates.Params_UnregisterCamera @params = new() 
{
cam = cam
};
if (_beforeUnregisterCamera != null)
{
foreach (Delegates.UnregisterCamera_BeforeArgs toInvoke in _beforeUnregisterCamera.GetInvocationList())
{
try
{
_beforeUnregisterCamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
cam = @params.cam;
orig(cam);
if (_afterUnregisterCamera != null)
{
foreach (Delegates.UnregisterCamera_AfterArgs toInvoke in _afterUnregisterCamera.GetInvocationList())
{
try
{
_afterUnregisterCamera.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_InputEnabled()
{
if (!HookedList.Contains("get_InputEnabled"))
{
HookedList.Add("get_InputEnabled");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_InputEnabled", true), get_InputEnabled);

}
}
internal static event Delegates.get_InputEnabled_BeforeArgs _beforeget_InputEnabled;
internal static event Delegates.get_InputEnabled_AfterArgs _afterget_InputEnabled;
private static bool get_InputEnabled(Func<tk2dUIManager, bool> orig, tk2dUIManager self)
{
Delegates.Params_get_InputEnabled @params = new() 
{
self = self
};
if (_beforeget_InputEnabled != null)
{
foreach (Delegates.get_InputEnabled_BeforeArgs toInvoke in _beforeget_InputEnabled.GetInvocationList())
{
try
{
_beforeget_InputEnabled?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_InputEnabled != null)
{
foreach (Delegates.get_InputEnabled_AfterArgs toInvoke in _afterget_InputEnabled.GetInvocationList())
{
try
{
retVal = _afterget_InputEnabled.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_InputEnabled()
{
if (!HookedList.Contains("set_InputEnabled"))
{
HookedList.Add("set_InputEnabled");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_InputEnabled", true), set_InputEnabled);

}
}
internal static event Delegates.set_InputEnabled_BeforeArgs _beforeset_InputEnabled;
internal static event Delegates.set_InputEnabled_AfterArgs _afterset_InputEnabled;
private static void set_InputEnabled(Action<tk2dUIManager,  bool> orig, tk2dUIManager self,  bool value)
{
Delegates.Params_set_InputEnabled @params = new() 
{
self = self
, value = value
};
if (_beforeset_InputEnabled != null)
{
foreach (Delegates.set_InputEnabled_BeforeArgs toInvoke in _beforeset_InputEnabled.GetInvocationList())
{
try
{
_beforeset_InputEnabled?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_InputEnabled != null)
{
foreach (Delegates.set_InputEnabled_AfterArgs toInvoke in _afterset_InputEnabled.GetInvocationList())
{
try
{
_afterset_InputEnabled.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_PressedUIItem()
{
if (!HookedList.Contains("get_PressedUIItem"))
{
HookedList.Add("get_PressedUIItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItem", true), get_PressedUIItem);

}
}
internal static event Delegates.get_PressedUIItem_BeforeArgs _beforeget_PressedUIItem;
internal static event Delegates.get_PressedUIItem_AfterArgs _afterget_PressedUIItem;
private static tk2dUIItem get_PressedUIItem(Func<tk2dUIManager, tk2dUIItem> orig, tk2dUIManager self)
{
Delegates.Params_get_PressedUIItem @params = new() 
{
self = self
};
if (_beforeget_PressedUIItem != null)
{
foreach (Delegates.get_PressedUIItem_BeforeArgs toInvoke in _beforeget_PressedUIItem.GetInvocationList())
{
try
{
_beforeget_PressedUIItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_PressedUIItem != null)
{
foreach (Delegates.get_PressedUIItem_AfterArgs toInvoke in _afterget_PressedUIItem.GetInvocationList())
{
try
{
retVal = _afterget_PressedUIItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_PressedUIItems()
{
if (!HookedList.Contains("get_PressedUIItems"))
{
HookedList.Add("get_PressedUIItems");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItems", true), get_PressedUIItems);

}
}
internal static event Delegates.get_PressedUIItems_BeforeArgs _beforeget_PressedUIItems;
internal static event Delegates.get_PressedUIItems_AfterArgs _afterget_PressedUIItems;
private static tk2dUIItem[] get_PressedUIItems(Func<tk2dUIManager, tk2dUIItem[]> orig, tk2dUIManager self)
{
Delegates.Params_get_PressedUIItems @params = new() 
{
self = self
};
if (_beforeget_PressedUIItems != null)
{
foreach (Delegates.get_PressedUIItems_BeforeArgs toInvoke in _beforeget_PressedUIItems.GetInvocationList())
{
try
{
_beforeget_PressedUIItems?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_PressedUIItems != null)
{
foreach (Delegates.get_PressedUIItems_AfterArgs toInvoke in _afterget_PressedUIItems.GetInvocationList())
{
try
{
retVal = _afterget_PressedUIItems.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_UseMultiTouch()
{
if (!HookedList.Contains("get_UseMultiTouch"))
{
HookedList.Add("get_UseMultiTouch");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UseMultiTouch", true), get_UseMultiTouch);

}
}
internal static event Delegates.get_UseMultiTouch_BeforeArgs _beforeget_UseMultiTouch;
internal static event Delegates.get_UseMultiTouch_AfterArgs _afterget_UseMultiTouch;
private static bool get_UseMultiTouch(Func<tk2dUIManager, bool> orig, tk2dUIManager self)
{
Delegates.Params_get_UseMultiTouch @params = new() 
{
self = self
};
if (_beforeget_UseMultiTouch != null)
{
foreach (Delegates.get_UseMultiTouch_BeforeArgs toInvoke in _beforeget_UseMultiTouch.GetInvocationList())
{
try
{
_beforeget_UseMultiTouch?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_UseMultiTouch != null)
{
foreach (Delegates.get_UseMultiTouch_AfterArgs toInvoke in _afterget_UseMultiTouch.GetInvocationList())
{
try
{
retVal = _afterget_UseMultiTouch.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_UseMultiTouch()
{
if (!HookedList.Contains("set_UseMultiTouch"))
{
HookedList.Add("set_UseMultiTouch");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UseMultiTouch", true), set_UseMultiTouch);

}
}
internal static event Delegates.set_UseMultiTouch_BeforeArgs _beforeset_UseMultiTouch;
internal static event Delegates.set_UseMultiTouch_AfterArgs _afterset_UseMultiTouch;
private static void set_UseMultiTouch(Action<tk2dUIManager,  bool> orig, tk2dUIManager self,  bool value)
{
Delegates.Params_set_UseMultiTouch @params = new() 
{
self = self
, value = value
};
if (_beforeset_UseMultiTouch != null)
{
foreach (Delegates.set_UseMultiTouch_BeforeArgs toInvoke in _beforeset_UseMultiTouch.GetInvocationList())
{
try
{
_beforeset_UseMultiTouch?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_UseMultiTouch != null)
{
foreach (Delegates.set_UseMultiTouch_AfterArgs toInvoke in _afterset_UseMultiTouch.GetInvocationList())
{
try
{
_afterset_UseMultiTouch.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSortCameras()
{
if (!HookedList.Contains("SortCameras"))
{
HookedList.Add("SortCameras");
On.tk2dUIManager.SortCameras += SortCameras;

}
}
internal static event Delegates.SortCameras_BeforeArgs _beforeSortCameras;
internal static event Delegates.SortCameras_AfterArgs _afterSortCameras;
private static void SortCameras(On.tk2dUIManager.orig_SortCameras orig,tk2dUIManager self)
{
Delegates.Params_SortCameras @params = new() 
{
self = self
};
if (_beforeSortCameras != null)
{
foreach (Delegates.SortCameras_BeforeArgs toInvoke in _beforeSortCameras.GetInvocationList())
{
try
{
_beforeSortCameras?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSortCameras != null)
{
foreach (Delegates.SortCameras_AfterArgs toInvoke in _afterSortCameras.GetInvocationList())
{
try
{
_afterSortCameras.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.tk2dUIManager.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.tk2dUIManager.orig_Awake orig,tk2dUIManager self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookHookUpLegacyCamera()
{
if (!HookedList.Contains("HookUpLegacyCamera"))
{
HookedList.Add("HookUpLegacyCamera");
On.tk2dUIManager.HookUpLegacyCamera += HookUpLegacyCamera;

}
}
internal static event Delegates.HookUpLegacyCamera_BeforeArgs _beforeHookUpLegacyCamera;
internal static event Delegates.HookUpLegacyCamera_AfterArgs _afterHookUpLegacyCamera;
private static void HookUpLegacyCamera(On.tk2dUIManager.orig_HookUpLegacyCamera orig,tk2dUIManager self,  UnityEngine.Camera cam)
{
Delegates.Params_HookUpLegacyCamera @params = new() 
{
self = self
, cam = cam
};
if (_beforeHookUpLegacyCamera != null)
{
foreach (Delegates.HookUpLegacyCamera_BeforeArgs toInvoke in _beforeHookUpLegacyCamera.GetInvocationList())
{
try
{
_beforeHookUpLegacyCamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
cam = @params.cam;
orig(self, cam);
if (_afterHookUpLegacyCamera != null)
{
foreach (Delegates.HookUpLegacyCamera_AfterArgs toInvoke in _afterHookUpLegacyCamera.GetInvocationList())
{
try
{
_afterHookUpLegacyCamera.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.tk2dUIManager.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.tk2dUIManager.orig_Start orig,tk2dUIManager self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetup()
{
if (!HookedList.Contains("Setup"))
{
HookedList.Add("Setup");
On.tk2dUIManager.Setup += Setup;

}
}
internal static event Delegates.Setup_BeforeArgs _beforeSetup;
internal static event Delegates.Setup_AfterArgs _afterSetup;
private static void Setup(On.tk2dUIManager.orig_Setup orig,tk2dUIManager self)
{
Delegates.Params_Setup @params = new() 
{
self = self
};
if (_beforeSetup != null)
{
foreach (Delegates.Setup_BeforeArgs toInvoke in _beforeSetup.GetInvocationList())
{
try
{
_beforeSetup?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetup != null)
{
foreach (Delegates.Setup_AfterArgs toInvoke in _afterSetup.GetInvocationList())
{
try
{
_afterSetup.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.tk2dUIManager.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.tk2dUIManager.orig_Update orig,tk2dUIManager self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCheckInputs()
{
if (!HookedList.Contains("CheckInputs"))
{
HookedList.Add("CheckInputs");
On.tk2dUIManager.CheckInputs += CheckInputs;

}
}
internal static event Delegates.CheckInputs_BeforeArgs _beforeCheckInputs;
internal static event Delegates.CheckInputs_AfterArgs _afterCheckInputs;
private static void CheckInputs(On.tk2dUIManager.orig_CheckInputs orig,tk2dUIManager self)
{
Delegates.Params_CheckInputs @params = new() 
{
self = self
};
if (_beforeCheckInputs != null)
{
foreach (Delegates.CheckInputs_BeforeArgs toInvoke in _beforeCheckInputs.GetInvocationList())
{
try
{
_beforeCheckInputs?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCheckInputs != null)
{
foreach (Delegates.CheckInputs_AfterArgs toInvoke in _afterCheckInputs.GetInvocationList())
{
try
{
_afterCheckInputs.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCheckMultiTouchInputs()
{
if (!HookedList.Contains("CheckMultiTouchInputs"))
{
HookedList.Add("CheckMultiTouchInputs");
On.tk2dUIManager.CheckMultiTouchInputs += CheckMultiTouchInputs;

}
}
internal static event Delegates.CheckMultiTouchInputs_BeforeArgs _beforeCheckMultiTouchInputs;
internal static event Delegates.CheckMultiTouchInputs_AfterArgs _afterCheckMultiTouchInputs;
private static void CheckMultiTouchInputs(On.tk2dUIManager.orig_CheckMultiTouchInputs orig,tk2dUIManager self)
{
Delegates.Params_CheckMultiTouchInputs @params = new() 
{
self = self
};
if (_beforeCheckMultiTouchInputs != null)
{
foreach (Delegates.CheckMultiTouchInputs_BeforeArgs toInvoke in _beforeCheckMultiTouchInputs.GetInvocationList())
{
try
{
_beforeCheckMultiTouchInputs?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCheckMultiTouchInputs != null)
{
foreach (Delegates.CheckMultiTouchInputs_AfterArgs toInvoke in _afterCheckMultiTouchInputs.GetInvocationList())
{
try
{
_afterCheckMultiTouchInputs.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRaycastForUIItem()
{
if (!HookedList.Contains("RaycastForUIItem"))
{
HookedList.Add("RaycastForUIItem");
On.tk2dUIManager.RaycastForUIItem += RaycastForUIItem;

}
}
internal static event Delegates.RaycastForUIItem_BeforeArgs _beforeRaycastForUIItem;
internal static event Delegates.RaycastForUIItem_AfterArgs _afterRaycastForUIItem;
private static tk2dUIItem RaycastForUIItem(On.tk2dUIManager.orig_RaycastForUIItem orig,tk2dUIManager self,  UnityEngine.Vector2 screenPos)
{
Delegates.Params_RaycastForUIItem @params = new() 
{
self = self
, screenPos = screenPos
};
if (_beforeRaycastForUIItem != null)
{
foreach (Delegates.RaycastForUIItem_BeforeArgs toInvoke in _beforeRaycastForUIItem.GetInvocationList())
{
try
{
_beforeRaycastForUIItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
screenPos = @params.screenPos;
var retVal = orig(self, screenPos);
if (_afterRaycastForUIItem != null)
{
foreach (Delegates.RaycastForUIItem_AfterArgs toInvoke in _afterRaycastForUIItem.GetInvocationList())
{
try
{
retVal = _afterRaycastForUIItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOverrideClearAllChildrenPresses()
{
if (!HookedList.Contains("OverrideClearAllChildrenPresses"))
{
HookedList.Add("OverrideClearAllChildrenPresses");
On.tk2dUIManager.OverrideClearAllChildrenPresses += OverrideClearAllChildrenPresses;

}
}
internal static event Delegates.OverrideClearAllChildrenPresses_BeforeArgs _beforeOverrideClearAllChildrenPresses;
internal static event Delegates.OverrideClearAllChildrenPresses_AfterArgs _afterOverrideClearAllChildrenPresses;
private static void OverrideClearAllChildrenPresses(On.tk2dUIManager.orig_OverrideClearAllChildrenPresses orig,tk2dUIManager self,  tk2dUIItem item)
{
Delegates.Params_OverrideClearAllChildrenPresses @params = new() 
{
self = self
, item = item
};
if (_beforeOverrideClearAllChildrenPresses != null)
{
foreach (Delegates.OverrideClearAllChildrenPresses_BeforeArgs toInvoke in _beforeOverrideClearAllChildrenPresses.GetInvocationList())
{
try
{
_beforeOverrideClearAllChildrenPresses?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
item = @params.item;
orig(self, item);
if (_afterOverrideClearAllChildrenPresses != null)
{
foreach (Delegates.OverrideClearAllChildrenPresses_AfterArgs toInvoke in _afterOverrideClearAllChildrenPresses.GetInvocationList())
{
try
{
_afterOverrideClearAllChildrenPresses.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public delegate void get_Instance_BeforeArgs();
public delegate tk2dUIManager get_Instance_AfterArgs(tk2dUIManager ret);
public delegate tk2dUIManager get_Instance_WithArgs (Func<tk2dUIManager> orig);
public delegate void get_Instance__NoCreate_BeforeArgs();
public delegate tk2dUIManager get_Instance__NoCreate_AfterArgs(tk2dUIManager ret);
public delegate tk2dUIManager get_Instance__NoCreate_WithArgs (Func<tk2dUIManager> orig);
public sealed class Params_get_UICamera
{
public tk2dUIManager self;
}
public delegate void get_UICamera_BeforeArgs(Params_get_UICamera args);
public delegate UnityEngine.Camera get_UICamera_AfterArgs(Params_get_UICamera args, UnityEngine.Camera ret);
public delegate UnityEngine.Camera get_UICamera_WithArgs (Func<tk2dUIManager, UnityEngine.Camera> orig, tk2dUIManager self);
public sealed class Params_set_UICamera
{
public tk2dUIManager self;
public UnityEngine.Camera value;
}
public delegate void set_UICamera_BeforeArgs(Params_set_UICamera args);
public delegate void set_UICamera_AfterArgs(Params_set_UICamera args);
public delegate void set_UICamera_WithArgs (Action<tk2dUIManager,  UnityEngine.Camera> orig, tk2dUIManager self,  UnityEngine.Camera value);
public sealed class Params_GetUICameraForControl
{
public tk2dUIManager self;
public UnityEngine.GameObject go;
}
public delegate void GetUICameraForControl_BeforeArgs(Params_GetUICameraForControl args);
public delegate UnityEngine.Camera GetUICameraForControl_AfterArgs(Params_GetUICameraForControl args, UnityEngine.Camera ret);
public delegate UnityEngine.Camera GetUICameraForControl_WithArgs (Func<tk2dUIManager,  UnityEngine.GameObject, UnityEngine.Camera> orig, tk2dUIManager self,  UnityEngine.GameObject go);
public sealed class Params_RegisterCamera
{
public tk2dUICamera cam;
}
public delegate void RegisterCamera_BeforeArgs(Params_RegisterCamera args);
public delegate void RegisterCamera_AfterArgs(Params_RegisterCamera args);
public delegate void RegisterCamera_WithArgs (Action< tk2dUICamera> orig,  tk2dUICamera cam);
public sealed class Params_UnregisterCamera
{
public tk2dUICamera cam;
}
public delegate void UnregisterCamera_BeforeArgs(Params_UnregisterCamera args);
public delegate void UnregisterCamera_AfterArgs(Params_UnregisterCamera args);
public delegate void UnregisterCamera_WithArgs (Action< tk2dUICamera> orig,  tk2dUICamera cam);
public sealed class Params_get_InputEnabled
{
public tk2dUIManager self;
}
public delegate void get_InputEnabled_BeforeArgs(Params_get_InputEnabled args);
public delegate bool get_InputEnabled_AfterArgs(Params_get_InputEnabled args, bool ret);
public delegate bool get_InputEnabled_WithArgs (Func<tk2dUIManager, bool> orig, tk2dUIManager self);
public sealed class Params_set_InputEnabled
{
public tk2dUIManager self;
public bool value;
}
public delegate void set_InputEnabled_BeforeArgs(Params_set_InputEnabled args);
public delegate void set_InputEnabled_AfterArgs(Params_set_InputEnabled args);
public delegate void set_InputEnabled_WithArgs (Action<tk2dUIManager,  bool> orig, tk2dUIManager self,  bool value);
public sealed class Params_get_PressedUIItem
{
public tk2dUIManager self;
}
public delegate void get_PressedUIItem_BeforeArgs(Params_get_PressedUIItem args);
public delegate tk2dUIItem get_PressedUIItem_AfterArgs(Params_get_PressedUIItem args, tk2dUIItem ret);
public delegate tk2dUIItem get_PressedUIItem_WithArgs (Func<tk2dUIManager, tk2dUIItem> orig, tk2dUIManager self);
public sealed class Params_get_PressedUIItems
{
public tk2dUIManager self;
}
public delegate void get_PressedUIItems_BeforeArgs(Params_get_PressedUIItems args);
public delegate tk2dUIItem[] get_PressedUIItems_AfterArgs(Params_get_PressedUIItems args, tk2dUIItem[] ret);
public delegate tk2dUIItem[] get_PressedUIItems_WithArgs (Func<tk2dUIManager, tk2dUIItem[]> orig, tk2dUIManager self);
public sealed class Params_get_UseMultiTouch
{
public tk2dUIManager self;
}
public delegate void get_UseMultiTouch_BeforeArgs(Params_get_UseMultiTouch args);
public delegate bool get_UseMultiTouch_AfterArgs(Params_get_UseMultiTouch args, bool ret);
public delegate bool get_UseMultiTouch_WithArgs (Func<tk2dUIManager, bool> orig, tk2dUIManager self);
public sealed class Params_set_UseMultiTouch
{
public tk2dUIManager self;
public bool value;
}
public delegate void set_UseMultiTouch_BeforeArgs(Params_set_UseMultiTouch args);
public delegate void set_UseMultiTouch_AfterArgs(Params_set_UseMultiTouch args);
public delegate void set_UseMultiTouch_WithArgs (Action<tk2dUIManager,  bool> orig, tk2dUIManager self,  bool value);
public sealed class Params_SortCameras
{
public tk2dUIManager self;
}
public delegate void SortCameras_BeforeArgs(Params_SortCameras args);
public delegate void SortCameras_AfterArgs(Params_SortCameras args);
public delegate void SortCameras_WithArgs (Action<tk2dUIManager> orig, tk2dUIManager self);
public sealed class Params_Awake
{
public tk2dUIManager self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<tk2dUIManager> orig, tk2dUIManager self);
public sealed class Params_HookUpLegacyCamera
{
public tk2dUIManager self;
public UnityEngine.Camera cam;
}
public delegate void HookUpLegacyCamera_BeforeArgs(Params_HookUpLegacyCamera args);
public delegate void HookUpLegacyCamera_AfterArgs(Params_HookUpLegacyCamera args);
public delegate void HookUpLegacyCamera_WithArgs (Action<tk2dUIManager,  UnityEngine.Camera> orig, tk2dUIManager self,  UnityEngine.Camera cam);
public sealed class Params_Start
{
public tk2dUIManager self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<tk2dUIManager> orig, tk2dUIManager self);
public sealed class Params_Setup
{
public tk2dUIManager self;
}
public delegate void Setup_BeforeArgs(Params_Setup args);
public delegate void Setup_AfterArgs(Params_Setup args);
public delegate void Setup_WithArgs (Action<tk2dUIManager> orig, tk2dUIManager self);
public sealed class Params_Update
{
public tk2dUIManager self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<tk2dUIManager> orig, tk2dUIManager self);
public sealed class Params_CheckInputs
{
public tk2dUIManager self;
}
public delegate void CheckInputs_BeforeArgs(Params_CheckInputs args);
public delegate void CheckInputs_AfterArgs(Params_CheckInputs args);
public delegate void CheckInputs_WithArgs (Action<tk2dUIManager> orig, tk2dUIManager self);
public sealed class Params_CheckMultiTouchInputs
{
public tk2dUIManager self;
}
public delegate void CheckMultiTouchInputs_BeforeArgs(Params_CheckMultiTouchInputs args);
public delegate void CheckMultiTouchInputs_AfterArgs(Params_CheckMultiTouchInputs args);
public delegate void CheckMultiTouchInputs_WithArgs (Action<tk2dUIManager> orig, tk2dUIManager self);
public sealed class Params_RaycastForUIItem
{
public tk2dUIManager self;
public UnityEngine.Vector2 screenPos;
}
public delegate void RaycastForUIItem_BeforeArgs(Params_RaycastForUIItem args);
public delegate tk2dUIItem RaycastForUIItem_AfterArgs(Params_RaycastForUIItem args, tk2dUIItem ret);
public delegate tk2dUIItem RaycastForUIItem_WithArgs (Func<tk2dUIManager,  UnityEngine.Vector2, tk2dUIItem> orig, tk2dUIManager self,  UnityEngine.Vector2 screenPos);
public sealed class Params_OverrideClearAllChildrenPresses
{
public tk2dUIManager self;
public tk2dUIItem item;
}
public delegate void OverrideClearAllChildrenPresses_BeforeArgs(Params_OverrideClearAllChildrenPresses args);
public delegate void OverrideClearAllChildrenPresses_AfterArgs(Params_OverrideClearAllChildrenPresses args);
public delegate void OverrideClearAllChildrenPresses_WithArgs (Action<tk2dUIManager,  tk2dUIItem> orig, tk2dUIManager self,  tk2dUIItem item);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_Instance_BeforeArgs get_Instance
{
add
{

HookHandler._beforeget_Instance += value;
HookHandler.Hookget_Instance();
}
remove => HookHandler._beforeget_Instance -= value;
}
public static event Delegates.get_Instance__NoCreate_BeforeArgs get_Instance__NoCreate
{
add
{

HookHandler._beforeget_Instance__NoCreate += value;
HookHandler.Hookget_Instance__NoCreate();
}
remove => HookHandler._beforeget_Instance__NoCreate -= value;
}
public static event Delegates.get_UICamera_BeforeArgs get_UICamera
{
add
{

HookHandler._beforeget_UICamera += value;
HookHandler.Hookget_UICamera();
}
remove => HookHandler._beforeget_UICamera -= value;
}
public static event Delegates.set_UICamera_BeforeArgs set_UICamera
{
add
{

HookHandler._beforeset_UICamera += value;
HookHandler.Hookset_UICamera();
}
remove => HookHandler._beforeset_UICamera -= value;
}
public static event Delegates.GetUICameraForControl_BeforeArgs GetUICameraForControl
{
add
{

HookHandler._beforeGetUICameraForControl += value;
HookHandler.HookGetUICameraForControl();
}
remove => HookHandler._beforeGetUICameraForControl -= value;
}
public static event Delegates.RegisterCamera_BeforeArgs RegisterCamera
{
add
{

HookHandler._beforeRegisterCamera += value;
HookHandler.HookRegisterCamera();
}
remove => HookHandler._beforeRegisterCamera -= value;
}
public static event Delegates.UnregisterCamera_BeforeArgs UnregisterCamera
{
add
{

HookHandler._beforeUnregisterCamera += value;
HookHandler.HookUnregisterCamera();
}
remove => HookHandler._beforeUnregisterCamera -= value;
}
public static event Delegates.get_InputEnabled_BeforeArgs get_InputEnabled
{
add
{

HookHandler._beforeget_InputEnabled += value;
HookHandler.Hookget_InputEnabled();
}
remove => HookHandler._beforeget_InputEnabled -= value;
}
public static event Delegates.set_InputEnabled_BeforeArgs set_InputEnabled
{
add
{

HookHandler._beforeset_InputEnabled += value;
HookHandler.Hookset_InputEnabled();
}
remove => HookHandler._beforeset_InputEnabled -= value;
}
public static event Delegates.get_PressedUIItem_BeforeArgs get_PressedUIItem
{
add
{

HookHandler._beforeget_PressedUIItem += value;
HookHandler.Hookget_PressedUIItem();
}
remove => HookHandler._beforeget_PressedUIItem -= value;
}
public static event Delegates.get_PressedUIItems_BeforeArgs get_PressedUIItems
{
add
{

HookHandler._beforeget_PressedUIItems += value;
HookHandler.Hookget_PressedUIItems();
}
remove => HookHandler._beforeget_PressedUIItems -= value;
}
public static event Delegates.get_UseMultiTouch_BeforeArgs get_UseMultiTouch
{
add
{

HookHandler._beforeget_UseMultiTouch += value;
HookHandler.Hookget_UseMultiTouch();
}
remove => HookHandler._beforeget_UseMultiTouch -= value;
}
public static event Delegates.set_UseMultiTouch_BeforeArgs set_UseMultiTouch
{
add
{

HookHandler._beforeset_UseMultiTouch += value;
HookHandler.Hookset_UseMultiTouch();
}
remove => HookHandler._beforeset_UseMultiTouch -= value;
}
public static event Delegates.SortCameras_BeforeArgs SortCameras
{
add
{

HookHandler._beforeSortCameras += value;
HookHandler.HookSortCameras();
}
remove => HookHandler._beforeSortCameras -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.HookUpLegacyCamera_BeforeArgs HookUpLegacyCamera
{
add
{

HookHandler._beforeHookUpLegacyCamera += value;
HookHandler.HookHookUpLegacyCamera();
}
remove => HookHandler._beforeHookUpLegacyCamera -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Setup_BeforeArgs Setup
{
add
{

HookHandler._beforeSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._beforeSetup -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.CheckInputs_BeforeArgs CheckInputs
{
add
{

HookHandler._beforeCheckInputs += value;
HookHandler.HookCheckInputs();
}
remove => HookHandler._beforeCheckInputs -= value;
}
public static event Delegates.CheckMultiTouchInputs_BeforeArgs CheckMultiTouchInputs
{
add
{

HookHandler._beforeCheckMultiTouchInputs += value;
HookHandler.HookCheckMultiTouchInputs();
}
remove => HookHandler._beforeCheckMultiTouchInputs -= value;
}
public static event Delegates.RaycastForUIItem_BeforeArgs RaycastForUIItem
{
add
{

HookHandler._beforeRaycastForUIItem += value;
HookHandler.HookRaycastForUIItem();
}
remove => HookHandler._beforeRaycastForUIItem -= value;
}
public static event Delegates.OverrideClearAllChildrenPresses_BeforeArgs OverrideClearAllChildrenPresses
{
add
{

HookHandler._beforeOverrideClearAllChildrenPresses += value;
HookHandler.HookOverrideClearAllChildrenPresses();
}
remove => HookHandler._beforeOverrideClearAllChildrenPresses -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_Instance_AfterArgs get_Instance
{
add
{

HookHandler._afterget_Instance += value;
HookHandler.Hookget_Instance();
}
remove => HookHandler._afterget_Instance -= value;
}
public static event Delegates.get_Instance__NoCreate_AfterArgs get_Instance__NoCreate
{
add
{

HookHandler._afterget_Instance__NoCreate += value;
HookHandler.Hookget_Instance__NoCreate();
}
remove => HookHandler._afterget_Instance__NoCreate -= value;
}
public static event Delegates.get_UICamera_AfterArgs get_UICamera
{
add
{

HookHandler._afterget_UICamera += value;
HookHandler.Hookget_UICamera();
}
remove => HookHandler._afterget_UICamera -= value;
}
public static event Delegates.set_UICamera_AfterArgs set_UICamera
{
add
{

HookHandler._afterset_UICamera += value;
HookHandler.Hookset_UICamera();
}
remove => HookHandler._afterset_UICamera -= value;
}
public static event Delegates.GetUICameraForControl_AfterArgs GetUICameraForControl
{
add
{

HookHandler._afterGetUICameraForControl += value;
HookHandler.HookGetUICameraForControl();
}
remove => HookHandler._afterGetUICameraForControl -= value;
}
public static event Delegates.RegisterCamera_AfterArgs RegisterCamera
{
add
{

HookHandler._afterRegisterCamera += value;
HookHandler.HookRegisterCamera();
}
remove => HookHandler._afterRegisterCamera -= value;
}
public static event Delegates.UnregisterCamera_AfterArgs UnregisterCamera
{
add
{

HookHandler._afterUnregisterCamera += value;
HookHandler.HookUnregisterCamera();
}
remove => HookHandler._afterUnregisterCamera -= value;
}
public static event Delegates.get_InputEnabled_AfterArgs get_InputEnabled
{
add
{

HookHandler._afterget_InputEnabled += value;
HookHandler.Hookget_InputEnabled();
}
remove => HookHandler._afterget_InputEnabled -= value;
}
public static event Delegates.set_InputEnabled_AfterArgs set_InputEnabled
{
add
{

HookHandler._afterset_InputEnabled += value;
HookHandler.Hookset_InputEnabled();
}
remove => HookHandler._afterset_InputEnabled -= value;
}
public static event Delegates.get_PressedUIItem_AfterArgs get_PressedUIItem
{
add
{

HookHandler._afterget_PressedUIItem += value;
HookHandler.Hookget_PressedUIItem();
}
remove => HookHandler._afterget_PressedUIItem -= value;
}
public static event Delegates.get_PressedUIItems_AfterArgs get_PressedUIItems
{
add
{

HookHandler._afterget_PressedUIItems += value;
HookHandler.Hookget_PressedUIItems();
}
remove => HookHandler._afterget_PressedUIItems -= value;
}
public static event Delegates.get_UseMultiTouch_AfterArgs get_UseMultiTouch
{
add
{

HookHandler._afterget_UseMultiTouch += value;
HookHandler.Hookget_UseMultiTouch();
}
remove => HookHandler._afterget_UseMultiTouch -= value;
}
public static event Delegates.set_UseMultiTouch_AfterArgs set_UseMultiTouch
{
add
{

HookHandler._afterset_UseMultiTouch += value;
HookHandler.Hookset_UseMultiTouch();
}
remove => HookHandler._afterset_UseMultiTouch -= value;
}
public static event Delegates.SortCameras_AfterArgs SortCameras
{
add
{

HookHandler._afterSortCameras += value;
HookHandler.HookSortCameras();
}
remove => HookHandler._afterSortCameras -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.HookUpLegacyCamera_AfterArgs HookUpLegacyCamera
{
add
{

HookHandler._afterHookUpLegacyCamera += value;
HookHandler.HookHookUpLegacyCamera();
}
remove => HookHandler._afterHookUpLegacyCamera -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.Setup_AfterArgs Setup
{
add
{

HookHandler._afterSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._afterSetup -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.CheckInputs_AfterArgs CheckInputs
{
add
{

HookHandler._afterCheckInputs += value;
HookHandler.HookCheckInputs();
}
remove => HookHandler._afterCheckInputs -= value;
}
public static event Delegates.CheckMultiTouchInputs_AfterArgs CheckMultiTouchInputs
{
add
{

HookHandler._afterCheckMultiTouchInputs += value;
HookHandler.HookCheckMultiTouchInputs();
}
remove => HookHandler._afterCheckMultiTouchInputs -= value;
}
public static event Delegates.RaycastForUIItem_AfterArgs RaycastForUIItem
{
add
{

HookHandler._afterRaycastForUIItem += value;
HookHandler.HookRaycastForUIItem();
}
remove => HookHandler._afterRaycastForUIItem -= value;
}
public static event Delegates.OverrideClearAllChildrenPresses_AfterArgs OverrideClearAllChildrenPresses
{
add
{

HookHandler._afterOverrideClearAllChildrenPresses += value;
HookHandler.HookOverrideClearAllChildrenPresses();
}
remove => HookHandler._afterOverrideClearAllChildrenPresses -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_Instance_WithArgs get_Instance
{
add => HookEndpointManager.Add<Delegates.get_Instance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance", false), value);
remove => HookEndpointManager.Remove<Delegates.get_Instance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance", false), value);
}
public static event Delegates.get_Instance__NoCreate_WithArgs get_Instance__NoCreate
{
add => HookEndpointManager.Add<Delegates.get_Instance__NoCreate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance__NoCreate", false), value);
remove => HookEndpointManager.Remove<Delegates.get_Instance__NoCreate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_Instance__NoCreate", false), value);
}
public static event Delegates.get_UICamera_WithArgs get_UICamera
{
add => HookEndpointManager.Add<Delegates.get_UICamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UICamera", true), value);
remove => HookEndpointManager.Remove<Delegates.get_UICamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UICamera", true), value);
}
public static event Delegates.set_UICamera_WithArgs set_UICamera
{
add => HookEndpointManager.Add<Delegates.set_UICamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UICamera", true), value);
remove => HookEndpointManager.Remove<Delegates.set_UICamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UICamera", true), value);
}
public static event On.tk2dUIManager.hook_GetUICameraForControl GetUICameraForControl
{
add => On.tk2dUIManager.GetUICameraForControl += value;
remove => On.tk2dUIManager.GetUICameraForControl -= value;
}
public static event On.tk2dUIManager.hook_RegisterCamera RegisterCamera
{
add => On.tk2dUIManager.RegisterCamera += value;
remove => On.tk2dUIManager.RegisterCamera -= value;
}
public static event On.tk2dUIManager.hook_UnregisterCamera UnregisterCamera
{
add => On.tk2dUIManager.UnregisterCamera += value;
remove => On.tk2dUIManager.UnregisterCamera -= value;
}
public static event Delegates.get_InputEnabled_WithArgs get_InputEnabled
{
add => HookEndpointManager.Add<Delegates.get_InputEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_InputEnabled", true), value);
remove => HookEndpointManager.Remove<Delegates.get_InputEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_InputEnabled", true), value);
}
public static event Delegates.set_InputEnabled_WithArgs set_InputEnabled
{
add => HookEndpointManager.Add<Delegates.set_InputEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_InputEnabled", true), value);
remove => HookEndpointManager.Remove<Delegates.set_InputEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_InputEnabled", true), value);
}
public static event Delegates.get_PressedUIItem_WithArgs get_PressedUIItem
{
add => HookEndpointManager.Add<Delegates.get_PressedUIItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItem", true), value);
remove => HookEndpointManager.Remove<Delegates.get_PressedUIItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItem", true), value);
}
public static event Delegates.get_PressedUIItems_WithArgs get_PressedUIItems
{
add => HookEndpointManager.Add<Delegates.get_PressedUIItems_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItems", true), value);
remove => HookEndpointManager.Remove<Delegates.get_PressedUIItems_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_PressedUIItems", true), value);
}
public static event Delegates.get_UseMultiTouch_WithArgs get_UseMultiTouch
{
add => HookEndpointManager.Add<Delegates.get_UseMultiTouch_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UseMultiTouch", true), value);
remove => HookEndpointManager.Remove<Delegates.get_UseMultiTouch_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "get_UseMultiTouch", true), value);
}
public static event Delegates.set_UseMultiTouch_WithArgs set_UseMultiTouch
{
add => HookEndpointManager.Add<Delegates.set_UseMultiTouch_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UseMultiTouch", true), value);
remove => HookEndpointManager.Remove<Delegates.set_UseMultiTouch_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIManager), "set_UseMultiTouch", true), value);
}
public static event On.tk2dUIManager.hook_SortCameras SortCameras
{
add => On.tk2dUIManager.SortCameras += value;
remove => On.tk2dUIManager.SortCameras -= value;
}
public static event On.tk2dUIManager.hook_Awake Awake
{
add => On.tk2dUIManager.Awake += value;
remove => On.tk2dUIManager.Awake -= value;
}
public static event On.tk2dUIManager.hook_HookUpLegacyCamera HookUpLegacyCamera
{
add => On.tk2dUIManager.HookUpLegacyCamera += value;
remove => On.tk2dUIManager.HookUpLegacyCamera -= value;
}
public static event On.tk2dUIManager.hook_Start Start
{
add => On.tk2dUIManager.Start += value;
remove => On.tk2dUIManager.Start -= value;
}
public static event On.tk2dUIManager.hook_Setup Setup
{
add => On.tk2dUIManager.Setup += value;
remove => On.tk2dUIManager.Setup -= value;
}
public static event On.tk2dUIManager.hook_Update Update
{
add => On.tk2dUIManager.Update += value;
remove => On.tk2dUIManager.Update -= value;
}
public static event On.tk2dUIManager.hook_CheckInputs CheckInputs
{
add => On.tk2dUIManager.CheckInputs += value;
remove => On.tk2dUIManager.CheckInputs -= value;
}
public static event On.tk2dUIManager.hook_CheckMultiTouchInputs CheckMultiTouchInputs
{
add => On.tk2dUIManager.CheckMultiTouchInputs += value;
remove => On.tk2dUIManager.CheckMultiTouchInputs -= value;
}
public static event On.tk2dUIManager.hook_RaycastForUIItem RaycastForUIItem
{
add => On.tk2dUIManager.RaycastForUIItem += value;
remove => On.tk2dUIManager.RaycastForUIItem -= value;
}
public static event On.tk2dUIManager.hook_OverrideClearAllChildrenPresses OverrideClearAllChildrenPresses
{
add => On.tk2dUIManager.OverrideClearAllChildrenPresses += value;
remove => On.tk2dUIManager.OverrideClearAllChildrenPresses -= value;
}
}

}
