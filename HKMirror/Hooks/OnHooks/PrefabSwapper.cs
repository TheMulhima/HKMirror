using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PrefabSwapper class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPrefabSwapper
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookcontains()
{
if (!HookedList.Contains("contains"))
{
HookedList.Add("contains");
On.PrefabSwapper.contains += contains;

}
}
internal static event Delegates.contains_BeforeArgs _beforecontains;
internal static event Delegates.contains_AfterArgs _aftercontains;
private static bool contains(On.PrefabSwapper.orig_contains orig,PrefabSwapper self,  string testGo)
{
Delegates.Params_contains @params = new() 
{
self = self
, testGo = testGo
};
if (_beforecontains != null)
{
foreach (Delegates.contains_BeforeArgs toInvoke in _beforecontains.GetInvocationList())
{
try
{
_beforecontains?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
testGo = @params.testGo;
var retVal = orig(self, testGo);
if (_aftercontains != null)
{
foreach (Delegates.contains_AfterArgs toInvoke in _aftercontains.GetInvocationList())
{
try
{
retVal = _aftercontains.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_contains
{
public PrefabSwapper self;
public string testGo;
}
public delegate void contains_BeforeArgs(Params_contains args);
public delegate bool contains_AfterArgs(Params_contains args, bool ret);
public delegate bool contains_WithArgs (Func<PrefabSwapper,  string, bool> orig, PrefabSwapper self,  string testGo);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.contains_BeforeArgs contains
{
add
{

HookHandler._beforecontains += value;
HookHandler.Hookcontains();
}
remove => HookHandler._beforecontains -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.contains_AfterArgs contains
{
add
{

HookHandler._aftercontains += value;
HookHandler.Hookcontains();
}
remove => HookHandler._aftercontains -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.PrefabSwapper.hook_contains contains
{
add => On.PrefabSwapper.contains += value;
remove => On.PrefabSwapper.contains -= value;
}
}

}
