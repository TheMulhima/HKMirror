using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CheatManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCheatManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsCheatsEnabled()
        {
            if (!HookedList.Contains("get_IsCheatsEnabled"))
            {
                HookedList.Add("get_IsCheatsEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CheatManager), "get_IsCheatsEnabled", false),
                    get_IsCheatsEnabled);
            }
        }

        internal static event Delegates.get_IsCheatsEnabled_BeforeArgs _beforeget_IsCheatsEnabled;
        internal static event Delegates.get_IsCheatsEnabled_AfterArgs _afterget_IsCheatsEnabled;

        private static bool get_IsCheatsEnabled(Func<bool> orig)
        {
            if (_beforeget_IsCheatsEnabled != null)
                foreach (Delegates.get_IsCheatsEnabled_BeforeArgs toInvoke in _beforeget_IsCheatsEnabled
                             .GetInvocationList())
                    try
                    {
                        _beforeget_IsCheatsEnabled?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsCheatsEnabled != null)
                foreach (Delegates.get_IsCheatsEnabled_AfterArgs toInvoke in
                         _afterget_IsCheatsEnabled.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsCheatsEnabled.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.CheatManager.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.CheatManager.orig_Init orig)
        {
            if (_beforeInit != null)
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                    try
                    {
                        _beforeInit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterInit != null)
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                    try
                    {
                        _afterInit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsInstaKillEnabled()
        {
            if (!HookedList.Contains("get_IsInstaKillEnabled"))
            {
                HookedList.Add("get_IsInstaKillEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CheatManager), "get_IsInstaKillEnabled", false),
                    get_IsInstaKillEnabled);
            }
        }

        internal static event Delegates.get_IsInstaKillEnabled_BeforeArgs _beforeget_IsInstaKillEnabled;
        internal static event Delegates.get_IsInstaKillEnabled_AfterArgs _afterget_IsInstaKillEnabled;

        private static bool get_IsInstaKillEnabled(Func<bool> orig)
        {
            if (_beforeget_IsInstaKillEnabled != null)
                foreach (Delegates.get_IsInstaKillEnabled_BeforeArgs toInvoke in _beforeget_IsInstaKillEnabled
                             .GetInvocationList())
                    try
                    {
                        _beforeget_IsInstaKillEnabled?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsInstaKillEnabled != null)
                foreach (Delegates.get_IsInstaKillEnabled_AfterArgs toInvoke in _afterget_IsInstaKillEnabled
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsInstaKillEnabled.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.CheatManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;

        private static IEnumerator Start(On.CheatManager.orig_Start orig, CheatManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.CheatManager.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.CheatManager.orig_OnDestroy orig, CheatManager self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.CheatManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.CheatManager.orig_Update orig, CheatManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookToggleCheatMenu()
        {
            if (!HookedList.Contains("ToggleCheatMenu"))
            {
                HookedList.Add("ToggleCheatMenu");
                On.CheatManager.ToggleCheatMenu += ToggleCheatMenu;
            }
        }

        internal static event Delegates.ToggleCheatMenu_BeforeArgs _beforeToggleCheatMenu;
        internal static event Delegates.ToggleCheatMenu_AfterArgs _afterToggleCheatMenu;

        private static void ToggleCheatMenu(On.CheatManager.orig_ToggleCheatMenu orig, CheatManager self)
        {
            Delegates.Params_ToggleCheatMenu @params = new()
            {
                self = self
            };
            if (_beforeToggleCheatMenu != null)
                foreach (Delegates.ToggleCheatMenu_BeforeArgs toInvoke in _beforeToggleCheatMenu.GetInvocationList())
                    try
                    {
                        _beforeToggleCheatMenu?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterToggleCheatMenu != null)
                foreach (Delegates.ToggleCheatMenu_AfterArgs toInvoke in _afterToggleCheatMenu.GetInvocationList())
                    try
                    {
                        _afterToggleCheatMenu.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.CheatManager.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_AfterArgs _afterOnGUI;

        private static void OnGUI(On.CheatManager.orig_OnGUI orig, CheatManager self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            if (_beforeOnGUI != null)
                foreach (Delegates.OnGUI_BeforeArgs toInvoke in _beforeOnGUI.GetInvocationList())
                    try
                    {
                        _beforeOnGUI?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnGUI != null)
                foreach (Delegates.OnGUI_AfterArgs toInvoke in _afterOnGUI.GetInvocationList())
                    try
                    {
                        _afterOnGUI.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOpenStagStations()
        {
            if (!HookedList.Contains("OpenStagStations"))
            {
                HookedList.Add("OpenStagStations");
                On.CheatManager.OpenStagStations += OpenStagStations;
            }
        }

        internal static event Delegates.OpenStagStations_BeforeArgs _beforeOpenStagStations;
        internal static event Delegates.OpenStagStations_AfterArgs _afterOpenStagStations;

        private static void OpenStagStations(On.CheatManager.orig_OpenStagStations orig)
        {
            if (_beforeOpenStagStations != null)
                foreach (Delegates.OpenStagStations_BeforeArgs toInvoke in _beforeOpenStagStations.GetInvocationList())
                    try
                    {
                        _beforeOpenStagStations?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterOpenStagStations != null)
                foreach (Delegates.OpenStagStations_AfterArgs toInvoke in _afterOpenStagStations.GetInvocationList())
                    try
                    {
                        _afterOpenStagStations.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheatButton()
        {
            if (!HookedList.Contains("CheatButton"))
            {
                HookedList.Add("CheatButton");
                On.CheatManager.CheatButton += CheatButton;
            }
        }

        internal static event Delegates.CheatButton_BeforeArgs _beforeCheatButton;
        internal static event Delegates.CheatButton_AfterArgs _afterCheatButton;

        private static bool CheatButton(On.CheatManager.orig_CheatButton orig, CheatManager self, ref int buttonIndex,
            string content)
        {
            Delegates.Params_CheatButton @params = new()
            {
                self = self, buttonIndex = buttonIndex, content = content
            };
            if (_beforeCheatButton != null)
                foreach (Delegates.CheatButton_BeforeArgs toInvoke in _beforeCheatButton.GetInvocationList())
                    try
                    {
                        _beforeCheatButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            buttonIndex = @params.buttonIndex;
            content = @params.content;
            var retVal = orig(self, ref buttonIndex, content);
            if (_afterCheatButton != null)
                foreach (Delegates.CheatButton_AfterArgs toInvoke in _afterCheatButton.GetInvocationList())
                    try
                    {
                        retVal = _afterCheatButton.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSafetyCheatButton()
        {
            if (!HookedList.Contains("SafetyCheatButton"))
            {
                HookedList.Add("SafetyCheatButton");
                On.CheatManager.SafetyCheatButton += SafetyCheatButton;
            }
        }

        internal static event Delegates.SafetyCheatButton_BeforeArgs _beforeSafetyCheatButton;
        internal static event Delegates.SafetyCheatButton_AfterArgs _afterSafetyCheatButton;

        private static bool SafetyCheatButton(On.CheatManager.orig_SafetyCheatButton orig, CheatManager self,
            ref int buttonIndex, string content)
        {
            Delegates.Params_SafetyCheatButton @params = new()
            {
                self = self, buttonIndex = buttonIndex, content = content
            };
            if (_beforeSafetyCheatButton != null)
                foreach (Delegates.SafetyCheatButton_BeforeArgs toInvoke in
                         _beforeSafetyCheatButton.GetInvocationList())
                    try
                    {
                        _beforeSafetyCheatButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            buttonIndex = @params.buttonIndex;
            content = @params.content;
            var retVal = orig(self, ref buttonIndex, content);
            if (_afterSafetyCheatButton != null)
                foreach (Delegates.SafetyCheatButton_AfterArgs toInvoke in _afterSafetyCheatButton.GetInvocationList())
                    try
                    {
                        retVal = _afterSafetyCheatButton.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRestore()
        {
            if (!HookedList.Contains("Restore"))
            {
                HookedList.Add("Restore");
                On.CheatManager.Restore += Restore;
            }
        }

        internal static event Delegates.Restore_BeforeArgs _beforeRestore;
        internal static event Delegates.Restore_AfterArgs _afterRestore;

        private static void Restore(On.CheatManager.orig_Restore orig, CheatManager self)
        {
            Delegates.Params_Restore @params = new()
            {
                self = self
            };
            if (_beforeRestore != null)
                foreach (Delegates.Restore_BeforeArgs toInvoke in _beforeRestore.GetInvocationList())
                    try
                    {
                        _beforeRestore?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRestore != null)
                foreach (Delegates.Restore_AfterArgs toInvoke in _afterRestore.GetInvocationList())
                    try
                    {
                        _afterRestore.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookKill()
        {
            if (!HookedList.Contains("Kill"))
            {
                HookedList.Add("Kill");
                On.CheatManager.Kill += Kill;
            }
        }

        internal static event Delegates.Kill_BeforeArgs _beforeKill;
        internal static event Delegates.Kill_AfterArgs _afterKill;

        private static void Kill(On.CheatManager.orig_Kill orig, CheatManager self)
        {
            Delegates.Params_Kill @params = new()
            {
                self = self
            };
            if (_beforeKill != null)
                foreach (Delegates.Kill_BeforeArgs toInvoke in _beforeKill.GetInvocationList())
                    try
                    {
                        _beforeKill?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterKill != null)
                foreach (Delegates.Kill_AfterArgs toInvoke in _afterKill.GetInvocationList())
                    try
                    {
                        _afterKill.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetGeo()
        {
            if (!HookedList.Contains("GetGeo"))
            {
                HookedList.Add("GetGeo");
                On.CheatManager.GetGeo += GetGeo;
            }
        }

        internal static event Delegates.GetGeo_BeforeArgs _beforeGetGeo;
        internal static event Delegates.GetGeo_AfterArgs _afterGetGeo;

        private static void GetGeo(On.CheatManager.orig_GetGeo orig, CheatManager self, int amount)
        {
            Delegates.Params_GetGeo @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeGetGeo != null)
                foreach (Delegates.GetGeo_BeforeArgs toInvoke in _beforeGetGeo.GetInvocationList())
                    try
                    {
                        _beforeGetGeo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterGetGeo != null)
                foreach (Delegates.GetGeo_AfterArgs toInvoke in _afterGetGeo.GetInvocationList())
                    try
                    {
                        _afterGetGeo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool CheatButton_AfterArgs(Params_CheatButton args, bool ret);

        public delegate void CheatButton_BeforeArgs(Params_CheatButton args);

        public delegate bool CheatButton_WithArgs(Func<CheatManager, int, string, bool> orig, CheatManager self,
            ref int buttonIndex, string content);

        public delegate bool get_IsCheatsEnabled_AfterArgs(bool ret);

        public delegate void get_IsCheatsEnabled_BeforeArgs();

        public delegate bool get_IsCheatsEnabled_WithArgs(Func<bool> orig);

        public delegate bool get_IsInstaKillEnabled_AfterArgs(bool ret);

        public delegate void get_IsInstaKillEnabled_BeforeArgs();

        public delegate bool get_IsInstaKillEnabled_WithArgs(Func<bool> orig);

        public delegate void GetGeo_AfterArgs(Params_GetGeo args);

        public delegate void GetGeo_BeforeArgs(Params_GetGeo args);

        public delegate void GetGeo_WithArgs(Action<CheatManager, int> orig, CheatManager self, int amount);

        public delegate void Init_AfterArgs();

        public delegate void Init_BeforeArgs();

        public delegate void Init_WithArgs(Action orig);

        public delegate void Kill_AfterArgs(Params_Kill args);

        public delegate void Kill_BeforeArgs(Params_Kill args);

        public delegate void Kill_WithArgs(Action<CheatManager> orig, CheatManager self);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<CheatManager> orig, CheatManager self);

        public delegate void OnGUI_AfterArgs(Params_OnGUI args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_WithArgs(Action<CheatManager> orig, CheatManager self);

        public delegate void OpenStagStations_AfterArgs();

        public delegate void OpenStagStations_BeforeArgs();

        public delegate void OpenStagStations_WithArgs(Action orig);

        public delegate void Restore_AfterArgs(Params_Restore args);

        public delegate void Restore_BeforeArgs(Params_Restore args);

        public delegate void Restore_WithArgs(Action<CheatManager> orig, CheatManager self);

        public delegate bool SafetyCheatButton_AfterArgs(Params_SafetyCheatButton args, bool ret);

        public delegate void SafetyCheatButton_BeforeArgs(Params_SafetyCheatButton args);

        public delegate bool SafetyCheatButton_WithArgs(Func<CheatManager, int, string, bool> orig, CheatManager self,
            ref int buttonIndex, string content);

        public delegate IEnumerator Start_AfterArgs(Params_Start args, IEnumerator ret);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate IEnumerator Start_WithArgs(Func<CheatManager, IEnumerator> orig, CheatManager self);

        public delegate void ToggleCheatMenu_AfterArgs(Params_ToggleCheatMenu args);

        public delegate void ToggleCheatMenu_BeforeArgs(Params_ToggleCheatMenu args);

        public delegate void ToggleCheatMenu_WithArgs(Action<CheatManager> orig, CheatManager self);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<CheatManager> orig, CheatManager self);

        public sealed class Params_Start
        {
            public CheatManager self;
        }

        public sealed class Params_OnDestroy
        {
            public CheatManager self;
        }

        public sealed class Params_Update
        {
            public CheatManager self;
        }

        public sealed class Params_ToggleCheatMenu
        {
            public CheatManager self;
        }

        public sealed class Params_OnGUI
        {
            public CheatManager self;
        }

        public sealed class Params_CheatButton
        {
            public int buttonIndex;
            public string content;
            public CheatManager self;
        }

        public sealed class Params_SafetyCheatButton
        {
            public int buttonIndex;
            public string content;
            public CheatManager self;
        }

        public sealed class Params_Restore
        {
            public CheatManager self;
        }

        public sealed class Params_Kill
        {
            public CheatManager self;
        }

        public sealed class Params_GetGeo
        {
            public int amount;
            public CheatManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsCheatsEnabled_BeforeArgs get_IsCheatsEnabled
        {
            add
            {
                HookHandler._beforeget_IsCheatsEnabled += value;
                HookHandler.Hookget_IsCheatsEnabled();
            }
            remove => HookHandler._beforeget_IsCheatsEnabled -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.get_IsInstaKillEnabled_BeforeArgs get_IsInstaKillEnabled
        {
            add
            {
                HookHandler._beforeget_IsInstaKillEnabled += value;
                HookHandler.Hookget_IsInstaKillEnabled();
            }
            remove => HookHandler._beforeget_IsInstaKillEnabled -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ToggleCheatMenu_BeforeArgs ToggleCheatMenu
        {
            add
            {
                HookHandler._beforeToggleCheatMenu += value;
                HookHandler.HookToggleCheatMenu();
            }
            remove => HookHandler._beforeToggleCheatMenu -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.OpenStagStations_BeforeArgs OpenStagStations
        {
            add
            {
                HookHandler._beforeOpenStagStations += value;
                HookHandler.HookOpenStagStations();
            }
            remove => HookHandler._beforeOpenStagStations -= value;
        }

        public static event Delegates.CheatButton_BeforeArgs CheatButton
        {
            add
            {
                HookHandler._beforeCheatButton += value;
                HookHandler.HookCheatButton();
            }
            remove => HookHandler._beforeCheatButton -= value;
        }

        public static event Delegates.SafetyCheatButton_BeforeArgs SafetyCheatButton
        {
            add
            {
                HookHandler._beforeSafetyCheatButton += value;
                HookHandler.HookSafetyCheatButton();
            }
            remove => HookHandler._beforeSafetyCheatButton -= value;
        }

        public static event Delegates.Restore_BeforeArgs Restore
        {
            add
            {
                HookHandler._beforeRestore += value;
                HookHandler.HookRestore();
            }
            remove => HookHandler._beforeRestore -= value;
        }

        public static event Delegates.Kill_BeforeArgs Kill
        {
            add
            {
                HookHandler._beforeKill += value;
                HookHandler.HookKill();
            }
            remove => HookHandler._beforeKill -= value;
        }

        public static event Delegates.GetGeo_BeforeArgs GetGeo
        {
            add
            {
                HookHandler._beforeGetGeo += value;
                HookHandler.HookGetGeo();
            }
            remove => HookHandler._beforeGetGeo -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsCheatsEnabled_AfterArgs get_IsCheatsEnabled
        {
            add
            {
                HookHandler._afterget_IsCheatsEnabled += value;
                HookHandler.Hookget_IsCheatsEnabled();
            }
            remove => HookHandler._afterget_IsCheatsEnabled -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.get_IsInstaKillEnabled_AfterArgs get_IsInstaKillEnabled
        {
            add
            {
                HookHandler._afterget_IsInstaKillEnabled += value;
                HookHandler.Hookget_IsInstaKillEnabled();
            }
            remove => HookHandler._afterget_IsInstaKillEnabled -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ToggleCheatMenu_AfterArgs ToggleCheatMenu
        {
            add
            {
                HookHandler._afterToggleCheatMenu += value;
                HookHandler.HookToggleCheatMenu();
            }
            remove => HookHandler._afterToggleCheatMenu -= value;
        }

        public static event Delegates.OnGUI_AfterArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.OpenStagStations_AfterArgs OpenStagStations
        {
            add
            {
                HookHandler._afterOpenStagStations += value;
                HookHandler.HookOpenStagStations();
            }
            remove => HookHandler._afterOpenStagStations -= value;
        }

        public static event Delegates.CheatButton_AfterArgs CheatButton
        {
            add
            {
                HookHandler._afterCheatButton += value;
                HookHandler.HookCheatButton();
            }
            remove => HookHandler._afterCheatButton -= value;
        }

        public static event Delegates.SafetyCheatButton_AfterArgs SafetyCheatButton
        {
            add
            {
                HookHandler._afterSafetyCheatButton += value;
                HookHandler.HookSafetyCheatButton();
            }
            remove => HookHandler._afterSafetyCheatButton -= value;
        }

        public static event Delegates.Restore_AfterArgs Restore
        {
            add
            {
                HookHandler._afterRestore += value;
                HookHandler.HookRestore();
            }
            remove => HookHandler._afterRestore -= value;
        }

        public static event Delegates.Kill_AfterArgs Kill
        {
            add
            {
                HookHandler._afterKill += value;
                HookHandler.HookKill();
            }
            remove => HookHandler._afterKill -= value;
        }

        public static event Delegates.GetGeo_AfterArgs GetGeo
        {
            add
            {
                HookHandler._afterGetGeo += value;
                HookHandler.HookGetGeo();
            }
            remove => HookHandler._afterGetGeo -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsCheatsEnabled_WithArgs get_IsCheatsEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_IsCheatsEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CheatManager), "get_IsCheatsEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsCheatsEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CheatManager), "get_IsCheatsEnabled", false), value);
        }

        public static event On.CheatManager.hook_Init Init
        {
            add => On.CheatManager.Init += value;
            remove => On.CheatManager.Init -= value;
        }

        public static event Delegates.get_IsInstaKillEnabled_WithArgs get_IsInstaKillEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_IsInstaKillEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CheatManager), "get_IsInstaKillEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsInstaKillEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CheatManager), "get_IsInstaKillEnabled", false), value);
        }

        public static event On.CheatManager.hook_Start Start
        {
            add => On.CheatManager.Start += value;
            remove => On.CheatManager.Start -= value;
        }

        public static event On.CheatManager.hook_OnDestroy OnDestroy
        {
            add => On.CheatManager.OnDestroy += value;
            remove => On.CheatManager.OnDestroy -= value;
        }

        public static event On.CheatManager.hook_Update Update
        {
            add => On.CheatManager.Update += value;
            remove => On.CheatManager.Update -= value;
        }

        public static event On.CheatManager.hook_ToggleCheatMenu ToggleCheatMenu
        {
            add => On.CheatManager.ToggleCheatMenu += value;
            remove => On.CheatManager.ToggleCheatMenu -= value;
        }

        public static event On.CheatManager.hook_OnGUI OnGUI
        {
            add => On.CheatManager.OnGUI += value;
            remove => On.CheatManager.OnGUI -= value;
        }

        public static event On.CheatManager.hook_OpenStagStations OpenStagStations
        {
            add => On.CheatManager.OpenStagStations += value;
            remove => On.CheatManager.OpenStagStations -= value;
        }

        public static event On.CheatManager.hook_CheatButton CheatButton
        {
            add => On.CheatManager.CheatButton += value;
            remove => On.CheatManager.CheatButton -= value;
        }

        public static event On.CheatManager.hook_SafetyCheatButton SafetyCheatButton
        {
            add => On.CheatManager.SafetyCheatButton += value;
            remove => On.CheatManager.SafetyCheatButton -= value;
        }

        public static event On.CheatManager.hook_Restore Restore
        {
            add => On.CheatManager.Restore += value;
            remove => On.CheatManager.Restore -= value;
        }

        public static event On.CheatManager.hook_Kill Kill
        {
            add => On.CheatManager.Kill += value;
            remove => On.CheatManager.Kill -= value;
        }

        public static event On.CheatManager.hook_GetGeo GetGeo
        {
            add => On.CheatManager.GetGeo += value;
            remove => On.CheatManager.GetGeo -= value;
        }
    }
}