namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerAnimatorStateSynchronization class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerAnimatorStateSynchronization
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PlayMakerAnimatorStateSynchronization.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.PlayMakerAnimatorStateSynchronization.orig_Start orig,
            PlayMakerAnimatorStateSynchronization self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookRegisterHash()
        {
            if (!HookedList.Contains("RegisterHash"))
            {
                HookedList.Add("RegisterHash");
                On.PlayMakerAnimatorStateSynchronization.RegisterHash += RegisterHash;
            }
        }

        internal static event Delegates.RegisterHash_BeforeArgs _beforeRegisterHash;
        internal static event Delegates.RegisterHash_NormalArgs _afterRegisterHash;

        private static void RegisterHash(On.PlayMakerAnimatorStateSynchronization.orig_RegisterHash orig,
            PlayMakerAnimatorStateSynchronization self, string key, FsmState state)
        {
            Delegates.Params_RegisterHash @params = new()
            {
                self = self, key = key, state = state
            };
            _beforeRegisterHash?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            state = @params.state;
            orig(self, key, state);
            if (_afterRegisterHash != null) _afterRegisterHash.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.PlayMakerAnimatorStateSynchronization.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.PlayMakerAnimatorStateSynchronization.orig_Update orig,
            PlayMakerAnimatorStateSynchronization self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSynchronize()
        {
            if (!HookedList.Contains("Synchronize"))
            {
                HookedList.Add("Synchronize");
                On.PlayMakerAnimatorStateSynchronization.Synchronize += Synchronize;
            }
        }

        internal static event Delegates.Synchronize_BeforeArgs _beforeSynchronize;
        internal static event Delegates.Synchronize_NormalArgs _afterSynchronize;

        private static void Synchronize(On.PlayMakerAnimatorStateSynchronization.orig_Synchronize orig,
            PlayMakerAnimatorStateSynchronization self)
        {
            Delegates.Params_Synchronize @params = new()
            {
                self = self
            };
            _beforeSynchronize?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSynchronize != null) _afterSynchronize.Invoke(@params);
        }

        internal static void HookSwitchState()
        {
            if (!HookedList.Contains("SwitchState"))
            {
                HookedList.Add("SwitchState");
                On.PlayMakerAnimatorStateSynchronization.SwitchState += SwitchState;
            }
        }

        internal static event Delegates.SwitchState_BeforeArgs _beforeSwitchState;
        internal static event Delegates.SwitchState_NormalArgs _afterSwitchState;

        private static void SwitchState(On.PlayMakerAnimatorStateSynchronization.orig_SwitchState orig,
            PlayMakerAnimatorStateSynchronization self, Fsm fsm, FsmState state)
        {
            Delegates.Params_SwitchState @params = new()
            {
                self = self, fsm = fsm, state = state
            };
            _beforeSwitchState?.Invoke(@params);
            self = @params.self;
            fsm = @params.fsm;
            state = @params.state;
            orig(self, fsm, state);
            if (_afterSwitchState != null) _afterSwitchState.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void RegisterHash_BeforeArgs(Params_RegisterHash args);

        public delegate void RegisterHash_NormalArgs(Params_RegisterHash args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void SwitchState_BeforeArgs(Params_SwitchState args);

        public delegate void SwitchState_NormalArgs(Params_SwitchState args);

        public delegate void Synchronize_BeforeArgs(Params_Synchronize args);

        public delegate void Synchronize_NormalArgs(Params_Synchronize args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Start
        {
            public PlayMakerAnimatorStateSynchronization self;
        }

        public sealed class Params_RegisterHash
        {
            public string key;
            public PlayMakerAnimatorStateSynchronization self;
            public FsmState state;
        }

        public sealed class Params_Update
        {
            public PlayMakerAnimatorStateSynchronization self;
        }

        public sealed class Params_Synchronize
        {
            public PlayMakerAnimatorStateSynchronization self;
        }

        public sealed class Params_SwitchState
        {
            public Fsm fsm;
            public PlayMakerAnimatorStateSynchronization self;
            public FsmState state;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.RegisterHash_BeforeArgs RegisterHash
        {
            add
            {
                HookHandler._beforeRegisterHash += value;
                HookHandler.HookRegisterHash();
            }
            remove => HookHandler._beforeRegisterHash -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Synchronize_BeforeArgs Synchronize
        {
            add
            {
                HookHandler._beforeSynchronize += value;
                HookHandler.HookSynchronize();
            }
            remove => HookHandler._beforeSynchronize -= value;
        }

        public static event Delegates.SwitchState_BeforeArgs SwitchState
        {
            add
            {
                HookHandler._beforeSwitchState += value;
                HookHandler.HookSwitchState();
            }
            remove => HookHandler._beforeSwitchState -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.RegisterHash_NormalArgs RegisterHash
        {
            add
            {
                HookHandler._afterRegisterHash += value;
                HookHandler.HookRegisterHash();
            }
            remove => HookHandler._afterRegisterHash -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Synchronize_NormalArgs Synchronize
        {
            add
            {
                HookHandler._afterSynchronize += value;
                HookHandler.HookSynchronize();
            }
            remove => HookHandler._afterSynchronize -= value;
        }

        public static event Delegates.SwitchState_NormalArgs SwitchState
        {
            add
            {
                HookHandler._afterSwitchState += value;
                HookHandler.HookSwitchState();
            }
            remove => HookHandler._afterSwitchState -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayMakerAnimatorStateSynchronization.hook_Start Start
        {
            add => On.PlayMakerAnimatorStateSynchronization.Start += value;
            remove => On.PlayMakerAnimatorStateSynchronization.Start -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_RegisterHash RegisterHash
        {
            add => On.PlayMakerAnimatorStateSynchronization.RegisterHash += value;
            remove => On.PlayMakerAnimatorStateSynchronization.RegisterHash -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_Update Update
        {
            add => On.PlayMakerAnimatorStateSynchronization.Update += value;
            remove => On.PlayMakerAnimatorStateSynchronization.Update -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_Synchronize Synchronize
        {
            add => On.PlayMakerAnimatorStateSynchronization.Synchronize += value;
            remove => On.PlayMakerAnimatorStateSynchronization.Synchronize -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_SwitchState SwitchState
        {
            add => On.PlayMakerAnimatorStateSynchronization.SwitchState += value;
            remove => On.PlayMakerAnimatorStateSynchronization.SwitchState -= value;
        }
    }
}