using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for PlayMakerAnimatorStateSynchronization class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerAnimatorStateSynchronization
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PlayMakerAnimatorStateSynchronization.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.PlayMakerAnimatorStateSynchronization.orig_Start orig,
            PlayMakerAnimatorStateSynchronization self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRegisterHash()
        {
            if (!HookedList.Contains("RegisterHash"))
            {
                HookedList.Add("RegisterHash");
                On.PlayMakerAnimatorStateSynchronization.RegisterHash += RegisterHash;
            }
        }

        internal static event Delegates.RegisterHash_BeforeArgs _beforeRegisterHash;
        internal static event Delegates.RegisterHash_AfterArgs _afterRegisterHash;

        private static void RegisterHash(On.PlayMakerAnimatorStateSynchronization.orig_RegisterHash orig,
            PlayMakerAnimatorStateSynchronization self, string key, HutongGames.PlayMaker.FsmState state)
        {
            Delegates.Params_RegisterHash @params = new()
            {
                self = self, key = key, state = state
            };
            if (_beforeRegisterHash != null)
            {
                foreach (Delegates.RegisterHash_BeforeArgs toInvoke in _beforeRegisterHash.GetInvocationList())
                {
                    try
                    {
                        _beforeRegisterHash?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            key = @params.key;
            state = @params.state;
            orig(self, key, state);
            if (_afterRegisterHash != null)
            {
                foreach (Delegates.RegisterHash_AfterArgs toInvoke in _afterRegisterHash.GetInvocationList())
                {
                    try
                    {
                        _afterRegisterHash.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.PlayMakerAnimatorStateSynchronization.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.PlayMakerAnimatorStateSynchronization.orig_Update orig,
            PlayMakerAnimatorStateSynchronization self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSynchronize()
        {
            if (!HookedList.Contains("Synchronize"))
            {
                HookedList.Add("Synchronize");
                On.PlayMakerAnimatorStateSynchronization.Synchronize += Synchronize;
            }
        }

        internal static event Delegates.Synchronize_BeforeArgs _beforeSynchronize;
        internal static event Delegates.Synchronize_AfterArgs _afterSynchronize;

        private static void Synchronize(On.PlayMakerAnimatorStateSynchronization.orig_Synchronize orig,
            PlayMakerAnimatorStateSynchronization self)
        {
            Delegates.Params_Synchronize @params = new()
            {
                self = self
            };
            if (_beforeSynchronize != null)
            {
                foreach (Delegates.Synchronize_BeforeArgs toInvoke in _beforeSynchronize.GetInvocationList())
                {
                    try
                    {
                        _beforeSynchronize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSynchronize != null)
            {
                foreach (Delegates.Synchronize_AfterArgs toInvoke in _afterSynchronize.GetInvocationList())
                {
                    try
                    {
                        _afterSynchronize.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSwitchState()
        {
            if (!HookedList.Contains("SwitchState"))
            {
                HookedList.Add("SwitchState");
                On.PlayMakerAnimatorStateSynchronization.SwitchState += SwitchState;
            }
        }

        internal static event Delegates.SwitchState_BeforeArgs _beforeSwitchState;
        internal static event Delegates.SwitchState_AfterArgs _afterSwitchState;

        private static void SwitchState(On.PlayMakerAnimatorStateSynchronization.orig_SwitchState orig,
            PlayMakerAnimatorStateSynchronization self, HutongGames.PlayMaker.Fsm fsm,
            HutongGames.PlayMaker.FsmState state)
        {
            Delegates.Params_SwitchState @params = new()
            {
                self = self, fsm = fsm, state = state
            };
            if (_beforeSwitchState != null)
            {
                foreach (Delegates.SwitchState_BeforeArgs toInvoke in _beforeSwitchState.GetInvocationList())
                {
                    try
                    {
                        _beforeSwitchState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            fsm = @params.fsm;
            state = @params.state;
            orig(self, fsm, state);
            if (_afterSwitchState != null)
            {
                foreach (Delegates.SwitchState_AfterArgs toInvoke in _afterSwitchState.GetInvocationList())
                {
                    try
                    {
                        _afterSwitchState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public PlayMakerAnimatorStateSynchronization self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<PlayMakerAnimatorStateSynchronization> orig,
            PlayMakerAnimatorStateSynchronization self);

        public sealed class Params_RegisterHash
        {
            public PlayMakerAnimatorStateSynchronization self;
            public string key;
            public HutongGames.PlayMaker.FsmState state;
        }

        public delegate void RegisterHash_BeforeArgs(Params_RegisterHash args);

        public delegate void RegisterHash_AfterArgs(Params_RegisterHash args);

        public delegate void RegisterHash_WithArgs(
            Action<PlayMakerAnimatorStateSynchronization, string, HutongGames.PlayMaker.FsmState> orig,
            PlayMakerAnimatorStateSynchronization self, string key, HutongGames.PlayMaker.FsmState state);

        public sealed class Params_Update
        {
            public PlayMakerAnimatorStateSynchronization self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<PlayMakerAnimatorStateSynchronization> orig,
            PlayMakerAnimatorStateSynchronization self);

        public sealed class Params_Synchronize
        {
            public PlayMakerAnimatorStateSynchronization self;
        }

        public delegate void Synchronize_BeforeArgs(Params_Synchronize args);

        public delegate void Synchronize_AfterArgs(Params_Synchronize args);

        public delegate void Synchronize_WithArgs(Action<PlayMakerAnimatorStateSynchronization> orig,
            PlayMakerAnimatorStateSynchronization self);

        public sealed class Params_SwitchState
        {
            public PlayMakerAnimatorStateSynchronization self;
            public HutongGames.PlayMaker.Fsm fsm;
            public HutongGames.PlayMaker.FsmState state;
        }

        public delegate void SwitchState_BeforeArgs(Params_SwitchState args);

        public delegate void SwitchState_AfterArgs(Params_SwitchState args);

        public delegate void SwitchState_WithArgs(
            Action<PlayMakerAnimatorStateSynchronization, HutongGames.PlayMaker.Fsm, HutongGames.PlayMaker.FsmState>
                orig, PlayMakerAnimatorStateSynchronization self, HutongGames.PlayMaker.Fsm fsm,
            HutongGames.PlayMaker.FsmState state);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.RegisterHash_BeforeArgs RegisterHash
        {
            add
            {
                HookHandler._beforeRegisterHash += value;
                HookHandler.HookRegisterHash();
            }
            remove => HookHandler._beforeRegisterHash -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Synchronize_BeforeArgs Synchronize
        {
            add
            {
                HookHandler._beforeSynchronize += value;
                HookHandler.HookSynchronize();
            }
            remove => HookHandler._beforeSynchronize -= value;
        }

        public static event Delegates.SwitchState_BeforeArgs SwitchState
        {
            add
            {
                HookHandler._beforeSwitchState += value;
                HookHandler.HookSwitchState();
            }
            remove => HookHandler._beforeSwitchState -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.RegisterHash_AfterArgs RegisterHash
        {
            add
            {
                HookHandler._afterRegisterHash += value;
                HookHandler.HookRegisterHash();
            }
            remove => HookHandler._afterRegisterHash -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Synchronize_AfterArgs Synchronize
        {
            add
            {
                HookHandler._afterSynchronize += value;
                HookHandler.HookSynchronize();
            }
            remove => HookHandler._afterSynchronize -= value;
        }

        public static event Delegates.SwitchState_AfterArgs SwitchState
        {
            add
            {
                HookHandler._afterSwitchState += value;
                HookHandler.HookSwitchState();
            }
            remove => HookHandler._afterSwitchState -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayMakerAnimatorStateSynchronization.hook_Start Start
        {
            add => On.PlayMakerAnimatorStateSynchronization.Start += value;
            remove => On.PlayMakerAnimatorStateSynchronization.Start -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_RegisterHash RegisterHash
        {
            add => On.PlayMakerAnimatorStateSynchronization.RegisterHash += value;
            remove => On.PlayMakerAnimatorStateSynchronization.RegisterHash -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_Update Update
        {
            add => On.PlayMakerAnimatorStateSynchronization.Update += value;
            remove => On.PlayMakerAnimatorStateSynchronization.Update -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_Synchronize Synchronize
        {
            add => On.PlayMakerAnimatorStateSynchronization.Synchronize += value;
            remove => On.PlayMakerAnimatorStateSynchronization.Synchronize -= value;
        }

        public static event On.PlayMakerAnimatorStateSynchronization.hook_SwitchState SwitchState
        {
            add => On.PlayMakerAnimatorStateSynchronization.SwitchState += value;
            remove => On.PlayMakerAnimatorStateSynchronization.SwitchState -= value;
        }
    }
}