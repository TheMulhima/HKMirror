using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteCollectionPlatform class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteCollectionPlatform
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Valid()
        {
            if (!HookedList.Contains("get_Valid"))
            {
                HookedList.Add("get_Valid");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionPlatform), "get_Valid"), get_Valid);
            }
        }

        internal static event Delegates.get_Valid_BeforeArgs _beforeget_Valid;
        internal static event Delegates.get_Valid_AfterArgs _afterget_Valid;

        private static bool get_Valid(Func<tk2dSpriteCollectionPlatform, bool> orig, tk2dSpriteCollectionPlatform self)
        {
            Delegates.Params_get_Valid @params = new()
            {
                self = self
            };
            if (_beforeget_Valid != null)
                foreach (Delegates.get_Valid_BeforeArgs toInvoke in _beforeget_Valid.GetInvocationList())
                    try
                    {
                        _beforeget_Valid?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Valid != null)
                foreach (Delegates.get_Valid_AfterArgs toInvoke in _afterget_Valid.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Valid.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCopyFrom()
        {
            if (!HookedList.Contains("CopyFrom"))
            {
                HookedList.Add("CopyFrom");
                On.tk2dSpriteCollectionPlatform.CopyFrom += CopyFrom;
            }
        }

        internal static event Delegates.CopyFrom_BeforeArgs _beforeCopyFrom;
        internal static event Delegates.CopyFrom_AfterArgs _afterCopyFrom;

        private static void CopyFrom(On.tk2dSpriteCollectionPlatform.orig_CopyFrom orig,
            tk2dSpriteCollectionPlatform self, tk2dSpriteCollectionPlatform source)
        {
            Delegates.Params_CopyFrom @params = new()
            {
                self = self, source = source
            };
            if (_beforeCopyFrom != null)
                foreach (Delegates.CopyFrom_BeforeArgs toInvoke in _beforeCopyFrom.GetInvocationList())
                    try
                    {
                        _beforeCopyFrom?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            source = @params.source;
            orig(self, source);
            if (_afterCopyFrom != null)
                foreach (Delegates.CopyFrom_AfterArgs toInvoke in _afterCopyFrom.GetInvocationList())
                    try
                    {
                        _afterCopyFrom.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CopyFrom_AfterArgs(Params_CopyFrom args);

        public delegate void CopyFrom_BeforeArgs(Params_CopyFrom args);

        public delegate void CopyFrom_WithArgs(Action<tk2dSpriteCollectionPlatform, tk2dSpriteCollectionPlatform> orig,
            tk2dSpriteCollectionPlatform self, tk2dSpriteCollectionPlatform source);

        public delegate bool get_Valid_AfterArgs(Params_get_Valid args, bool ret);

        public delegate void get_Valid_BeforeArgs(Params_get_Valid args);

        public delegate bool get_Valid_WithArgs(Func<tk2dSpriteCollectionPlatform, bool> orig,
            tk2dSpriteCollectionPlatform self);

        public sealed class Params_get_Valid
        {
            public tk2dSpriteCollectionPlatform self;
        }

        public sealed class Params_CopyFrom
        {
            public tk2dSpriteCollectionPlatform self;
            public tk2dSpriteCollectionPlatform source;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Valid_BeforeArgs get_Valid
        {
            add
            {
                HookHandler._beforeget_Valid += value;
                HookHandler.Hookget_Valid();
            }
            remove => HookHandler._beforeget_Valid -= value;
        }

        public static event Delegates.CopyFrom_BeforeArgs CopyFrom
        {
            add
            {
                HookHandler._beforeCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._beforeCopyFrom -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Valid_AfterArgs get_Valid
        {
            add
            {
                HookHandler._afterget_Valid += value;
                HookHandler.Hookget_Valid();
            }
            remove => HookHandler._afterget_Valid -= value;
        }

        public static event Delegates.CopyFrom_AfterArgs CopyFrom
        {
            add
            {
                HookHandler._afterCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._afterCopyFrom -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Valid_WithArgs get_Valid
        {
            add => HookEndpointManager.Add<Delegates.get_Valid_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionPlatform), "get_Valid"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Valid_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionPlatform), "get_Valid"), value);
        }

        public static event On.tk2dSpriteCollectionPlatform.hook_CopyFrom CopyFrom
        {
            add => On.tk2dSpriteCollectionPlatform.CopyFrom += value;
            remove => On.tk2dSpriteCollectionPlatform.CopyFrom -= value;
        }
    }
}