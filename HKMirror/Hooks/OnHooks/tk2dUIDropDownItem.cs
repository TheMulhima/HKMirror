using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIDropDownItem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIDropDownItem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Index()
        {
            if (!HookedList.Contains("get_Index"))
            {
                HookedList.Add("get_Index");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "get_Index"), get_Index);
            }
        }

        internal static event Delegates.get_Index_BeforeArgs _beforeget_Index;
        internal static event Delegates.get_Index_NormalArgs _afterget_Index;

        private static int get_Index(Func<tk2dUIDropDownItem, int> orig, tk2dUIDropDownItem self)
        {
            Delegates.Params_get_Index @params = new()
            {
                self = self
            };
            _beforeget_Index?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Index != null) retVal = _afterget_Index.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Index()
        {
            if (!HookedList.Contains("set_Index"))
            {
                HookedList.Add("set_Index");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "set_Index"), set_Index);
            }
        }

        internal static event Delegates.set_Index_BeforeArgs _beforeset_Index;
        internal static event Delegates.set_Index_NormalArgs _afterset_Index;

        private static void set_Index(Action<tk2dUIDropDownItem, int> orig, tk2dUIDropDownItem self, int value)
        {
            Delegates.Params_set_Index @params = new()
            {
                self = self, value = value
            };
            _beforeset_Index?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Index != null) _afterset_Index.Invoke(@params);
        }

        internal static void Hookget_LabelText()
        {
            if (!HookedList.Contains("get_LabelText"))
            {
                HookedList.Add("get_LabelText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "get_LabelText"), get_LabelText);
            }
        }

        internal static event Delegates.get_LabelText_BeforeArgs _beforeget_LabelText;
        internal static event Delegates.get_LabelText_NormalArgs _afterget_LabelText;

        private static string get_LabelText(Func<tk2dUIDropDownItem, string> orig, tk2dUIDropDownItem self)
        {
            Delegates.Params_get_LabelText @params = new()
            {
                self = self
            };
            _beforeget_LabelText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LabelText != null) retVal = _afterget_LabelText.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LabelText()
        {
            if (!HookedList.Contains("set_LabelText"))
            {
                HookedList.Add("set_LabelText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "set_LabelText"), set_LabelText);
            }
        }

        internal static event Delegates.set_LabelText_BeforeArgs _beforeset_LabelText;
        internal static event Delegates.set_LabelText_NormalArgs _afterset_LabelText;

        private static void set_LabelText(Action<tk2dUIDropDownItem, string> orig, tk2dUIDropDownItem self,
            string value)
        {
            Delegates.Params_set_LabelText @params = new()
            {
                self = self, value = value
            };
            _beforeset_LabelText?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LabelText != null) _afterset_LabelText.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUIDropDownItem.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUIDropDownItem.orig_OnEnable orig, tk2dUIDropDownItem self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUIDropDownItem.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUIDropDownItem.orig_OnDisable orig, tk2dUIDropDownItem self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookItemSelected()
        {
            if (!HookedList.Contains("ItemSelected"))
            {
                HookedList.Add("ItemSelected");
                On.tk2dUIDropDownItem.ItemSelected += ItemSelected;
            }
        }

        internal static event Delegates.ItemSelected_BeforeArgs _beforeItemSelected;
        internal static event Delegates.ItemSelected_NormalArgs _afterItemSelected;

        private static void ItemSelected(On.tk2dUIDropDownItem.orig_ItemSelected orig, tk2dUIDropDownItem self)
        {
            Delegates.Params_ItemSelected @params = new()
            {
                self = self
            };
            _beforeItemSelected?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterItemSelected != null) _afterItemSelected.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Index_BeforeArgs(Params_get_Index args);

        public delegate int get_Index_NormalArgs(Params_get_Index args);

        public delegate void get_LabelText_BeforeArgs(Params_get_LabelText args);

        public delegate string get_LabelText_NormalArgs(Params_get_LabelText args);

        public delegate void ItemSelected_BeforeArgs(Params_ItemSelected args);

        public delegate void ItemSelected_NormalArgs(Params_ItemSelected args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void set_Index_BeforeArgs(Params_set_Index args);

        public delegate void set_Index_NormalArgs(Params_set_Index args);

        public delegate void set_LabelText_BeforeArgs(Params_set_LabelText args);

        public delegate void set_LabelText_NormalArgs(Params_set_LabelText args);

        public sealed class Params_get_Index
        {
            public tk2dUIDropDownItem self;
        }

        public sealed class Params_set_Index
        {
            public tk2dUIDropDownItem self;
            public int value;
        }

        public sealed class Params_get_LabelText
        {
            public tk2dUIDropDownItem self;
        }

        public sealed class Params_set_LabelText
        {
            public tk2dUIDropDownItem self;
            public string value;
        }

        public sealed class Params_OnEnable
        {
            public tk2dUIDropDownItem self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dUIDropDownItem self;
        }

        public sealed class Params_ItemSelected
        {
            public tk2dUIDropDownItem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Index_BeforeArgs get_Index
        {
            add
            {
                HookHandler._beforeget_Index += value;
                HookHandler.Hookget_Index();
            }
            remove => HookHandler._beforeget_Index -= value;
        }

        public static event Delegates.set_Index_BeforeArgs set_Index
        {
            add
            {
                HookHandler._beforeset_Index += value;
                HookHandler.Hookset_Index();
            }
            remove => HookHandler._beforeset_Index -= value;
        }

        public static event Delegates.get_LabelText_BeforeArgs get_LabelText
        {
            add
            {
                HookHandler._beforeget_LabelText += value;
                HookHandler.Hookget_LabelText();
            }
            remove => HookHandler._beforeget_LabelText -= value;
        }

        public static event Delegates.set_LabelText_BeforeArgs set_LabelText
        {
            add
            {
                HookHandler._beforeset_LabelText += value;
                HookHandler.Hookset_LabelText();
            }
            remove => HookHandler._beforeset_LabelText -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.ItemSelected_BeforeArgs ItemSelected
        {
            add
            {
                HookHandler._beforeItemSelected += value;
                HookHandler.HookItemSelected();
            }
            remove => HookHandler._beforeItemSelected -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Index_NormalArgs get_Index
        {
            add
            {
                HookHandler._afterget_Index += value;
                HookHandler.Hookget_Index();
            }
            remove => HookHandler._afterget_Index -= value;
        }

        public static event Delegates.set_Index_NormalArgs set_Index
        {
            add
            {
                HookHandler._afterset_Index += value;
                HookHandler.Hookset_Index();
            }
            remove => HookHandler._afterset_Index -= value;
        }

        public static event Delegates.get_LabelText_NormalArgs get_LabelText
        {
            add
            {
                HookHandler._afterget_LabelText += value;
                HookHandler.Hookget_LabelText();
            }
            remove => HookHandler._afterget_LabelText -= value;
        }

        public static event Delegates.set_LabelText_NormalArgs set_LabelText
        {
            add
            {
                HookHandler._afterset_LabelText += value;
                HookHandler.Hookset_LabelText();
            }
            remove => HookHandler._afterset_LabelText -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.ItemSelected_NormalArgs ItemSelected
        {
            add
            {
                HookHandler._afterItemSelected += value;
                HookHandler.HookItemSelected();
            }
            remove => HookHandler._afterItemSelected -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Index_NormalArgs get_Index
        {
            add => HookEndpointManager.Add<Delegates.get_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "get_Index"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "get_Index"), value);
        }

        public static event Delegates.set_Index_NormalArgs set_Index
        {
            add => HookEndpointManager.Add<Delegates.set_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "set_Index"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "set_Index"), value);
        }

        public static event Delegates.get_LabelText_NormalArgs get_LabelText
        {
            add => HookEndpointManager.Add<Delegates.get_LabelText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "get_LabelText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LabelText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "get_LabelText"), value);
        }

        public static event Delegates.set_LabelText_NormalArgs set_LabelText
        {
            add => HookEndpointManager.Add<Delegates.set_LabelText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "set_LabelText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LabelText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownItem), "set_LabelText"), value);
        }

        public static event On.tk2dUIDropDownItem.hook_OnEnable OnEnable
        {
            add => On.tk2dUIDropDownItem.OnEnable += value;
            remove => On.tk2dUIDropDownItem.OnEnable -= value;
        }

        public static event On.tk2dUIDropDownItem.hook_OnDisable OnDisable
        {
            add => On.tk2dUIDropDownItem.OnDisable += value;
            remove => On.tk2dUIDropDownItem.OnDisable -= value;
        }

        public static event On.tk2dUIDropDownItem.hook_ItemSelected ItemSelected
        {
            add => On.tk2dUIDropDownItem.ItemSelected += value;
            remove => On.tk2dUIDropDownItem.ItemSelected -= value;
        }
    }
}