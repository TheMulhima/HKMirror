using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for SetAnimatorIKGoal class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSetAnimatorIKGoal
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "Reset",
                        true), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPreprocess()
        {
            if (!HookedList.Contains("OnPreprocess"))
            {
                HookedList.Add("OnPreprocess");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal),
                        "OnPreprocess", true), OnPreprocess);
            }
        }

        internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
        internal static event Delegates.OnPreprocess_AfterArgs _afterOnPreprocess;

        private static void OnPreprocess(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self)
        {
            Delegates.Params_OnPreprocess @params = new()
            {
                self = self
            };
            if (_beforeOnPreprocess != null)
            {
                foreach (Delegates.OnPreprocess_BeforeArgs toInvoke in _beforeOnPreprocess.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPreprocess?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnPreprocess != null)
            {
                foreach (Delegates.OnPreprocess_AfterArgs toInvoke in _afterOnPreprocess.GetInvocationList())
                {
                    try
                    {
                        _afterOnPreprocess.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "OnEnter",
                        true), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoAnimatorIK()
        {
            if (!HookedList.Contains("DoAnimatorIK"))
            {
                HookedList.Add("DoAnimatorIK");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal),
                        "DoAnimatorIK", true), DoAnimatorIK);
            }
        }

        internal static event Delegates.DoAnimatorIK_BeforeArgs _beforeDoAnimatorIK;
        internal static event Delegates.DoAnimatorIK_AfterArgs _afterDoAnimatorIK;

        private static void DoAnimatorIK(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal, int> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self, int layerIndex)
        {
            Delegates.Params_DoAnimatorIK @params = new()
            {
                self = self, layerIndex = layerIndex
            };
            if (_beforeDoAnimatorIK != null)
            {
                foreach (Delegates.DoAnimatorIK_BeforeArgs toInvoke in _beforeDoAnimatorIK.GetInvocationList())
                {
                    try
                    {
                        _beforeDoAnimatorIK?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            layerIndex = @params.layerIndex;
            orig(self, layerIndex);
            if (_afterDoAnimatorIK != null)
            {
                foreach (Delegates.DoAnimatorIK_AfterArgs toInvoke in _afterDoAnimatorIK.GetInvocationList())
                {
                    try
                    {
                        _afterDoAnimatorIK.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoSetIKGoal()
        {
            if (!HookedList.Contains("DoSetIKGoal"))
            {
                HookedList.Add("DoSetIKGoal");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal),
                        "DoSetIKGoal", true), DoSetIKGoal);
            }
        }

        internal static event Delegates.DoSetIKGoal_BeforeArgs _beforeDoSetIKGoal;
        internal static event Delegates.DoSetIKGoal_AfterArgs _afterDoSetIKGoal;

        private static void DoSetIKGoal(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self)
        {
            Delegates.Params_DoSetIKGoal @params = new()
            {
                self = self
            };
            if (_beforeDoSetIKGoal != null)
            {
                foreach (Delegates.DoSetIKGoal_BeforeArgs toInvoke in _beforeDoSetIKGoal.GetInvocationList())
                {
                    try
                    {
                        _beforeDoSetIKGoal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoSetIKGoal != null)
            {
                foreach (Delegates.DoSetIKGoal_AfterArgs toInvoke in _afterDoSetIKGoal.GetInvocationList())
                {
                    try
                    {
                        _afterDoSetIKGoal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self);

        public sealed class Params_OnPreprocess
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self;
        }

        public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_AfterArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self);

        public sealed class Params_DoAnimatorIK
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self;
            public int layerIndex;
        }

        public delegate void DoAnimatorIK_BeforeArgs(Params_DoAnimatorIK args);

        public delegate void DoAnimatorIK_AfterArgs(Params_DoAnimatorIK args);

        public delegate void DoAnimatorIK_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal, int> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self, int layerIndex);

        public sealed class Params_DoSetIKGoal
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self;
        }

        public delegate void DoSetIKGoal_BeforeArgs(Params_DoSetIKGoal args);

        public delegate void DoSetIKGoal_AfterArgs(Params_DoSetIKGoal args);

        public delegate void DoSetIKGoal_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorIKGoal> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorIKGoal self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
        {
            add
            {
                HookHandler._beforeOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._beforeOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoAnimatorIK_BeforeArgs DoAnimatorIK
        {
            add
            {
                HookHandler._beforeDoAnimatorIK += value;
                HookHandler.HookDoAnimatorIK();
            }
            remove => HookHandler._beforeDoAnimatorIK -= value;
        }

        public static event Delegates.DoSetIKGoal_BeforeArgs DoSetIKGoal
        {
            add
            {
                HookHandler._beforeDoSetIKGoal += value;
                HookHandler.HookDoSetIKGoal();
            }
            remove => HookHandler._beforeDoSetIKGoal -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnPreprocess_AfterArgs OnPreprocess
        {
            add
            {
                HookHandler._afterOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._afterOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoAnimatorIK_AfterArgs DoAnimatorIK
        {
            add
            {
                HookHandler._afterDoAnimatorIK += value;
                HookHandler.HookDoAnimatorIK();
            }
            remove => HookHandler._afterDoAnimatorIK -= value;
        }

        public static event Delegates.DoSetIKGoal_AfterArgs DoSetIKGoal
        {
            add
            {
                HookHandler._afterDoSetIKGoal += value;
                HookHandler.HookDoSetIKGoal();
            }
            remove => HookHandler._afterDoSetIKGoal -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "Reset", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "Reset", true),
                value);
        }

        public static event Delegates.OnPreprocess_WithArgs OnPreprocess
        {
            add => HookEndpointManager.Add<Delegates.OnPreprocess_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "OnPreprocess",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreprocess_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "OnPreprocess",
                    true), value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "OnEnter",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "OnEnter",
                    true), value);
        }

        public static event Delegates.DoAnimatorIK_WithArgs DoAnimatorIK
        {
            add => HookEndpointManager.Add<Delegates.DoAnimatorIK_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "DoAnimatorIK",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.DoAnimatorIK_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "DoAnimatorIK",
                    true), value);
        }

        public static event Delegates.DoSetIKGoal_WithArgs DoSetIKGoal
        {
            add => HookEndpointManager.Add<Delegates.DoSetIKGoal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "DoSetIKGoal",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.DoSetIKGoal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorIKGoal), "DoSetIKGoal",
                    true), value);
        }
    }
}