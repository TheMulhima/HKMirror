using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using SecPlayerPrefs;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SecurePlayerPrefs class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSecurePlayerPrefs
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookEncrypt()
        {
            if (!HookedList.Contains("Encrypt"))
            {
                HookedList.Add("Encrypt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Encrypt", false), Encrypt);
            }
        }

        internal static event Delegates.Encrypt_BeforeArgs _beforeEncrypt;
        internal static event Delegates.Encrypt_NormalArgs _afterEncrypt;

        private static string Encrypt(Func<string, string> orig, string toEncrypt)
        {
            Delegates.Params_Encrypt @params = new()
            {
                toEncrypt = toEncrypt
            };
            _beforeEncrypt?.Invoke(@params);
            toEncrypt = @params.toEncrypt;
            var retVal = orig(toEncrypt);
            if (_afterEncrypt != null) retVal = _afterEncrypt.Invoke(@params);
            return retVal;
        }

        internal static void HookDecrypt()
        {
            if (!HookedList.Contains("Decrypt"))
            {
                HookedList.Add("Decrypt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Decrypt", false), Decrypt);
            }
        }

        internal static event Delegates.Decrypt_BeforeArgs _beforeDecrypt;
        internal static event Delegates.Decrypt_NormalArgs _afterDecrypt;

        private static string Decrypt(Func<string, string> orig, string toDecrypt)
        {
            Delegates.Params_Decrypt @params = new()
            {
                toDecrypt = toDecrypt
            };
            _beforeDecrypt?.Invoke(@params);
            toDecrypt = @params.toDecrypt;
            var retVal = orig(toDecrypt);
            if (_afterDecrypt != null) retVal = _afterDecrypt.Invoke(@params);
            return retVal;
        }

        internal static void HookUTF8ByteArrayToString()
        {
            if (!HookedList.Contains("UTF8ByteArrayToString"))
            {
                HookedList.Add("UTF8ByteArrayToString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "UTF8ByteArrayToString", false),
                    UTF8ByteArrayToString);
            }
        }

        internal static event Delegates.UTF8ByteArrayToString_BeforeArgs _beforeUTF8ByteArrayToString;
        internal static event Delegates.UTF8ByteArrayToString_NormalArgs _afterUTF8ByteArrayToString;

        private static string UTF8ByteArrayToString(Func<byte[], string> orig, byte[] characters)
        {
            Delegates.Params_UTF8ByteArrayToString @params = new()
            {
                characters = characters
            };
            _beforeUTF8ByteArrayToString?.Invoke(@params);
            characters = @params.characters;
            var retVal = orig(characters);
            if (_afterUTF8ByteArrayToString != null) retVal = _afterUTF8ByteArrayToString.Invoke(@params);
            return retVal;
        }

        internal static void HookStringToUTF8ByteArray()
        {
            if (!HookedList.Contains("StringToUTF8ByteArray"))
            {
                HookedList.Add("StringToUTF8ByteArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "StringToUTF8ByteArray", false),
                    StringToUTF8ByteArray);
            }
        }

        internal static event Delegates.StringToUTF8ByteArray_BeforeArgs _beforeStringToUTF8ByteArray;
        internal static event Delegates.StringToUTF8ByteArray_NormalArgs _afterStringToUTF8ByteArray;

        private static byte[] StringToUTF8ByteArray(Func<string, byte[]> orig, string pXmlString)
        {
            Delegates.Params_StringToUTF8ByteArray @params = new()
            {
                pXmlString = pXmlString
            };
            _beforeStringToUTF8ByteArray?.Invoke(@params);
            pXmlString = @params.pXmlString;
            var retVal = orig(pXmlString);
            if (_afterStringToUTF8ByteArray != null) retVal = _afterStringToUTF8ByteArray.Invoke(@params);
            return retVal;
        }

        internal static void HookSetInt()
        {
            if (!HookedList.Contains("SetInt"))
            {
                HookedList.Add("SetInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetInt", false), SetInt);
            }
        }

        internal static event Delegates.SetInt_BeforeArgs _beforeSetInt;
        internal static event Delegates.SetInt_NormalArgs _afterSetInt;

        private static void SetInt(Action<string, int> orig, string Key, int Value)
        {
            Delegates.Params_SetInt @params = new()
            {
                Key = Key, Value = Value
            };
            _beforeSetInt?.Invoke(@params);
            Key = @params.Key;
            Value = @params.Value;
            orig(Key, Value);
            if (_afterSetInt != null) _afterSetInt.Invoke(@params);
        }

        internal static void HookSetString()
        {
            if (!HookedList.Contains("SetString"))
            {
                HookedList.Add("SetString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetString", false), SetString);
            }
        }

        internal static event Delegates.SetString_BeforeArgs _beforeSetString;
        internal static event Delegates.SetString_NormalArgs _afterSetString;

        private static void SetString(Action<string, string> orig, string Key, string Value)
        {
            Delegates.Params_SetString @params = new()
            {
                Key = Key, Value = Value
            };
            _beforeSetString?.Invoke(@params);
            Key = @params.Key;
            Value = @params.Value;
            orig(Key, Value);
            if (_afterSetString != null) _afterSetString.Invoke(@params);
        }

        internal static void HookSetFloat()
        {
            if (!HookedList.Contains("SetFloat"))
            {
                HookedList.Add("SetFloat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetFloat", false), SetFloat);
            }
        }

        internal static event Delegates.SetFloat_BeforeArgs _beforeSetFloat;
        internal static event Delegates.SetFloat_NormalArgs _afterSetFloat;

        private static void SetFloat(Action<string, float> orig, string Key, float Value)
        {
            Delegates.Params_SetFloat @params = new()
            {
                Key = Key, Value = Value
            };
            _beforeSetFloat?.Invoke(@params);
            Key = @params.Key;
            Value = @params.Value;
            orig(Key, Value);
            if (_afterSetFloat != null) _afterSetFloat.Invoke(@params);
        }

        internal static void HookSetBool()
        {
            if (!HookedList.Contains("SetBool"))
            {
                HookedList.Add("SetBool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetBool", false), SetBool);
            }
        }

        internal static event Delegates.SetBool_BeforeArgs _beforeSetBool;
        internal static event Delegates.SetBool_NormalArgs _afterSetBool;

        private static void SetBool(Action<string, bool> orig, string Key, bool Value)
        {
            Delegates.Params_SetBool @params = new()
            {
                Key = Key, Value = Value
            };
            _beforeSetBool?.Invoke(@params);
            Key = @params.Key;
            Value = @params.Value;
            orig(Key, Value);
            if (_afterSetBool != null) _afterSetBool.Invoke(@params);
        }

        internal static void HookGetString()
        {
            if (!HookedList.Contains("GetString"))
            {
                HookedList.Add("GetString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetString", false), GetString);
            }
        }

        internal static event Delegates.GetString_BeforeArgs _beforeGetString;
        internal static event Delegates.GetString_NormalArgs _afterGetString;

        private static string GetString(Func<string, string> orig, string Key)
        {
            Delegates.Params_GetString @params = new()
            {
                Key = Key
            };
            _beforeGetString?.Invoke(@params);
            Key = @params.Key;
            var retVal = orig(Key);
            if (_afterGetString != null) retVal = _afterGetString.Invoke(@params);
            return retVal;
        }

        internal static void HookGetInt()
        {
            if (!HookedList.Contains("GetInt"))
            {
                HookedList.Add("GetInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetInt", false), GetInt);
            }
        }

        internal static event Delegates.GetInt_BeforeArgs _beforeGetInt;
        internal static event Delegates.GetInt_NormalArgs _afterGetInt;

        private static int GetInt(Func<string, int> orig, string Key)
        {
            Delegates.Params_GetInt @params = new()
            {
                Key = Key
            };
            _beforeGetInt?.Invoke(@params);
            Key = @params.Key;
            var retVal = orig(Key);
            if (_afterGetInt != null) retVal = _afterGetInt.Invoke(@params);
            return retVal;
        }

        internal static void HookGetFloat()
        {
            if (!HookedList.Contains("GetFloat"))
            {
                HookedList.Add("GetFloat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetFloat", false), GetFloat);
            }
        }

        internal static event Delegates.GetFloat_BeforeArgs _beforeGetFloat;
        internal static event Delegates.GetFloat_NormalArgs _afterGetFloat;

        private static float GetFloat(Func<string, float> orig, string Key)
        {
            Delegates.Params_GetFloat @params = new()
            {
                Key = Key
            };
            _beforeGetFloat?.Invoke(@params);
            Key = @params.Key;
            var retVal = orig(Key);
            if (_afterGetFloat != null) retVal = _afterGetFloat.Invoke(@params);
            return retVal;
        }

        internal static void HookGetBool()
        {
            if (!HookedList.Contains("GetBool"))
            {
                HookedList.Add("GetBool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetBool", false), GetBool);
            }
        }

        internal static event Delegates.GetBool_BeforeArgs _beforeGetBool;
        internal static event Delegates.GetBool_NormalArgs _afterGetBool;

        private static bool GetBool(Func<string, bool> orig, string Key)
        {
            Delegates.Params_GetBool @params = new()
            {
                Key = Key
            };
            _beforeGetBool?.Invoke(@params);
            Key = @params.Key;
            var retVal = orig(Key);
            if (_afterGetBool != null) retVal = _afterGetBool.Invoke(@params);
            return retVal;
        }

        internal static void HookDeleteKey()
        {
            if (!HookedList.Contains("DeleteKey"))
            {
                HookedList.Add("DeleteKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "DeleteKey", false), DeleteKey);
            }
        }

        internal static event Delegates.DeleteKey_BeforeArgs _beforeDeleteKey;
        internal static event Delegates.DeleteKey_NormalArgs _afterDeleteKey;

        private static void DeleteKey(Action<string> orig, string Key)
        {
            Delegates.Params_DeleteKey @params = new()
            {
                Key = Key
            };
            _beforeDeleteKey?.Invoke(@params);
            Key = @params.Key;
            orig(Key);
            if (_afterDeleteKey != null) _afterDeleteKey.Invoke(@params);
        }

        internal static void HookDeleteAll()
        {
            if (!HookedList.Contains("DeleteAll"))
            {
                HookedList.Add("DeleteAll");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "DeleteAll", false), DeleteAll);
            }
        }

        internal static event Delegates.DeleteAll_BeforeArgs _beforeDeleteAll;
        internal static event Delegates.DeleteAll_NormalArgs _afterDeleteAll;

        private static void DeleteAll(Action orig)
        {
            _beforeDeleteAll?.Invoke();
            orig();
            if (_afterDeleteAll != null) _afterDeleteAll.Invoke();
        }

        internal static void HookSave()
        {
            if (!HookedList.Contains("Save"))
            {
                HookedList.Add("Save");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Save", false), Save);
            }
        }

        internal static event Delegates.Save_BeforeArgs _beforeSave;
        internal static event Delegates.Save_NormalArgs _afterSave;

        private static void Save(Action orig)
        {
            _beforeSave?.Invoke();
            orig();
            if (_afterSave != null) _afterSave.Invoke();
        }

        internal static void HookHasKey()
        {
            if (!HookedList.Contains("HasKey"))
            {
                HookedList.Add("HasKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "HasKey", false), HasKey);
            }
        }

        internal static event Delegates.HasKey_BeforeArgs _beforeHasKey;
        internal static event Delegates.HasKey_NormalArgs _afterHasKey;

        private static bool HasKey(Func<string, bool> orig, string Key)
        {
            Delegates.Params_HasKey @params = new()
            {
                Key = Key
            };
            _beforeHasKey?.Invoke(@params);
            Key = @params.Key;
            var retVal = orig(Key);
            if (_afterHasKey != null) retVal = _afterHasKey.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Decrypt_BeforeArgs(Params_Decrypt args);

        public delegate string Decrypt_NormalArgs(Params_Decrypt args);

        public delegate void DeleteAll_BeforeArgs();

        public delegate void DeleteAll_NormalArgs();

        public delegate void DeleteKey_BeforeArgs(Params_DeleteKey args);

        public delegate void DeleteKey_NormalArgs(Params_DeleteKey args);

        public delegate void Encrypt_BeforeArgs(Params_Encrypt args);

        public delegate string Encrypt_NormalArgs(Params_Encrypt args);

        public delegate void GetBool_BeforeArgs(Params_GetBool args);

        public delegate bool GetBool_NormalArgs(Params_GetBool args);

        public delegate void GetFloat_BeforeArgs(Params_GetFloat args);

        public delegate float GetFloat_NormalArgs(Params_GetFloat args);

        public delegate void GetInt_BeforeArgs(Params_GetInt args);

        public delegate int GetInt_NormalArgs(Params_GetInt args);

        public delegate void GetString_BeforeArgs(Params_GetString args);

        public delegate string GetString_NormalArgs(Params_GetString args);

        public delegate void HasKey_BeforeArgs(Params_HasKey args);

        public delegate bool HasKey_NormalArgs(Params_HasKey args);

        public delegate void Save_BeforeArgs();

        public delegate void Save_NormalArgs();

        public delegate void SetBool_BeforeArgs(Params_SetBool args);

        public delegate void SetBool_NormalArgs(Params_SetBool args);

        public delegate void SetFloat_BeforeArgs(Params_SetFloat args);

        public delegate void SetFloat_NormalArgs(Params_SetFloat args);

        public delegate void SetInt_BeforeArgs(Params_SetInt args);

        public delegate void SetInt_NormalArgs(Params_SetInt args);

        public delegate void SetString_BeforeArgs(Params_SetString args);

        public delegate void SetString_NormalArgs(Params_SetString args);

        public delegate void StringToUTF8ByteArray_BeforeArgs(Params_StringToUTF8ByteArray args);

        public delegate byte[] StringToUTF8ByteArray_NormalArgs(Params_StringToUTF8ByteArray args);

        public delegate void UTF8ByteArrayToString_BeforeArgs(Params_UTF8ByteArrayToString args);

        public delegate string UTF8ByteArrayToString_NormalArgs(Params_UTF8ByteArrayToString args);

        public sealed class Params_Encrypt
        {
            public string toEncrypt;
        }

        public sealed class Params_Decrypt
        {
            public string toDecrypt;
        }

        public sealed class Params_UTF8ByteArrayToString
        {
            public byte[] characters;
        }

        public sealed class Params_StringToUTF8ByteArray
        {
            public string pXmlString;
        }

        public sealed class Params_SetInt
        {
            public string Key;
            public int Value;
        }

        public sealed class Params_SetString
        {
            public string Key;
            public string Value;
        }

        public sealed class Params_SetFloat
        {
            public string Key;
            public float Value;
        }

        public sealed class Params_SetBool
        {
            public string Key;
            public bool Value;
        }

        public sealed class Params_GetString
        {
            public string Key;
        }

        public sealed class Params_GetInt
        {
            public string Key;
        }

        public sealed class Params_GetFloat
        {
            public string Key;
        }

        public sealed class Params_GetBool
        {
            public string Key;
        }

        public sealed class Params_DeleteKey
        {
            public string Key;
        }

        public sealed class Params_HasKey
        {
            public string Key;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Encrypt_BeforeArgs Encrypt
        {
            add
            {
                HookHandler._beforeEncrypt += value;
                HookHandler.HookEncrypt();
            }
            remove => HookHandler._beforeEncrypt -= value;
        }

        public static event Delegates.Decrypt_BeforeArgs Decrypt
        {
            add
            {
                HookHandler._beforeDecrypt += value;
                HookHandler.HookDecrypt();
            }
            remove => HookHandler._beforeDecrypt -= value;
        }

        public static event Delegates.UTF8ByteArrayToString_BeforeArgs UTF8ByteArrayToString
        {
            add
            {
                HookHandler._beforeUTF8ByteArrayToString += value;
                HookHandler.HookUTF8ByteArrayToString();
            }
            remove => HookHandler._beforeUTF8ByteArrayToString -= value;
        }

        public static event Delegates.StringToUTF8ByteArray_BeforeArgs StringToUTF8ByteArray
        {
            add
            {
                HookHandler._beforeStringToUTF8ByteArray += value;
                HookHandler.HookStringToUTF8ByteArray();
            }
            remove => HookHandler._beforeStringToUTF8ByteArray -= value;
        }

        public static event Delegates.SetInt_BeforeArgs SetInt
        {
            add
            {
                HookHandler._beforeSetInt += value;
                HookHandler.HookSetInt();
            }
            remove => HookHandler._beforeSetInt -= value;
        }

        public static event Delegates.SetString_BeforeArgs SetString
        {
            add
            {
                HookHandler._beforeSetString += value;
                HookHandler.HookSetString();
            }
            remove => HookHandler._beforeSetString -= value;
        }

        public static event Delegates.SetFloat_BeforeArgs SetFloat
        {
            add
            {
                HookHandler._beforeSetFloat += value;
                HookHandler.HookSetFloat();
            }
            remove => HookHandler._beforeSetFloat -= value;
        }

        public static event Delegates.SetBool_BeforeArgs SetBool
        {
            add
            {
                HookHandler._beforeSetBool += value;
                HookHandler.HookSetBool();
            }
            remove => HookHandler._beforeSetBool -= value;
        }

        public static event Delegates.GetString_BeforeArgs GetString
        {
            add
            {
                HookHandler._beforeGetString += value;
                HookHandler.HookGetString();
            }
            remove => HookHandler._beforeGetString -= value;
        }

        public static event Delegates.GetInt_BeforeArgs GetInt
        {
            add
            {
                HookHandler._beforeGetInt += value;
                HookHandler.HookGetInt();
            }
            remove => HookHandler._beforeGetInt -= value;
        }

        public static event Delegates.GetFloat_BeforeArgs GetFloat
        {
            add
            {
                HookHandler._beforeGetFloat += value;
                HookHandler.HookGetFloat();
            }
            remove => HookHandler._beforeGetFloat -= value;
        }

        public static event Delegates.GetBool_BeforeArgs GetBool
        {
            add
            {
                HookHandler._beforeGetBool += value;
                HookHandler.HookGetBool();
            }
            remove => HookHandler._beforeGetBool -= value;
        }

        public static event Delegates.DeleteKey_BeforeArgs DeleteKey
        {
            add
            {
                HookHandler._beforeDeleteKey += value;
                HookHandler.HookDeleteKey();
            }
            remove => HookHandler._beforeDeleteKey -= value;
        }

        public static event Delegates.DeleteAll_BeforeArgs DeleteAll
        {
            add
            {
                HookHandler._beforeDeleteAll += value;
                HookHandler.HookDeleteAll();
            }
            remove => HookHandler._beforeDeleteAll -= value;
        }

        public static event Delegates.Save_BeforeArgs Save
        {
            add
            {
                HookHandler._beforeSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._beforeSave -= value;
        }

        public static event Delegates.HasKey_BeforeArgs HasKey
        {
            add
            {
                HookHandler._beforeHasKey += value;
                HookHandler.HookHasKey();
            }
            remove => HookHandler._beforeHasKey -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Encrypt_NormalArgs Encrypt
        {
            add
            {
                HookHandler._afterEncrypt += value;
                HookHandler.HookEncrypt();
            }
            remove => HookHandler._afterEncrypt -= value;
        }

        public static event Delegates.Decrypt_NormalArgs Decrypt
        {
            add
            {
                HookHandler._afterDecrypt += value;
                HookHandler.HookDecrypt();
            }
            remove => HookHandler._afterDecrypt -= value;
        }

        public static event Delegates.UTF8ByteArrayToString_NormalArgs UTF8ByteArrayToString
        {
            add
            {
                HookHandler._afterUTF8ByteArrayToString += value;
                HookHandler.HookUTF8ByteArrayToString();
            }
            remove => HookHandler._afterUTF8ByteArrayToString -= value;
        }

        public static event Delegates.StringToUTF8ByteArray_NormalArgs StringToUTF8ByteArray
        {
            add
            {
                HookHandler._afterStringToUTF8ByteArray += value;
                HookHandler.HookStringToUTF8ByteArray();
            }
            remove => HookHandler._afterStringToUTF8ByteArray -= value;
        }

        public static event Delegates.SetInt_NormalArgs SetInt
        {
            add
            {
                HookHandler._afterSetInt += value;
                HookHandler.HookSetInt();
            }
            remove => HookHandler._afterSetInt -= value;
        }

        public static event Delegates.SetString_NormalArgs SetString
        {
            add
            {
                HookHandler._afterSetString += value;
                HookHandler.HookSetString();
            }
            remove => HookHandler._afterSetString -= value;
        }

        public static event Delegates.SetFloat_NormalArgs SetFloat
        {
            add
            {
                HookHandler._afterSetFloat += value;
                HookHandler.HookSetFloat();
            }
            remove => HookHandler._afterSetFloat -= value;
        }

        public static event Delegates.SetBool_NormalArgs SetBool
        {
            add
            {
                HookHandler._afterSetBool += value;
                HookHandler.HookSetBool();
            }
            remove => HookHandler._afterSetBool -= value;
        }

        public static event Delegates.GetString_NormalArgs GetString
        {
            add
            {
                HookHandler._afterGetString += value;
                HookHandler.HookGetString();
            }
            remove => HookHandler._afterGetString -= value;
        }

        public static event Delegates.GetInt_NormalArgs GetInt
        {
            add
            {
                HookHandler._afterGetInt += value;
                HookHandler.HookGetInt();
            }
            remove => HookHandler._afterGetInt -= value;
        }

        public static event Delegates.GetFloat_NormalArgs GetFloat
        {
            add
            {
                HookHandler._afterGetFloat += value;
                HookHandler.HookGetFloat();
            }
            remove => HookHandler._afterGetFloat -= value;
        }

        public static event Delegates.GetBool_NormalArgs GetBool
        {
            add
            {
                HookHandler._afterGetBool += value;
                HookHandler.HookGetBool();
            }
            remove => HookHandler._afterGetBool -= value;
        }

        public static event Delegates.DeleteKey_NormalArgs DeleteKey
        {
            add
            {
                HookHandler._afterDeleteKey += value;
                HookHandler.HookDeleteKey();
            }
            remove => HookHandler._afterDeleteKey -= value;
        }

        public static event Delegates.DeleteAll_NormalArgs DeleteAll
        {
            add
            {
                HookHandler._afterDeleteAll += value;
                HookHandler.HookDeleteAll();
            }
            remove => HookHandler._afterDeleteAll -= value;
        }

        public static event Delegates.Save_NormalArgs Save
        {
            add
            {
                HookHandler._afterSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._afterSave -= value;
        }

        public static event Delegates.HasKey_NormalArgs HasKey
        {
            add
            {
                HookHandler._afterHasKey += value;
                HookHandler.HookHasKey();
            }
            remove => HookHandler._afterHasKey -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Encrypt_NormalArgs Encrypt
        {
            add => HookEndpointManager.Add<Delegates.Encrypt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Encrypt", false), value);
            remove => HookEndpointManager.Remove<Delegates.Encrypt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Encrypt", false), value);
        }

        public static event Delegates.Decrypt_NormalArgs Decrypt
        {
            add => HookEndpointManager.Add<Delegates.Decrypt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Decrypt", false), value);
            remove => HookEndpointManager.Remove<Delegates.Decrypt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Decrypt", false), value);
        }

        public static event Delegates.UTF8ByteArrayToString_NormalArgs UTF8ByteArrayToString
        {
            add => HookEndpointManager.Add<Delegates.UTF8ByteArrayToString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "UTF8ByteArrayToString", false), value);
            remove => HookEndpointManager.Remove<Delegates.UTF8ByteArrayToString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "UTF8ByteArrayToString", false), value);
        }

        public static event Delegates.StringToUTF8ByteArray_NormalArgs StringToUTF8ByteArray
        {
            add => HookEndpointManager.Add<Delegates.StringToUTF8ByteArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "StringToUTF8ByteArray", false), value);
            remove => HookEndpointManager.Remove<Delegates.StringToUTF8ByteArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "StringToUTF8ByteArray", false), value);
        }

        public static event Delegates.SetInt_NormalArgs SetInt
        {
            add => HookEndpointManager.Add<Delegates.SetInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetInt", false), value);
        }

        public static event Delegates.SetString_NormalArgs SetString
        {
            add => HookEndpointManager.Add<Delegates.SetString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetString", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetString", false), value);
        }

        public static event Delegates.SetFloat_NormalArgs SetFloat
        {
            add => HookEndpointManager.Add<Delegates.SetFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetFloat", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetFloat", false), value);
        }

        public static event Delegates.SetBool_NormalArgs SetBool
        {
            add => HookEndpointManager.Add<Delegates.SetBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetBool", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "SetBool", false), value);
        }

        public static event Delegates.GetString_NormalArgs GetString
        {
            add => HookEndpointManager.Add<Delegates.GetString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetString", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetString", false), value);
        }

        public static event Delegates.GetInt_NormalArgs GetInt
        {
            add => HookEndpointManager.Add<Delegates.GetInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetInt", false), value);
        }

        public static event Delegates.GetFloat_NormalArgs GetFloat
        {
            add => HookEndpointManager.Add<Delegates.GetFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetFloat", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetFloat", false), value);
        }

        public static event Delegates.GetBool_NormalArgs GetBool
        {
            add => HookEndpointManager.Add<Delegates.GetBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetBool", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "GetBool", false), value);
        }

        public static event Delegates.DeleteKey_NormalArgs DeleteKey
        {
            add => HookEndpointManager.Add<Delegates.DeleteKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "DeleteKey", false), value);
            remove => HookEndpointManager.Remove<Delegates.DeleteKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "DeleteKey", false), value);
        }

        public static event Delegates.DeleteAll_NormalArgs DeleteAll
        {
            add => HookEndpointManager.Add<Delegates.DeleteAll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "DeleteAll", false), value);
            remove => HookEndpointManager.Remove<Delegates.DeleteAll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "DeleteAll", false), value);
        }

        public static event Delegates.Save_NormalArgs Save
        {
            add => HookEndpointManager.Add<Delegates.Save_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Save", false), value);
            remove => HookEndpointManager.Remove<Delegates.Save_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "Save", false), value);
        }

        public static event Delegates.HasKey_NormalArgs HasKey
        {
            add => HookEndpointManager.Add<Delegates.HasKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "HasKey", false), value);
            remove => HookEndpointManager.Remove<Delegates.HasKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecurePlayerPrefs), "HasKey", false), value);
        }
    }
}