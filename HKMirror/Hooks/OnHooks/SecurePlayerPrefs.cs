using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for SecurePlayerPrefs class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSecurePlayerPrefs
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookEncrypt()
{
if (!HookedList.Contains("Encrypt"))
{
HookedList.Add("Encrypt");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Encrypt", false), Encrypt);

}
}
internal static event Delegates.Encrypt_BeforeArgs _beforeEncrypt;
internal static event Delegates.Encrypt_AfterArgs _afterEncrypt;
private static string Encrypt(Func< string, string> orig,  string toEncrypt)
{
Delegates.Params_Encrypt @params = new() 
{
toEncrypt = toEncrypt
};
if (_beforeEncrypt != null)
{
foreach (Delegates.Encrypt_BeforeArgs toInvoke in _beforeEncrypt.GetInvocationList())
{
try
{
_beforeEncrypt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
toEncrypt = @params.toEncrypt;
var retVal = orig(toEncrypt);
if (_afterEncrypt != null)
{
foreach (Delegates.Encrypt_AfterArgs toInvoke in _afterEncrypt.GetInvocationList())
{
try
{
retVal = _afterEncrypt.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookDecrypt()
{
if (!HookedList.Contains("Decrypt"))
{
HookedList.Add("Decrypt");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Decrypt", false), Decrypt);

}
}
internal static event Delegates.Decrypt_BeforeArgs _beforeDecrypt;
internal static event Delegates.Decrypt_AfterArgs _afterDecrypt;
private static string Decrypt(Func< string, string> orig,  string toDecrypt)
{
Delegates.Params_Decrypt @params = new() 
{
toDecrypt = toDecrypt
};
if (_beforeDecrypt != null)
{
foreach (Delegates.Decrypt_BeforeArgs toInvoke in _beforeDecrypt.GetInvocationList())
{
try
{
_beforeDecrypt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
toDecrypt = @params.toDecrypt;
var retVal = orig(toDecrypt);
if (_afterDecrypt != null)
{
foreach (Delegates.Decrypt_AfterArgs toInvoke in _afterDecrypt.GetInvocationList())
{
try
{
retVal = _afterDecrypt.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookStringToUTF8ByteArray()
{
if (!HookedList.Contains("StringToUTF8ByteArray"))
{
HookedList.Add("StringToUTF8ByteArray");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "StringToUTF8ByteArray", false), StringToUTF8ByteArray);

}
}
internal static event Delegates.StringToUTF8ByteArray_BeforeArgs _beforeStringToUTF8ByteArray;
internal static event Delegates.StringToUTF8ByteArray_AfterArgs _afterStringToUTF8ByteArray;
private static byte[] StringToUTF8ByteArray(Func< string, byte[]> orig,  string pXmlString)
{
Delegates.Params_StringToUTF8ByteArray @params = new() 
{
pXmlString = pXmlString
};
if (_beforeStringToUTF8ByteArray != null)
{
foreach (Delegates.StringToUTF8ByteArray_BeforeArgs toInvoke in _beforeStringToUTF8ByteArray.GetInvocationList())
{
try
{
_beforeStringToUTF8ByteArray?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
pXmlString = @params.pXmlString;
var retVal = orig(pXmlString);
if (_afterStringToUTF8ByteArray != null)
{
foreach (Delegates.StringToUTF8ByteArray_AfterArgs toInvoke in _afterStringToUTF8ByteArray.GetInvocationList())
{
try
{
retVal = _afterStringToUTF8ByteArray.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetInt()
{
if (!HookedList.Contains("SetInt"))
{
HookedList.Add("SetInt");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetInt", false), SetInt);

}
}
internal static event Delegates.SetInt_BeforeArgs _beforeSetInt;
internal static event Delegates.SetInt_AfterArgs _afterSetInt;
private static void SetInt(Action< string,  int> orig,  string Key,  int Value)
{
Delegates.Params_SetInt @params = new() 
{
Key = Key
, Value = Value
};
if (_beforeSetInt != null)
{
foreach (Delegates.SetInt_BeforeArgs toInvoke in _beforeSetInt.GetInvocationList())
{
try
{
_beforeSetInt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
Value = @params.Value;
orig(Key, Value);
if (_afterSetInt != null)
{
foreach (Delegates.SetInt_AfterArgs toInvoke in _afterSetInt.GetInvocationList())
{
try
{
_afterSetInt.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetString()
{
if (!HookedList.Contains("SetString"))
{
HookedList.Add("SetString");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetString", false), SetString);

}
}
internal static event Delegates.SetString_BeforeArgs _beforeSetString;
internal static event Delegates.SetString_AfterArgs _afterSetString;
private static void SetString(Action< string,  string> orig,  string Key,  string Value)
{
Delegates.Params_SetString @params = new() 
{
Key = Key
, Value = Value
};
if (_beforeSetString != null)
{
foreach (Delegates.SetString_BeforeArgs toInvoke in _beforeSetString.GetInvocationList())
{
try
{
_beforeSetString?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
Value = @params.Value;
orig(Key, Value);
if (_afterSetString != null)
{
foreach (Delegates.SetString_AfterArgs toInvoke in _afterSetString.GetInvocationList())
{
try
{
_afterSetString.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetFloat()
{
if (!HookedList.Contains("SetFloat"))
{
HookedList.Add("SetFloat");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetFloat", false), SetFloat);

}
}
internal static event Delegates.SetFloat_BeforeArgs _beforeSetFloat;
internal static event Delegates.SetFloat_AfterArgs _afterSetFloat;
private static void SetFloat(Action< string,  float> orig,  string Key,  float Value)
{
Delegates.Params_SetFloat @params = new() 
{
Key = Key
, Value = Value
};
if (_beforeSetFloat != null)
{
foreach (Delegates.SetFloat_BeforeArgs toInvoke in _beforeSetFloat.GetInvocationList())
{
try
{
_beforeSetFloat?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
Value = @params.Value;
orig(Key, Value);
if (_afterSetFloat != null)
{
foreach (Delegates.SetFloat_AfterArgs toInvoke in _afterSetFloat.GetInvocationList())
{
try
{
_afterSetFloat.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetBool()
{
if (!HookedList.Contains("SetBool"))
{
HookedList.Add("SetBool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetBool", false), SetBool);

}
}
internal static event Delegates.SetBool_BeforeArgs _beforeSetBool;
internal static event Delegates.SetBool_AfterArgs _afterSetBool;
private static void SetBool(Action< string,  bool> orig,  string Key,  bool Value)
{
Delegates.Params_SetBool @params = new() 
{
Key = Key
, Value = Value
};
if (_beforeSetBool != null)
{
foreach (Delegates.SetBool_BeforeArgs toInvoke in _beforeSetBool.GetInvocationList())
{
try
{
_beforeSetBool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
Value = @params.Value;
orig(Key, Value);
if (_afterSetBool != null)
{
foreach (Delegates.SetBool_AfterArgs toInvoke in _afterSetBool.GetInvocationList())
{
try
{
_afterSetBool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetString()
{
if (!HookedList.Contains("GetString"))
{
HookedList.Add("GetString");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetString", false), GetString);

}
}
internal static event Delegates.GetString_BeforeArgs _beforeGetString;
internal static event Delegates.GetString_AfterArgs _afterGetString;
private static string GetString(Func< string, string> orig,  string Key)
{
Delegates.Params_GetString @params = new() 
{
Key = Key
};
if (_beforeGetString != null)
{
foreach (Delegates.GetString_BeforeArgs toInvoke in _beforeGetString.GetInvocationList())
{
try
{
_beforeGetString?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
var retVal = orig(Key);
if (_afterGetString != null)
{
foreach (Delegates.GetString_AfterArgs toInvoke in _afterGetString.GetInvocationList())
{
try
{
retVal = _afterGetString.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetInt()
{
if (!HookedList.Contains("GetInt"))
{
HookedList.Add("GetInt");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetInt", false), GetInt);

}
}
internal static event Delegates.GetInt_BeforeArgs _beforeGetInt;
internal static event Delegates.GetInt_AfterArgs _afterGetInt;
private static int GetInt(Func< string, int> orig,  string Key)
{
Delegates.Params_GetInt @params = new() 
{
Key = Key
};
if (_beforeGetInt != null)
{
foreach (Delegates.GetInt_BeforeArgs toInvoke in _beforeGetInt.GetInvocationList())
{
try
{
_beforeGetInt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
var retVal = orig(Key);
if (_afterGetInt != null)
{
foreach (Delegates.GetInt_AfterArgs toInvoke in _afterGetInt.GetInvocationList())
{
try
{
retVal = _afterGetInt.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetFloat()
{
if (!HookedList.Contains("GetFloat"))
{
HookedList.Add("GetFloat");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetFloat", false), GetFloat);

}
}
internal static event Delegates.GetFloat_BeforeArgs _beforeGetFloat;
internal static event Delegates.GetFloat_AfterArgs _afterGetFloat;
private static float GetFloat(Func< string, float> orig,  string Key)
{
Delegates.Params_GetFloat @params = new() 
{
Key = Key
};
if (_beforeGetFloat != null)
{
foreach (Delegates.GetFloat_BeforeArgs toInvoke in _beforeGetFloat.GetInvocationList())
{
try
{
_beforeGetFloat?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
var retVal = orig(Key);
if (_afterGetFloat != null)
{
foreach (Delegates.GetFloat_AfterArgs toInvoke in _afterGetFloat.GetInvocationList())
{
try
{
retVal = _afterGetFloat.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetBool()
{
if (!HookedList.Contains("GetBool"))
{
HookedList.Add("GetBool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetBool", false), GetBool);

}
}
internal static event Delegates.GetBool_BeforeArgs _beforeGetBool;
internal static event Delegates.GetBool_AfterArgs _afterGetBool;
private static bool GetBool(Func< string, bool> orig,  string Key)
{
Delegates.Params_GetBool @params = new() 
{
Key = Key
};
if (_beforeGetBool != null)
{
foreach (Delegates.GetBool_BeforeArgs toInvoke in _beforeGetBool.GetInvocationList())
{
try
{
_beforeGetBool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
var retVal = orig(Key);
if (_afterGetBool != null)
{
foreach (Delegates.GetBool_AfterArgs toInvoke in _afterGetBool.GetInvocationList())
{
try
{
retVal = _afterGetBool.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookDeleteKey()
{
if (!HookedList.Contains("DeleteKey"))
{
HookedList.Add("DeleteKey");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "DeleteKey", false), DeleteKey);

}
}
internal static event Delegates.DeleteKey_BeforeArgs _beforeDeleteKey;
internal static event Delegates.DeleteKey_AfterArgs _afterDeleteKey;
private static void DeleteKey(Action< string> orig,  string Key)
{
Delegates.Params_DeleteKey @params = new() 
{
Key = Key
};
if (_beforeDeleteKey != null)
{
foreach (Delegates.DeleteKey_BeforeArgs toInvoke in _beforeDeleteKey.GetInvocationList())
{
try
{
_beforeDeleteKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
orig(Key);
if (_afterDeleteKey != null)
{
foreach (Delegates.DeleteKey_AfterArgs toInvoke in _afterDeleteKey.GetInvocationList())
{
try
{
_afterDeleteKey.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDeleteAll()
{
if (!HookedList.Contains("DeleteAll"))
{
HookedList.Add("DeleteAll");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "DeleteAll", false), DeleteAll);

}
}
internal static event Delegates.DeleteAll_BeforeArgs _beforeDeleteAll;
internal static event Delegates.DeleteAll_AfterArgs _afterDeleteAll;
private static void DeleteAll(Action orig)
{
if (_beforeDeleteAll != null)
{
foreach (Delegates.DeleteAll_BeforeArgs toInvoke in _beforeDeleteAll.GetInvocationList())
{
try
{
_beforeDeleteAll?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
orig();
if (_afterDeleteAll != null)
{
foreach (Delegates.DeleteAll_AfterArgs toInvoke in _afterDeleteAll.GetInvocationList())
{
try
{
_afterDeleteAll.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSave()
{
if (!HookedList.Contains("Save"))
{
HookedList.Add("Save");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Save", false), Save);

}
}
internal static event Delegates.Save_BeforeArgs _beforeSave;
internal static event Delegates.Save_AfterArgs _afterSave;
private static void Save(Action orig)
{
if (_beforeSave != null)
{
foreach (Delegates.Save_BeforeArgs toInvoke in _beforeSave.GetInvocationList())
{
try
{
_beforeSave?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
orig();
if (_afterSave != null)
{
foreach (Delegates.Save_AfterArgs toInvoke in _afterSave.GetInvocationList())
{
try
{
_afterSave.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookHasKey()
{
if (!HookedList.Contains("HasKey"))
{
HookedList.Add("HasKey");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "HasKey", false), HasKey);

}
}
internal static event Delegates.HasKey_BeforeArgs _beforeHasKey;
internal static event Delegates.HasKey_AfterArgs _afterHasKey;
private static bool HasKey(Func< string, bool> orig,  string Key)
{
Delegates.Params_HasKey @params = new() 
{
Key = Key
};
if (_beforeHasKey != null)
{
foreach (Delegates.HasKey_BeforeArgs toInvoke in _beforeHasKey.GetInvocationList())
{
try
{
_beforeHasKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
Key = @params.Key;
var retVal = orig(Key);
if (_afterHasKey != null)
{
foreach (Delegates.HasKey_AfterArgs toInvoke in _afterHasKey.GetInvocationList())
{
try
{
retVal = _afterHasKey.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Encrypt
{
public string toEncrypt;
}
public delegate void Encrypt_BeforeArgs(Params_Encrypt args);
public delegate string Encrypt_AfterArgs(Params_Encrypt args, string ret);
public delegate string Encrypt_WithArgs (Func< string, string> orig,  string toEncrypt);
public sealed class Params_Decrypt
{
public string toDecrypt;
}
public delegate void Decrypt_BeforeArgs(Params_Decrypt args);
public delegate string Decrypt_AfterArgs(Params_Decrypt args, string ret);
public delegate string Decrypt_WithArgs (Func< string, string> orig,  string toDecrypt);
public sealed class Params_StringToUTF8ByteArray
{
public string pXmlString;
}
public delegate void StringToUTF8ByteArray_BeforeArgs(Params_StringToUTF8ByteArray args);
public delegate byte[] StringToUTF8ByteArray_AfterArgs(Params_StringToUTF8ByteArray args, byte[] ret);
public delegate byte[] StringToUTF8ByteArray_WithArgs (Func< string, byte[]> orig,  string pXmlString);
public sealed class Params_SetInt
{
public string Key;
public int Value;
}
public delegate void SetInt_BeforeArgs(Params_SetInt args);
public delegate void SetInt_AfterArgs(Params_SetInt args);
public delegate void SetInt_WithArgs (Action< string,  int> orig,  string Key,  int Value);
public sealed class Params_SetString
{
public string Key;
public string Value;
}
public delegate void SetString_BeforeArgs(Params_SetString args);
public delegate void SetString_AfterArgs(Params_SetString args);
public delegate void SetString_WithArgs (Action< string,  string> orig,  string Key,  string Value);
public sealed class Params_SetFloat
{
public string Key;
public float Value;
}
public delegate void SetFloat_BeforeArgs(Params_SetFloat args);
public delegate void SetFloat_AfterArgs(Params_SetFloat args);
public delegate void SetFloat_WithArgs (Action< string,  float> orig,  string Key,  float Value);
public sealed class Params_SetBool
{
public string Key;
public bool Value;
}
public delegate void SetBool_BeforeArgs(Params_SetBool args);
public delegate void SetBool_AfterArgs(Params_SetBool args);
public delegate void SetBool_WithArgs (Action< string,  bool> orig,  string Key,  bool Value);
public sealed class Params_GetString
{
public string Key;
}
public delegate void GetString_BeforeArgs(Params_GetString args);
public delegate string GetString_AfterArgs(Params_GetString args, string ret);
public delegate string GetString_WithArgs (Func< string, string> orig,  string Key);
public sealed class Params_GetInt
{
public string Key;
}
public delegate void GetInt_BeforeArgs(Params_GetInt args);
public delegate int GetInt_AfterArgs(Params_GetInt args, int ret);
public delegate int GetInt_WithArgs (Func< string, int> orig,  string Key);
public sealed class Params_GetFloat
{
public string Key;
}
public delegate void GetFloat_BeforeArgs(Params_GetFloat args);
public delegate float GetFloat_AfterArgs(Params_GetFloat args, float ret);
public delegate float GetFloat_WithArgs (Func< string, float> orig,  string Key);
public sealed class Params_GetBool
{
public string Key;
}
public delegate void GetBool_BeforeArgs(Params_GetBool args);
public delegate bool GetBool_AfterArgs(Params_GetBool args, bool ret);
public delegate bool GetBool_WithArgs (Func< string, bool> orig,  string Key);
public sealed class Params_DeleteKey
{
public string Key;
}
public delegate void DeleteKey_BeforeArgs(Params_DeleteKey args);
public delegate void DeleteKey_AfterArgs(Params_DeleteKey args);
public delegate void DeleteKey_WithArgs (Action< string> orig,  string Key);
public delegate void DeleteAll_BeforeArgs();
public delegate void DeleteAll_AfterArgs();
public delegate void DeleteAll_WithArgs (Action orig);
public delegate void Save_BeforeArgs();
public delegate void Save_AfterArgs();
public delegate void Save_WithArgs (Action orig);
public sealed class Params_HasKey
{
public string Key;
}
public delegate void HasKey_BeforeArgs(Params_HasKey args);
public delegate bool HasKey_AfterArgs(Params_HasKey args, bool ret);
public delegate bool HasKey_WithArgs (Func< string, bool> orig,  string Key);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Encrypt_BeforeArgs Encrypt
{
add
{

HookHandler._beforeEncrypt += value;
HookHandler.HookEncrypt();
}
remove => HookHandler._beforeEncrypt -= value;
}
public static event Delegates.Decrypt_BeforeArgs Decrypt
{
add
{

HookHandler._beforeDecrypt += value;
HookHandler.HookDecrypt();
}
remove => HookHandler._beforeDecrypt -= value;
}
public static event Delegates.StringToUTF8ByteArray_BeforeArgs StringToUTF8ByteArray
{
add
{

HookHandler._beforeStringToUTF8ByteArray += value;
HookHandler.HookStringToUTF8ByteArray();
}
remove => HookHandler._beforeStringToUTF8ByteArray -= value;
}
public static event Delegates.SetInt_BeforeArgs SetInt
{
add
{

HookHandler._beforeSetInt += value;
HookHandler.HookSetInt();
}
remove => HookHandler._beforeSetInt -= value;
}
public static event Delegates.SetString_BeforeArgs SetString
{
add
{

HookHandler._beforeSetString += value;
HookHandler.HookSetString();
}
remove => HookHandler._beforeSetString -= value;
}
public static event Delegates.SetFloat_BeforeArgs SetFloat
{
add
{

HookHandler._beforeSetFloat += value;
HookHandler.HookSetFloat();
}
remove => HookHandler._beforeSetFloat -= value;
}
public static event Delegates.SetBool_BeforeArgs SetBool
{
add
{

HookHandler._beforeSetBool += value;
HookHandler.HookSetBool();
}
remove => HookHandler._beforeSetBool -= value;
}
public static event Delegates.GetString_BeforeArgs GetString
{
add
{

HookHandler._beforeGetString += value;
HookHandler.HookGetString();
}
remove => HookHandler._beforeGetString -= value;
}
public static event Delegates.GetInt_BeforeArgs GetInt
{
add
{

HookHandler._beforeGetInt += value;
HookHandler.HookGetInt();
}
remove => HookHandler._beforeGetInt -= value;
}
public static event Delegates.GetFloat_BeforeArgs GetFloat
{
add
{

HookHandler._beforeGetFloat += value;
HookHandler.HookGetFloat();
}
remove => HookHandler._beforeGetFloat -= value;
}
public static event Delegates.GetBool_BeforeArgs GetBool
{
add
{

HookHandler._beforeGetBool += value;
HookHandler.HookGetBool();
}
remove => HookHandler._beforeGetBool -= value;
}
public static event Delegates.DeleteKey_BeforeArgs DeleteKey
{
add
{

HookHandler._beforeDeleteKey += value;
HookHandler.HookDeleteKey();
}
remove => HookHandler._beforeDeleteKey -= value;
}
public static event Delegates.DeleteAll_BeforeArgs DeleteAll
{
add
{

HookHandler._beforeDeleteAll += value;
HookHandler.HookDeleteAll();
}
remove => HookHandler._beforeDeleteAll -= value;
}
public static event Delegates.Save_BeforeArgs Save
{
add
{

HookHandler._beforeSave += value;
HookHandler.HookSave();
}
remove => HookHandler._beforeSave -= value;
}
public static event Delegates.HasKey_BeforeArgs HasKey
{
add
{

HookHandler._beforeHasKey += value;
HookHandler.HookHasKey();
}
remove => HookHandler._beforeHasKey -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Encrypt_AfterArgs Encrypt
{
add
{

HookHandler._afterEncrypt += value;
HookHandler.HookEncrypt();
}
remove => HookHandler._afterEncrypt -= value;
}
public static event Delegates.Decrypt_AfterArgs Decrypt
{
add
{

HookHandler._afterDecrypt += value;
HookHandler.HookDecrypt();
}
remove => HookHandler._afterDecrypt -= value;
}
public static event Delegates.StringToUTF8ByteArray_AfterArgs StringToUTF8ByteArray
{
add
{

HookHandler._afterStringToUTF8ByteArray += value;
HookHandler.HookStringToUTF8ByteArray();
}
remove => HookHandler._afterStringToUTF8ByteArray -= value;
}
public static event Delegates.SetInt_AfterArgs SetInt
{
add
{

HookHandler._afterSetInt += value;
HookHandler.HookSetInt();
}
remove => HookHandler._afterSetInt -= value;
}
public static event Delegates.SetString_AfterArgs SetString
{
add
{

HookHandler._afterSetString += value;
HookHandler.HookSetString();
}
remove => HookHandler._afterSetString -= value;
}
public static event Delegates.SetFloat_AfterArgs SetFloat
{
add
{

HookHandler._afterSetFloat += value;
HookHandler.HookSetFloat();
}
remove => HookHandler._afterSetFloat -= value;
}
public static event Delegates.SetBool_AfterArgs SetBool
{
add
{

HookHandler._afterSetBool += value;
HookHandler.HookSetBool();
}
remove => HookHandler._afterSetBool -= value;
}
public static event Delegates.GetString_AfterArgs GetString
{
add
{

HookHandler._afterGetString += value;
HookHandler.HookGetString();
}
remove => HookHandler._afterGetString -= value;
}
public static event Delegates.GetInt_AfterArgs GetInt
{
add
{

HookHandler._afterGetInt += value;
HookHandler.HookGetInt();
}
remove => HookHandler._afterGetInt -= value;
}
public static event Delegates.GetFloat_AfterArgs GetFloat
{
add
{

HookHandler._afterGetFloat += value;
HookHandler.HookGetFloat();
}
remove => HookHandler._afterGetFloat -= value;
}
public static event Delegates.GetBool_AfterArgs GetBool
{
add
{

HookHandler._afterGetBool += value;
HookHandler.HookGetBool();
}
remove => HookHandler._afterGetBool -= value;
}
public static event Delegates.DeleteKey_AfterArgs DeleteKey
{
add
{

HookHandler._afterDeleteKey += value;
HookHandler.HookDeleteKey();
}
remove => HookHandler._afterDeleteKey -= value;
}
public static event Delegates.DeleteAll_AfterArgs DeleteAll
{
add
{

HookHandler._afterDeleteAll += value;
HookHandler.HookDeleteAll();
}
remove => HookHandler._afterDeleteAll -= value;
}
public static event Delegates.Save_AfterArgs Save
{
add
{

HookHandler._afterSave += value;
HookHandler.HookSave();
}
remove => HookHandler._afterSave -= value;
}
public static event Delegates.HasKey_AfterArgs HasKey
{
add
{

HookHandler._afterHasKey += value;
HookHandler.HookHasKey();
}
remove => HookHandler._afterHasKey -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Encrypt_WithArgs Encrypt
{
add => HookEndpointManager.Add<Delegates.Encrypt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Encrypt", false), value);
remove => HookEndpointManager.Remove<Delegates.Encrypt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Encrypt", false), value);
}
public static event Delegates.Decrypt_WithArgs Decrypt
{
add => HookEndpointManager.Add<Delegates.Decrypt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Decrypt", false), value);
remove => HookEndpointManager.Remove<Delegates.Decrypt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Decrypt", false), value);
}
public static event Delegates.StringToUTF8ByteArray_WithArgs StringToUTF8ByteArray
{
add => HookEndpointManager.Add<Delegates.StringToUTF8ByteArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "StringToUTF8ByteArray", false), value);
remove => HookEndpointManager.Remove<Delegates.StringToUTF8ByteArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "StringToUTF8ByteArray", false), value);
}
public static event Delegates.SetInt_WithArgs SetInt
{
add => HookEndpointManager.Add<Delegates.SetInt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetInt", false), value);
remove => HookEndpointManager.Remove<Delegates.SetInt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetInt", false), value);
}
public static event Delegates.SetString_WithArgs SetString
{
add => HookEndpointManager.Add<Delegates.SetString_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetString", false), value);
remove => HookEndpointManager.Remove<Delegates.SetString_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetString", false), value);
}
public static event Delegates.SetFloat_WithArgs SetFloat
{
add => HookEndpointManager.Add<Delegates.SetFloat_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetFloat", false), value);
remove => HookEndpointManager.Remove<Delegates.SetFloat_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetFloat", false), value);
}
public static event Delegates.SetBool_WithArgs SetBool
{
add => HookEndpointManager.Add<Delegates.SetBool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetBool", false), value);
remove => HookEndpointManager.Remove<Delegates.SetBool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "SetBool", false), value);
}
public static event Delegates.GetString_WithArgs GetString
{
add => HookEndpointManager.Add<Delegates.GetString_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetString", false), value);
remove => HookEndpointManager.Remove<Delegates.GetString_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetString", false), value);
}
public static event Delegates.GetInt_WithArgs GetInt
{
add => HookEndpointManager.Add<Delegates.GetInt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetInt", false), value);
remove => HookEndpointManager.Remove<Delegates.GetInt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetInt", false), value);
}
public static event Delegates.GetFloat_WithArgs GetFloat
{
add => HookEndpointManager.Add<Delegates.GetFloat_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetFloat", false), value);
remove => HookEndpointManager.Remove<Delegates.GetFloat_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetFloat", false), value);
}
public static event Delegates.GetBool_WithArgs GetBool
{
add => HookEndpointManager.Add<Delegates.GetBool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetBool", false), value);
remove => HookEndpointManager.Remove<Delegates.GetBool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "GetBool", false), value);
}
public static event Delegates.DeleteKey_WithArgs DeleteKey
{
add => HookEndpointManager.Add<Delegates.DeleteKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "DeleteKey", false), value);
remove => HookEndpointManager.Remove<Delegates.DeleteKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "DeleteKey", false), value);
}
public static event Delegates.DeleteAll_WithArgs DeleteAll
{
add => HookEndpointManager.Add<Delegates.DeleteAll_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "DeleteAll", false), value);
remove => HookEndpointManager.Remove<Delegates.DeleteAll_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "DeleteAll", false), value);
}
public static event Delegates.Save_WithArgs Save
{
add => HookEndpointManager.Add<Delegates.Save_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Save", false), value);
remove => HookEndpointManager.Remove<Delegates.Save_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "Save", false), value);
}
public static event Delegates.HasKey_WithArgs HasKey
{
add => HookEndpointManager.Add<Delegates.HasKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "HasKey", false), value);
remove => HookEndpointManager.Remove<Delegates.HasKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SecPlayerPrefs.SecurePlayerPrefs), "HasKey", false), value);
}
}

}
