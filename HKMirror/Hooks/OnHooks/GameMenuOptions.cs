namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GameMenuOptions class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameMenuOptions
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GameMenuOptions.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.GameMenuOptions.orig_OnEnable orig, GameMenuOptions self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookConfigureNavigation()
        {
            if (!HookedList.Contains("ConfigureNavigation"))
            {
                HookedList.Add("ConfigureNavigation");
                On.GameMenuOptions.ConfigureNavigation += ConfigureNavigation;
            }
        }

        internal static event Delegates.ConfigureNavigation_BeforeArgs _beforeConfigureNavigation;
        internal static event Delegates.ConfigureNavigation_AfterArgs _afterConfigureNavigation;

        private static void ConfigureNavigation(On.GameMenuOptions.orig_ConfigureNavigation orig, GameMenuOptions self)
        {
            Delegates.Params_ConfigureNavigation @params = new()
            {
                self = self
            };
            if (_beforeConfigureNavigation != null)
                foreach (Delegates.ConfigureNavigation_BeforeArgs toInvoke in _beforeConfigureNavigation
                             .GetInvocationList())
                    try
                    {
                        _beforeConfigureNavigation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterConfigureNavigation != null)
                foreach (Delegates.ConfigureNavigation_AfterArgs toInvoke in
                         _afterConfigureNavigation.GetInvocationList())
                    try
                    {
                        _afterConfigureNavigation.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ConfigureNavigation_AfterArgs(Params_ConfigureNavigation args);

        public delegate void ConfigureNavigation_BeforeArgs(Params_ConfigureNavigation args);

        public delegate void ConfigureNavigation_WithArgs(Action<GameMenuOptions> orig, GameMenuOptions self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<GameMenuOptions> orig, GameMenuOptions self);

        public sealed class Params_OnEnable
        {
            public GameMenuOptions self;
        }

        public sealed class Params_ConfigureNavigation
        {
            public GameMenuOptions self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.ConfigureNavigation_BeforeArgs ConfigureNavigation
        {
            add
            {
                HookHandler._beforeConfigureNavigation += value;
                HookHandler.HookConfigureNavigation();
            }
            remove => HookHandler._beforeConfigureNavigation -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.ConfigureNavigation_AfterArgs ConfigureNavigation
        {
            add
            {
                HookHandler._afterConfigureNavigation += value;
                HookHandler.HookConfigureNavigation();
            }
            remove => HookHandler._afterConfigureNavigation -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GameMenuOptions.hook_OnEnable OnEnable
        {
            add => On.GameMenuOptions.OnEnable += value;
            remove => On.GameMenuOptions.OnEnable -= value;
        }

        public static event On.GameMenuOptions.hook_ConfigureNavigation ConfigureNavigation
        {
            add => On.GameMenuOptions.ConfigureNavigation += value;
            remove => On.GameMenuOptions.ConfigureNavigation -= value;
        }
    }
}