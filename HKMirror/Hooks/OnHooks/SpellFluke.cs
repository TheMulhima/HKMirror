namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SpellFluke class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSpellFluke
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.SpellFluke.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.SpellFluke.orig_Awake orig, SpellFluke self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.SpellFluke.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.SpellFluke.orig_Start orig, SpellFluke self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookDoDamage()
        {
            if (!HookedList.Contains("DoDamage"))
            {
                HookedList.Add("DoDamage");
                On.SpellFluke.DoDamage += DoDamage;
            }
        }

        internal static event Delegates.DoDamage_BeforeArgs _beforeDoDamage;
        internal static event Delegates.DoDamage_NormalArgs _afterDoDamage;

        private static void DoDamage(On.SpellFluke.orig_DoDamage orig, SpellFluke self, GameObject obj,
            int upwardRecursionAmount, bool burst)
        {
            Delegates.Params_DoDamage @params = new()
            {
                self = self, obj = obj, upwardRecursionAmount = upwardRecursionAmount, burst = burst
            };
            _beforeDoDamage?.Invoke(@params);
            self = @params.self;
            obj = @params.obj;
            upwardRecursionAmount = @params.upwardRecursionAmount;
            burst = @params.burst;
            orig(self, obj, upwardRecursionAmount, burst);
            if (_afterDoDamage != null) _afterDoDamage.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.SpellFluke.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.SpellFluke.orig_OnEnable orig, SpellFluke self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.SpellFluke.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.SpellFluke.orig_Update orig, SpellFluke self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookBurst()
        {
            if (!HookedList.Contains("Burst"))
            {
                HookedList.Add("Burst");
                On.SpellFluke.Burst += Burst;
            }
        }

        internal static event Delegates.Burst_BeforeArgs _beforeBurst;
        internal static event Delegates.Burst_NormalArgs _afterBurst;

        private static void Burst(On.SpellFluke.orig_Burst orig, SpellFluke self)
        {
            Delegates.Params_Burst @params = new()
            {
                self = self
            };
            _beforeBurst?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBurst != null) _afterBurst.Invoke(@params);
        }

        internal static void HookBurstSequence()
        {
            if (!HookedList.Contains("BurstSequence"))
            {
                HookedList.Add("BurstSequence");
                On.SpellFluke.BurstSequence += BurstSequence;
            }
        }

        internal static event Delegates.BurstSequence_BeforeArgs _beforeBurstSequence;

        private static IEnumerator BurstSequence(On.SpellFluke.orig_BurstSequence orig, SpellFluke self)
        {
            Delegates.Params_BurstSequence @params = new()
            {
                self = self
            };
            _beforeBurstSequence?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Burst_BeforeArgs(Params_Burst args);

        public delegate void Burst_NormalArgs(Params_Burst args);

        public delegate void BurstSequence_BeforeArgs(Params_BurstSequence args);

        public delegate IEnumerator BurstSequence_NormalArgs(Params_BurstSequence args);

        public delegate void DoDamage_BeforeArgs(Params_DoDamage args);

        public delegate void DoDamage_NormalArgs(Params_DoDamage args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Awake
        {
            public SpellFluke self;
        }

        public sealed class Params_Start
        {
            public SpellFluke self;
        }

        public sealed class Params_DoDamage
        {
            public bool burst;
            public GameObject obj;
            public SpellFluke self;
            public int upwardRecursionAmount;
        }

        public sealed class Params_OnEnable
        {
            public SpellFluke self;
        }

        public sealed class Params_Update
        {
            public SpellFluke self;
        }

        public sealed class Params_Burst
        {
            public SpellFluke self;
        }

        public sealed class Params_BurstSequence
        {
            public SpellFluke self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.DoDamage_BeforeArgs DoDamage
        {
            add
            {
                HookHandler._beforeDoDamage += value;
                HookHandler.HookDoDamage();
            }
            remove => HookHandler._beforeDoDamage -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Burst_BeforeArgs Burst
        {
            add
            {
                HookHandler._beforeBurst += value;
                HookHandler.HookBurst();
            }
            remove => HookHandler._beforeBurst -= value;
        }

        public static event Delegates.BurstSequence_BeforeArgs BurstSequence
        {
            add
            {
                HookHandler._beforeBurstSequence += value;
                HookHandler.HookBurstSequence();
            }
            remove => HookHandler._beforeBurstSequence -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.DoDamage_NormalArgs DoDamage
        {
            add
            {
                HookHandler._afterDoDamage += value;
                HookHandler.HookDoDamage();
            }
            remove => HookHandler._afterDoDamage -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Burst_NormalArgs Burst
        {
            add
            {
                HookHandler._afterBurst += value;
                HookHandler.HookBurst();
            }
            remove => HookHandler._afterBurst -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SpellFluke.hook_Awake Awake
        {
            add => On.SpellFluke.Awake += value;
            remove => On.SpellFluke.Awake -= value;
        }

        public static event On.SpellFluke.hook_Start Start
        {
            add => On.SpellFluke.Start += value;
            remove => On.SpellFluke.Start -= value;
        }

        public static event On.SpellFluke.hook_DoDamage DoDamage
        {
            add => On.SpellFluke.DoDamage += value;
            remove => On.SpellFluke.DoDamage -= value;
        }

        public static event On.SpellFluke.hook_OnEnable OnEnable
        {
            add => On.SpellFluke.OnEnable += value;
            remove => On.SpellFluke.OnEnable -= value;
        }

        public static event On.SpellFluke.hook_Update Update
        {
            add => On.SpellFluke.Update += value;
            remove => On.SpellFluke.Update -= value;
        }

        public static event On.SpellFluke.hook_Burst Burst
        {
            add => On.SpellFluke.Burst += value;
            remove => On.SpellFluke.Burst -= value;
        }

        public static event On.SpellFluke.hook_BurstSequence BurstSequence
        {
            add => On.SpellFluke.BurstSequence += value;
            remove => On.SpellFluke.BurstSequence -= value;
        }
    }
}