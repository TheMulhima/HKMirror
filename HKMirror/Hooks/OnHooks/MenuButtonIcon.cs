using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuButtonIcon class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuButtonIcon
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Action()
        {
            if (!HookedList.Contains("get_Action"))
            {
                HookedList.Add("get_Action");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButtonIcon), "get_Action"), get_Action);
            }
        }

        internal static event Delegates.get_Action_BeforeArgs _beforeget_Action;
        internal static event Delegates.get_Action_NormalArgs _afterget_Action;

        private static HeroActionButton get_Action(Func<MenuButtonIcon, HeroActionButton> orig, MenuButtonIcon self)
        {
            Delegates.Params_get_Action @params = new()
            {
                self = self
            };
            _beforeget_Action?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Action != null) retVal = _afterget_Action.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Action_BeforeArgs(Params_get_Action args);

        public delegate HeroActionButton get_Action_NormalArgs(Params_get_Action args);

        public sealed class Params_get_Action
        {
            public MenuButtonIcon self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Action_BeforeArgs get_Action
        {
            add
            {
                HookHandler._beforeget_Action += value;
                HookHandler.Hookget_Action();
            }
            remove => HookHandler._beforeget_Action -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Action_NormalArgs get_Action
        {
            add
            {
                HookHandler._afterget_Action += value;
                HookHandler.Hookget_Action();
            }
            remove => HookHandler._afterget_Action -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Action_NormalArgs get_Action
        {
            add => HookEndpointManager.Add<Delegates.get_Action_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonIcon), "get_Action"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Action_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonIcon), "get_Action"), value);
        }
    }
}