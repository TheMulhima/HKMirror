namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BrightnessEffect class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBrightnessEffect
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnRenderImage()
        {
            if (!HookedList.Contains("OnRenderImage"))
            {
                HookedList.Add("OnRenderImage");
                On.BrightnessEffect.OnRenderImage += OnRenderImage;
            }
        }

        internal static event Delegates.OnRenderImage_BeforeArgs _beforeOnRenderImage;
        internal static event Delegates.OnRenderImage_AfterArgs _afterOnRenderImage;

        private static void OnRenderImage(On.BrightnessEffect.orig_OnRenderImage orig, BrightnessEffect self,
            RenderTexture source, RenderTexture destination)
        {
            Delegates.Params_OnRenderImage @params = new()
            {
                self = self, source = source, destination = destination
            };
            if (_beforeOnRenderImage != null)
                foreach (Delegates.OnRenderImage_BeforeArgs toInvoke in _beforeOnRenderImage.GetInvocationList())
                    try
                    {
                        _beforeOnRenderImage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            source = @params.source;
            destination = @params.destination;
            orig(self, source, destination);
            if (_afterOnRenderImage != null)
                foreach (Delegates.OnRenderImage_AfterArgs toInvoke in _afterOnRenderImage.GetInvocationList())
                    try
                    {
                        _afterOnRenderImage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBrightness()
        {
            if (!HookedList.Contains("SetBrightness"))
            {
                HookedList.Add("SetBrightness");
                On.BrightnessEffect.SetBrightness += SetBrightness;
            }
        }

        internal static event Delegates.SetBrightness_BeforeArgs _beforeSetBrightness;
        internal static event Delegates.SetBrightness_AfterArgs _afterSetBrightness;

        private static void SetBrightness(On.BrightnessEffect.orig_SetBrightness orig, BrightnessEffect self,
            float value)
        {
            Delegates.Params_SetBrightness @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetBrightness != null)
                foreach (Delegates.SetBrightness_BeforeArgs toInvoke in _beforeSetBrightness.GetInvocationList())
                    try
                    {
                        _beforeSetBrightness?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetBrightness != null)
                foreach (Delegates.SetBrightness_AfterArgs toInvoke in _afterSetBrightness.GetInvocationList())
                    try
                    {
                        _afterSetBrightness.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetContrast()
        {
            if (!HookedList.Contains("SetContrast"))
            {
                HookedList.Add("SetContrast");
                On.BrightnessEffect.SetContrast += SetContrast;
            }
        }

        internal static event Delegates.SetContrast_BeforeArgs _beforeSetContrast;
        internal static event Delegates.SetContrast_AfterArgs _afterSetContrast;

        private static void SetContrast(On.BrightnessEffect.orig_SetContrast orig, BrightnessEffect self, float value)
        {
            Delegates.Params_SetContrast @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetContrast != null)
                foreach (Delegates.SetContrast_BeforeArgs toInvoke in _beforeSetContrast.GetInvocationList())
                    try
                    {
                        _beforeSetContrast?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetContrast != null)
                foreach (Delegates.SetContrast_AfterArgs toInvoke in _afterSetContrast.GetInvocationList())
                    try
                    {
                        _afterSetContrast.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnRenderImage_AfterArgs(Params_OnRenderImage args);

        public delegate void OnRenderImage_BeforeArgs(Params_OnRenderImage args);

        public delegate void OnRenderImage_WithArgs(Action<BrightnessEffect, RenderTexture, RenderTexture> orig,
            BrightnessEffect self, RenderTexture source, RenderTexture destination);

        public delegate void SetBrightness_AfterArgs(Params_SetBrightness args);

        public delegate void SetBrightness_BeforeArgs(Params_SetBrightness args);

        public delegate void SetBrightness_WithArgs(Action<BrightnessEffect, float> orig, BrightnessEffect self,
            float value);

        public delegate void SetContrast_AfterArgs(Params_SetContrast args);

        public delegate void SetContrast_BeforeArgs(Params_SetContrast args);

        public delegate void SetContrast_WithArgs(Action<BrightnessEffect, float> orig, BrightnessEffect self,
            float value);

        public sealed class Params_OnRenderImage
        {
            public RenderTexture destination;
            public BrightnessEffect self;
            public RenderTexture source;
        }

        public sealed class Params_SetBrightness
        {
            public BrightnessEffect self;
            public float value;
        }

        public sealed class Params_SetContrast
        {
            public BrightnessEffect self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnRenderImage_BeforeArgs OnRenderImage
        {
            add
            {
                HookHandler._beforeOnRenderImage += value;
                HookHandler.HookOnRenderImage();
            }
            remove => HookHandler._beforeOnRenderImage -= value;
        }

        public static event Delegates.SetBrightness_BeforeArgs SetBrightness
        {
            add
            {
                HookHandler._beforeSetBrightness += value;
                HookHandler.HookSetBrightness();
            }
            remove => HookHandler._beforeSetBrightness -= value;
        }

        public static event Delegates.SetContrast_BeforeArgs SetContrast
        {
            add
            {
                HookHandler._beforeSetContrast += value;
                HookHandler.HookSetContrast();
            }
            remove => HookHandler._beforeSetContrast -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnRenderImage_AfterArgs OnRenderImage
        {
            add
            {
                HookHandler._afterOnRenderImage += value;
                HookHandler.HookOnRenderImage();
            }
            remove => HookHandler._afterOnRenderImage -= value;
        }

        public static event Delegates.SetBrightness_AfterArgs SetBrightness
        {
            add
            {
                HookHandler._afterSetBrightness += value;
                HookHandler.HookSetBrightness();
            }
            remove => HookHandler._afterSetBrightness -= value;
        }

        public static event Delegates.SetContrast_AfterArgs SetContrast
        {
            add
            {
                HookHandler._afterSetContrast += value;
                HookHandler.HookSetContrast();
            }
            remove => HookHandler._afterSetContrast -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BrightnessEffect.hook_OnRenderImage OnRenderImage
        {
            add => On.BrightnessEffect.OnRenderImage += value;
            remove => On.BrightnessEffect.OnRenderImage -= value;
        }

        public static event On.BrightnessEffect.hook_SetBrightness SetBrightness
        {
            add => On.BrightnessEffect.SetBrightness += value;
            remove => On.BrightnessEffect.SetBrightness -= value;
        }

        public static event On.BrightnessEffect.hook_SetContrast SetContrast
        {
            add => On.BrightnessEffect.SetContrast += value;
            remove => On.BrightnessEffect.SetContrast -= value;
        }
    }
}