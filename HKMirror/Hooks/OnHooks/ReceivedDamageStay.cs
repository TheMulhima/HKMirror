using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ReceivedDamageStay class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnReceivedDamageStay
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<ReceivedDamageStay> orig, ReceivedDamageStay self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<ReceivedDamageStay> orig, ReceivedDamageStay self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnExit()
        {
            if (!HookedList.Contains("OnExit"))
            {
                HookedList.Add("OnExit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "OnExit"), OnExit);
            }
        }

        internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
        internal static event Delegates.OnExit_NormalArgs _afterOnExit;

        private static void OnExit(Action<ReceivedDamageStay> orig, ReceivedDamageStay self)
        {
            Delegates.Params_OnExit @params = new()
            {
                self = self
            };
            _beforeOnExit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnExit != null) _afterOnExit.Invoke(@params);
        }

        internal static void HookDoCollisionEnter2D()
        {
            if (!HookedList.Contains("DoCollisionEnter2D"))
            {
                HookedList.Add("DoCollisionEnter2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoCollisionEnter2D"),
                    DoCollisionEnter2D);
            }
        }

        internal static event Delegates.DoCollisionEnter2D_BeforeArgs _beforeDoCollisionEnter2D;
        internal static event Delegates.DoCollisionEnter2D_NormalArgs _afterDoCollisionEnter2D;

        private static void DoCollisionEnter2D(Action<ReceivedDamageStay, Collision2D> orig, ReceivedDamageStay self,
            Collision2D collisionInfo)
        {
            Delegates.Params_DoCollisionEnter2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeDoCollisionEnter2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoCollisionEnter2D != null) _afterDoCollisionEnter2D.Invoke(@params);
        }

        internal static void HookDoCollisionStay2D()
        {
            if (!HookedList.Contains("DoCollisionStay2D"))
            {
                HookedList.Add("DoCollisionStay2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoCollisionStay2D"),
                    DoCollisionStay2D);
            }
        }

        internal static event Delegates.DoCollisionStay2D_BeforeArgs _beforeDoCollisionStay2D;
        internal static event Delegates.DoCollisionStay2D_NormalArgs _afterDoCollisionStay2D;

        private static void DoCollisionStay2D(Action<ReceivedDamageStay, Collision2D> orig, ReceivedDamageStay self,
            Collision2D collisionInfo)
        {
            Delegates.Params_DoCollisionStay2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeDoCollisionStay2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoCollisionStay2D != null) _afterDoCollisionStay2D.Invoke(@params);
        }

        internal static void HookDoTriggerEnter2D()
        {
            if (!HookedList.Contains("DoTriggerEnter2D"))
            {
                HookedList.Add("DoTriggerEnter2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoTriggerEnter2D"),
                    DoTriggerEnter2D);
            }
        }

        internal static event Delegates.DoTriggerEnter2D_BeforeArgs _beforeDoTriggerEnter2D;
        internal static event Delegates.DoTriggerEnter2D_NormalArgs _afterDoTriggerEnter2D;

        private static void DoTriggerEnter2D(Action<ReceivedDamageStay, Collider2D> orig, ReceivedDamageStay self,
            Collider2D collisionInfo)
        {
            Delegates.Params_DoTriggerEnter2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeDoTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoTriggerEnter2D != null) _afterDoTriggerEnter2D.Invoke(@params);
        }

        internal static void HookDoTriggerStay2D()
        {
            if (!HookedList.Contains("DoTriggerStay2D"))
            {
                HookedList.Add("DoTriggerStay2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoTriggerStay2D"),
                    DoTriggerStay2D);
            }
        }

        internal static event Delegates.DoTriggerStay2D_BeforeArgs _beforeDoTriggerStay2D;
        internal static event Delegates.DoTriggerStay2D_NormalArgs _afterDoTriggerStay2D;

        private static void DoTriggerStay2D(Action<ReceivedDamageStay, Collider2D> orig, ReceivedDamageStay self,
            Collider2D collisionInfo)
        {
            Delegates.Params_DoTriggerStay2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeDoTriggerStay2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoTriggerStay2D != null) _afterDoTriggerStay2D.Invoke(@params);
        }

        internal static void HookStoreCollisionInfo_Collision2D()
        {
            if (!HookedList.Contains("StoreCollisionInfo_Collision2D"))
            {
                HookedList.Add("StoreCollisionInfo_Collision2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreCollisionInfo_Collision2D"),
                    StoreCollisionInfo_Collision2D);
            }
        }

        internal static event Delegates.StoreCollisionInfo_Collision2D_BeforeArgs _beforeStoreCollisionInfo_Collision2D;
        internal static event Delegates.StoreCollisionInfo_Collision2D_NormalArgs _afterStoreCollisionInfo_Collision2D;

        private static void StoreCollisionInfo_Collision2D(Action<ReceivedDamageStay, Collision2D> orig,
            ReceivedDamageStay self, Collision2D collisionInfo)
        {
            Delegates.Params_StoreCollisionInfo_Collision2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeStoreCollisionInfo_Collision2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterStoreCollisionInfo_Collision2D != null) _afterStoreCollisionInfo_Collision2D.Invoke(@params);
        }

        internal static void HookStoreCollisionInfo_Collider2D()
        {
            if (!HookedList.Contains("StoreCollisionInfo_Collider2D"))
            {
                HookedList.Add("StoreCollisionInfo_Collider2D");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreCollisionInfo_Collider2D"),
                    StoreCollisionInfo_Collider2D);
            }
        }

        internal static event Delegates.StoreCollisionInfo_Collider2D_BeforeArgs _beforeStoreCollisionInfo_Collider2D;
        internal static event Delegates.StoreCollisionInfo_Collider2D_NormalArgs _afterStoreCollisionInfo_Collider2D;

        private static void StoreCollisionInfo_Collider2D(Action<ReceivedDamageStay, Collider2D> orig,
            ReceivedDamageStay self, Collider2D collisionInfo)
        {
            Delegates.Params_StoreCollisionInfo_Collider2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeStoreCollisionInfo_Collider2D?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterStoreCollisionInfo_Collider2D != null) _afterStoreCollisionInfo_Collider2D.Invoke(@params);
        }

        internal static void HookStoreIfDamagingObject()
        {
            if (!HookedList.Contains("StoreIfDamagingObject"))
            {
                HookedList.Add("StoreIfDamagingObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreIfDamagingObject"),
                    StoreIfDamagingObject);
            }
        }

        internal static event Delegates.StoreIfDamagingObject_BeforeArgs _beforeStoreIfDamagingObject;
        internal static event Delegates.StoreIfDamagingObject_NormalArgs _afterStoreIfDamagingObject;

        private static void StoreIfDamagingObject(Action<ReceivedDamageStay, GameObject> orig, ReceivedDamageStay self,
            GameObject go)
        {
            Delegates.Params_StoreIfDamagingObject @params = new()
            {
                self = self, go = go
            };
            _beforeStoreIfDamagingObject?.Invoke(@params);
            self = @params.self;
            go = @params.go;
            orig(self, go);
            if (_afterStoreIfDamagingObject != null) _afterStoreIfDamagingObject.Invoke(@params);
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "ErrorCheck"), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_NormalArgs _afterErrorCheck;

        private static string ErrorCheck(Func<ReceivedDamageStay, string> orig, ReceivedDamageStay self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            _beforeErrorCheck?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null) retVal = _afterErrorCheck.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoCollisionEnter2D_BeforeArgs(Params_DoCollisionEnter2D args);

        public delegate void DoCollisionEnter2D_NormalArgs(Params_DoCollisionEnter2D args);

        public delegate void DoCollisionStay2D_BeforeArgs(Params_DoCollisionStay2D args);

        public delegate void DoCollisionStay2D_NormalArgs(Params_DoCollisionStay2D args);

        public delegate void DoTriggerEnter2D_BeforeArgs(Params_DoTriggerEnter2D args);

        public delegate void DoTriggerEnter2D_NormalArgs(Params_DoTriggerEnter2D args);

        public delegate void DoTriggerStay2D_BeforeArgs(Params_DoTriggerStay2D args);

        public delegate void DoTriggerStay2D_NormalArgs(Params_DoTriggerStay2D args);

        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_NormalArgs(Params_ErrorCheck args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnExit_BeforeArgs(Params_OnExit args);

        public delegate void OnExit_NormalArgs(Params_OnExit args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void StoreCollisionInfo_Collider2D_BeforeArgs(Params_StoreCollisionInfo_Collider2D args);

        public delegate void StoreCollisionInfo_Collider2D_NormalArgs(Params_StoreCollisionInfo_Collider2D args);

        public delegate void StoreCollisionInfo_Collision2D_BeforeArgs(Params_StoreCollisionInfo_Collision2D args);

        public delegate void StoreCollisionInfo_Collision2D_NormalArgs(Params_StoreCollisionInfo_Collision2D args);

        public delegate void StoreIfDamagingObject_BeforeArgs(Params_StoreIfDamagingObject args);

        public delegate void StoreIfDamagingObject_NormalArgs(Params_StoreIfDamagingObject args);

        public sealed class Params_Reset
        {
            public ReceivedDamageStay self;
        }

        public sealed class Params_OnEnter
        {
            public ReceivedDamageStay self;
        }

        public sealed class Params_OnExit
        {
            public ReceivedDamageStay self;
        }

        public sealed class Params_DoCollisionEnter2D
        {
            public Collision2D collisionInfo;
            public ReceivedDamageStay self;
        }

        public sealed class Params_DoCollisionStay2D
        {
            public Collision2D collisionInfo;
            public ReceivedDamageStay self;
        }

        public sealed class Params_DoTriggerEnter2D
        {
            public Collider2D collisionInfo;
            public ReceivedDamageStay self;
        }

        public sealed class Params_DoTriggerStay2D
        {
            public Collider2D collisionInfo;
            public ReceivedDamageStay self;
        }

        public sealed class Params_StoreCollisionInfo_Collision2D
        {
            public Collision2D collisionInfo;
            public ReceivedDamageStay self;
        }

        public sealed class Params_StoreCollisionInfo_Collider2D
        {
            public Collider2D collisionInfo;
            public ReceivedDamageStay self;
        }

        public sealed class Params_StoreIfDamagingObject
        {
            public GameObject go;
            public ReceivedDamageStay self;
        }

        public sealed class Params_ErrorCheck
        {
            public ReceivedDamageStay self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnExit_BeforeArgs OnExit
        {
            add
            {
                HookHandler._beforeOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._beforeOnExit -= value;
        }

        public static event Delegates.DoCollisionEnter2D_BeforeArgs DoCollisionEnter2D
        {
            add
            {
                HookHandler._beforeDoCollisionEnter2D += value;
                HookHandler.HookDoCollisionEnter2D();
            }
            remove => HookHandler._beforeDoCollisionEnter2D -= value;
        }

        public static event Delegates.DoCollisionStay2D_BeforeArgs DoCollisionStay2D
        {
            add
            {
                HookHandler._beforeDoCollisionStay2D += value;
                HookHandler.HookDoCollisionStay2D();
            }
            remove => HookHandler._beforeDoCollisionStay2D -= value;
        }

        public static event Delegates.DoTriggerEnter2D_BeforeArgs DoTriggerEnter2D
        {
            add
            {
                HookHandler._beforeDoTriggerEnter2D += value;
                HookHandler.HookDoTriggerEnter2D();
            }
            remove => HookHandler._beforeDoTriggerEnter2D -= value;
        }

        public static event Delegates.DoTriggerStay2D_BeforeArgs DoTriggerStay2D
        {
            add
            {
                HookHandler._beforeDoTriggerStay2D += value;
                HookHandler.HookDoTriggerStay2D();
            }
            remove => HookHandler._beforeDoTriggerStay2D -= value;
        }

        public static event Delegates.StoreCollisionInfo_Collision2D_BeforeArgs StoreCollisionInfo_Collision2D
        {
            add
            {
                HookHandler._beforeStoreCollisionInfo_Collision2D += value;
                HookHandler.HookStoreCollisionInfo_Collision2D();
            }
            remove => HookHandler._beforeStoreCollisionInfo_Collision2D -= value;
        }

        public static event Delegates.StoreCollisionInfo_Collider2D_BeforeArgs StoreCollisionInfo_Collider2D
        {
            add
            {
                HookHandler._beforeStoreCollisionInfo_Collider2D += value;
                HookHandler.HookStoreCollisionInfo_Collider2D();
            }
            remove => HookHandler._beforeStoreCollisionInfo_Collider2D -= value;
        }

        public static event Delegates.StoreIfDamagingObject_BeforeArgs StoreIfDamagingObject
        {
            add
            {
                HookHandler._beforeStoreIfDamagingObject += value;
                HookHandler.HookStoreIfDamagingObject();
            }
            remove => HookHandler._beforeStoreIfDamagingObject -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnExit_NormalArgs OnExit
        {
            add
            {
                HookHandler._afterOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._afterOnExit -= value;
        }

        public static event Delegates.DoCollisionEnter2D_NormalArgs DoCollisionEnter2D
        {
            add
            {
                HookHandler._afterDoCollisionEnter2D += value;
                HookHandler.HookDoCollisionEnter2D();
            }
            remove => HookHandler._afterDoCollisionEnter2D -= value;
        }

        public static event Delegates.DoCollisionStay2D_NormalArgs DoCollisionStay2D
        {
            add
            {
                HookHandler._afterDoCollisionStay2D += value;
                HookHandler.HookDoCollisionStay2D();
            }
            remove => HookHandler._afterDoCollisionStay2D -= value;
        }

        public static event Delegates.DoTriggerEnter2D_NormalArgs DoTriggerEnter2D
        {
            add
            {
                HookHandler._afterDoTriggerEnter2D += value;
                HookHandler.HookDoTriggerEnter2D();
            }
            remove => HookHandler._afterDoTriggerEnter2D -= value;
        }

        public static event Delegates.DoTriggerStay2D_NormalArgs DoTriggerStay2D
        {
            add
            {
                HookHandler._afterDoTriggerStay2D += value;
                HookHandler.HookDoTriggerStay2D();
            }
            remove => HookHandler._afterDoTriggerStay2D -= value;
        }

        public static event Delegates.StoreCollisionInfo_Collision2D_NormalArgs StoreCollisionInfo_Collision2D
        {
            add
            {
                HookHandler._afterStoreCollisionInfo_Collision2D += value;
                HookHandler.HookStoreCollisionInfo_Collision2D();
            }
            remove => HookHandler._afterStoreCollisionInfo_Collision2D -= value;
        }

        public static event Delegates.StoreCollisionInfo_Collider2D_NormalArgs StoreCollisionInfo_Collider2D
        {
            add
            {
                HookHandler._afterStoreCollisionInfo_Collider2D += value;
                HookHandler.HookStoreCollisionInfo_Collider2D();
            }
            remove => HookHandler._afterStoreCollisionInfo_Collider2D -= value;
        }

        public static event Delegates.StoreIfDamagingObject_NormalArgs StoreIfDamagingObject
        {
            add
            {
                HookHandler._afterStoreIfDamagingObject += value;
                HookHandler.HookStoreIfDamagingObject();
            }
            remove => HookHandler._afterStoreIfDamagingObject -= value;
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "OnEnter"), value);
        }

        public static event Delegates.OnExit_NormalArgs OnExit
        {
            add => HookEndpointManager.Add<Delegates.OnExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "OnExit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "OnExit"), value);
        }

        public static event Delegates.DoCollisionEnter2D_NormalArgs DoCollisionEnter2D
        {
            add => HookEndpointManager.Add<Delegates.DoCollisionEnter2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoCollisionEnter2D"), value);
            remove => HookEndpointManager.Remove<Delegates.DoCollisionEnter2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoCollisionEnter2D"), value);
        }

        public static event Delegates.DoCollisionStay2D_NormalArgs DoCollisionStay2D
        {
            add => HookEndpointManager.Add<Delegates.DoCollisionStay2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoCollisionStay2D"), value);
            remove => HookEndpointManager.Remove<Delegates.DoCollisionStay2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoCollisionStay2D"), value);
        }

        public static event Delegates.DoTriggerEnter2D_NormalArgs DoTriggerEnter2D
        {
            add => HookEndpointManager.Add<Delegates.DoTriggerEnter2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoTriggerEnter2D"), value);
            remove => HookEndpointManager.Remove<Delegates.DoTriggerEnter2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoTriggerEnter2D"), value);
        }

        public static event Delegates.DoTriggerStay2D_NormalArgs DoTriggerStay2D
        {
            add => HookEndpointManager.Add<Delegates.DoTriggerStay2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoTriggerStay2D"), value);
            remove => HookEndpointManager.Remove<Delegates.DoTriggerStay2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "DoTriggerStay2D"), value);
        }

        public static event Delegates.StoreCollisionInfo_Collision2D_NormalArgs StoreCollisionInfo_Collision2D
        {
            add => HookEndpointManager.Add<Delegates.StoreCollisionInfo_Collision2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreCollisionInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.StoreCollisionInfo_Collision2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreCollisionInfo"), value);
        }

        public static event Delegates.StoreCollisionInfo_Collider2D_NormalArgs StoreCollisionInfo_Collider2D
        {
            add => HookEndpointManager.Add<Delegates.StoreCollisionInfo_Collider2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreCollisionInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.StoreCollisionInfo_Collider2D_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreCollisionInfo"), value);
        }

        public static event Delegates.StoreIfDamagingObject_NormalArgs StoreIfDamagingObject
        {
            add => HookEndpointManager.Add<Delegates.StoreIfDamagingObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreIfDamagingObject"), value);
            remove => HookEndpointManager.Remove<Delegates.StoreIfDamagingObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "StoreIfDamagingObject"), value);
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "ErrorCheck"), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ReceivedDamageStay), "ErrorCheck"), value);
        }
    }
}