using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using XGamingRuntime;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GameCoreOnlineSubsystem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameCoreOnlineSubsystem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookIsPackaged()
        {
            if (!HookedList.Contains("IsPackaged"))
            {
                HookedList.Add("IsPackaged");
                On.GameCoreOnlineSubsystem.IsPackaged += IsPackaged;
            }
        }

        internal static event Delegates.IsPackaged_BeforeArgs _beforeIsPackaged;
        internal static event Delegates.IsPackaged_NormalArgs _afterIsPackaged;

        private static bool IsPackaged(On.GameCoreOnlineSubsystem.orig_IsPackaged orig, DesktopPlatform desktopPlatform)
        {
            Delegates.Params_IsPackaged @params = new()
            {
                desktopPlatform = desktopPlatform
            };
            _beforeIsPackaged?.Invoke(@params);
            desktopPlatform = @params.desktopPlatform;
            var retVal = orig(desktopPlatform);
            if (_afterIsPackaged != null) retVal = _afterIsPackaged.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.GameCoreOnlineSubsystem.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.GameCoreOnlineSubsystem.orig_Update orig, GameCoreOnlineSubsystem self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void Hookget_EngagedDisplayName()
        {
            if (!HookedList.Contains("get_EngagedDisplayName"))
            {
                HookedList.Add("get_EngagedDisplayName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_EngagedDisplayName"),
                    get_EngagedDisplayName);
            }
        }

        internal static event Delegates.get_EngagedDisplayName_BeforeArgs _beforeget_EngagedDisplayName;
        internal static event Delegates.get_EngagedDisplayName_NormalArgs _afterget_EngagedDisplayName;

        private static string get_EngagedDisplayName(Func<GameCoreOnlineSubsystem, string> orig,
            GameCoreOnlineSubsystem self)
        {
            Delegates.Params_get_EngagedDisplayName @params = new()
            {
                self = self
            };
            _beforeget_EngagedDisplayName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_EngagedDisplayName != null) retVal = _afterget_EngagedDisplayName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_EngagedDisplayImage()
        {
            if (!HookedList.Contains("get_EngagedDisplayImage"))
            {
                HookedList.Add("get_EngagedDisplayImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_EngagedDisplayImage"),
                    get_EngagedDisplayImage);
            }
        }

        internal static event Delegates.get_EngagedDisplayImage_BeforeArgs _beforeget_EngagedDisplayImage;
        internal static event Delegates.get_EngagedDisplayImage_NormalArgs _afterget_EngagedDisplayImage;

        private static Texture2D get_EngagedDisplayImage(Func<GameCoreOnlineSubsystem, Texture2D> orig,
            GameCoreOnlineSubsystem self)
        {
            Delegates.Params_get_EngagedDisplayImage @params = new()
            {
                self = self
            };
            _beforeget_EngagedDisplayImage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_EngagedDisplayImage != null) retVal = _afterget_EngagedDisplayImage.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_AreAchievementsFetched()
        {
            if (!HookedList.Contains("get_AreAchievementsFetched"))
            {
                HookedList.Add("get_AreAchievementsFetched");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_AreAchievementsFetched"),
                    get_AreAchievementsFetched);
            }
        }

        internal static event Delegates.get_AreAchievementsFetched_BeforeArgs _beforeget_AreAchievementsFetched;
        internal static event Delegates.get_AreAchievementsFetched_NormalArgs _afterget_AreAchievementsFetched;

        private static bool get_AreAchievementsFetched(Func<GameCoreOnlineSubsystem, bool> orig,
            GameCoreOnlineSubsystem self)
        {
            Delegates.Params_get_AreAchievementsFetched @params = new()
            {
                self = self
            };
            _beforeget_AreAchievementsFetched?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AreAchievementsFetched != null) retVal = _afterget_AreAchievementsFetched.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_HasNativeAchievementsDialog()
        {
            if (!HookedList.Contains("get_HasNativeAchievementsDialog"))
            {
                HookedList.Add("get_HasNativeAchievementsDialog");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_HasNativeAchievementsDialog"),
                    get_HasNativeAchievementsDialog);
            }
        }

        internal static event Delegates.get_HasNativeAchievementsDialog_BeforeArgs
            _beforeget_HasNativeAchievementsDialog;

        internal static event Delegates.get_HasNativeAchievementsDialog_NormalArgs
            _afterget_HasNativeAchievementsDialog;

        private static bool get_HasNativeAchievementsDialog(Func<GameCoreOnlineSubsystem, bool> orig,
            GameCoreOnlineSubsystem self)
        {
            Delegates.Params_get_HasNativeAchievementsDialog @params = new()
            {
                self = self
            };
            _beforeget_HasNativeAchievementsDialog?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HasNativeAchievementsDialog != null)
                retVal = _afterget_HasNativeAchievementsDialog.Invoke(@params);
            return retVal;
        }

        internal static void HookPushAchievementUnlock()
        {
            if (!HookedList.Contains("PushAchievementUnlock"))
            {
                HookedList.Add("PushAchievementUnlock");
                On.GameCoreOnlineSubsystem.PushAchievementUnlock += PushAchievementUnlock;
            }
        }

        internal static event Delegates.PushAchievementUnlock_BeforeArgs _beforePushAchievementUnlock;
        internal static event Delegates.PushAchievementUnlock_NormalArgs _afterPushAchievementUnlock;

        private static void PushAchievementUnlock(On.GameCoreOnlineSubsystem.orig_PushAchievementUnlock orig,
            GameCoreOnlineSubsystem self, string achievementId)
        {
            Delegates.Params_PushAchievementUnlock @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforePushAchievementUnlock?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            orig(self, achievementId);
            if (_afterPushAchievementUnlock != null) _afterPushAchievementUnlock.Invoke(@params);
        }

        internal static void HookIsAchievementUnlocked()
        {
            if (!HookedList.Contains("IsAchievementUnlocked"))
            {
                HookedList.Add("IsAchievementUnlocked");
                On.GameCoreOnlineSubsystem.IsAchievementUnlocked += IsAchievementUnlocked;
            }
        }

        internal static event Delegates.IsAchievementUnlocked_BeforeArgs _beforeIsAchievementUnlocked;
        internal static event Delegates.IsAchievementUnlocked_NormalArgs _afterIsAchievementUnlocked;

        private static bool? IsAchievementUnlocked(On.GameCoreOnlineSubsystem.orig_IsAchievementUnlocked orig,
            GameCoreOnlineSubsystem self, string achievementId)
        {
            Delegates.Params_IsAchievementUnlocked @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforeIsAchievementUnlocked?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            var retVal = orig(self, achievementId);
            if (_afterIsAchievementUnlocked != null) retVal = _afterIsAchievementUnlocked.Invoke(@params);
            return retVal;
        }

        internal static void HookResetAchievements()
        {
            if (!HookedList.Contains("ResetAchievements"))
            {
                HookedList.Add("ResetAchievements");
                On.GameCoreOnlineSubsystem.ResetAchievements += ResetAchievements;
            }
        }

        internal static event Delegates.ResetAchievements_BeforeArgs _beforeResetAchievements;
        internal static event Delegates.ResetAchievements_NormalArgs _afterResetAchievements;

        private static void ResetAchievements(On.GameCoreOnlineSubsystem.orig_ResetAchievements orig,
            GameCoreOnlineSubsystem self)
        {
            Delegates.Params_ResetAchievements @params = new()
            {
                self = self
            };
            _beforeResetAchievements?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAchievements != null) _afterResetAchievements.Invoke(@params);
        }

        internal static void HookGetSaveContainerName()
        {
            if (!HookedList.Contains("GetSaveContainerName"))
            {
                HookedList.Add("GetSaveContainerName");
                On.GameCoreOnlineSubsystem.GetSaveContainerName += GetSaveContainerName;
            }
        }

        internal static event Delegates.GetSaveContainerName_BeforeArgs _beforeGetSaveContainerName;
        internal static event Delegates.GetSaveContainerName_NormalArgs _afterGetSaveContainerName;

        private static string GetSaveContainerName(On.GameCoreOnlineSubsystem.orig_GetSaveContainerName orig,
            GameCoreOnlineSubsystem self, int slotIndex)
        {
            Delegates.Params_GetSaveContainerName @params = new()
            {
                self = self, slotIndex = slotIndex
            };
            _beforeGetSaveContainerName?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            var retVal = orig(self, slotIndex);
            if (_afterGetSaveContainerName != null) retVal = _afterGetSaveContainerName.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSaveFileName()
        {
            if (!HookedList.Contains("GetSaveFileName"))
            {
                HookedList.Add("GetSaveFileName");
                On.GameCoreOnlineSubsystem.GetSaveFileName += GetSaveFileName;
            }
        }

        internal static event Delegates.GetSaveFileName_BeforeArgs _beforeGetSaveFileName;
        internal static event Delegates.GetSaveFileName_NormalArgs _afterGetSaveFileName;

        private static string GetSaveFileName(On.GameCoreOnlineSubsystem.orig_GetSaveFileName orig,
            GameCoreOnlineSubsystem self, int slotIndex)
        {
            Delegates.Params_GetSaveFileName @params = new()
            {
                self = self, slotIndex = slotIndex
            };
            _beforeGetSaveFileName?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            var retVal = orig(self, slotIndex);
            if (_afterGetSaveFileName != null) retVal = _afterGetSaveFileName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_HandlesGameSaves()
        {
            if (!HookedList.Contains("get_HandlesGameSaves"))
            {
                HookedList.Add("get_HandlesGameSaves");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_HandlesGameSaves"),
                    get_HandlesGameSaves);
            }
        }

        internal static event Delegates.get_HandlesGameSaves_BeforeArgs _beforeget_HandlesGameSaves;
        internal static event Delegates.get_HandlesGameSaves_NormalArgs _afterget_HandlesGameSaves;

        private static bool get_HandlesGameSaves(Func<GameCoreOnlineSubsystem, bool> orig, GameCoreOnlineSubsystem self)
        {
            Delegates.Params_get_HandlesGameSaves @params = new()
            {
                self = self
            };
            _beforeget_HandlesGameSaves?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HandlesGameSaves != null) retVal = _afterget_HandlesGameSaves.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_WillPreloadSaveFiles()
        {
            if (!HookedList.Contains("get_WillPreloadSaveFiles"))
            {
                HookedList.Add("get_WillPreloadSaveFiles");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_WillPreloadSaveFiles"),
                    get_WillPreloadSaveFiles);
            }
        }

        internal static event Delegates.get_WillPreloadSaveFiles_BeforeArgs _beforeget_WillPreloadSaveFiles;
        internal static event Delegates.get_WillPreloadSaveFiles_NormalArgs _afterget_WillPreloadSaveFiles;

        private static bool get_WillPreloadSaveFiles(Func<GameCoreOnlineSubsystem, bool> orig,
            GameCoreOnlineSubsystem self)
        {
            Delegates.Params_get_WillPreloadSaveFiles @params = new()
            {
                self = self
            };
            _beforeget_WillPreloadSaveFiles?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WillPreloadSaveFiles != null) retVal = _afterget_WillPreloadSaveFiles.Invoke(@params);
            return retVal;
        }

        internal static void HookIsSaveSlotInUse()
        {
            if (!HookedList.Contains("IsSaveSlotInUse"))
            {
                HookedList.Add("IsSaveSlotInUse");
                On.GameCoreOnlineSubsystem.IsSaveSlotInUse += IsSaveSlotInUse;
            }
        }

        internal static event Delegates.IsSaveSlotInUse_BeforeArgs _beforeIsSaveSlotInUse;
        internal static event Delegates.IsSaveSlotInUse_NormalArgs _afterIsSaveSlotInUse;

        private static void IsSaveSlotInUse(On.GameCoreOnlineSubsystem.orig_IsSaveSlotInUse orig,
            GameCoreOnlineSubsystem self, int slotIndex, Action<bool> callback)
        {
            Delegates.Params_IsSaveSlotInUse @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeIsSaveSlotInUse?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterIsSaveSlotInUse != null) _afterIsSaveSlotInUse.Invoke(@params);
        }

        internal static void HookReadSaveSlot()
        {
            if (!HookedList.Contains("ReadSaveSlot"))
            {
                HookedList.Add("ReadSaveSlot");
                On.GameCoreOnlineSubsystem.ReadSaveSlot += ReadSaveSlot;
            }
        }

        internal static event Delegates.ReadSaveSlot_BeforeArgs _beforeReadSaveSlot;
        internal static event Delegates.ReadSaveSlot_NormalArgs _afterReadSaveSlot;

        private static void ReadSaveSlot(On.GameCoreOnlineSubsystem.orig_ReadSaveSlot orig,
            GameCoreOnlineSubsystem self, int slotIndex, Action<byte[]> callback)
        {
            Delegates.Params_ReadSaveSlot @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeReadSaveSlot?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterReadSaveSlot != null) _afterReadSaveSlot.Invoke(@params);
        }

        internal static void HookWriteSaveSlot()
        {
            if (!HookedList.Contains("WriteSaveSlot"))
            {
                HookedList.Add("WriteSaveSlot");
                On.GameCoreOnlineSubsystem.WriteSaveSlot += WriteSaveSlot;
            }
        }

        internal static event Delegates.WriteSaveSlot_BeforeArgs _beforeWriteSaveSlot;
        internal static event Delegates.WriteSaveSlot_NormalArgs _afterWriteSaveSlot;

        private static void WriteSaveSlot(On.GameCoreOnlineSubsystem.orig_WriteSaveSlot orig,
            GameCoreOnlineSubsystem self, int slotIndex, byte[] bytes, Action<bool> callback)
        {
            Delegates.Params_WriteSaveSlot @params = new()
            {
                self = self, slotIndex = slotIndex, bytes = bytes, callback = callback
            };
            _beforeWriteSaveSlot?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            bytes = @params.bytes;
            callback = @params.callback;
            orig(self, slotIndex, bytes, callback);
            if (_afterWriteSaveSlot != null) _afterWriteSaveSlot.Invoke(@params);
        }

        internal static void HookClearSaveSlot()
        {
            if (!HookedList.Contains("ClearSaveSlot"))
            {
                HookedList.Add("ClearSaveSlot");
                On.GameCoreOnlineSubsystem.ClearSaveSlot += ClearSaveSlot;
            }
        }

        internal static event Delegates.ClearSaveSlot_BeforeArgs _beforeClearSaveSlot;
        internal static event Delegates.ClearSaveSlot_NormalArgs _afterClearSaveSlot;

        private static void ClearSaveSlot(On.GameCoreOnlineSubsystem.orig_ClearSaveSlot orig,
            GameCoreOnlineSubsystem self, int slotIndex, Action<bool> callback)
        {
            Delegates.Params_ClearSaveSlot @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeClearSaveSlot?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterClearSaveSlot != null) _afterClearSaveSlot.Invoke(@params);
        }

        internal static void HookSucceeded()
        {
            if (!HookedList.Contains("Succeeded"))
            {
                HookedList.Add("Succeeded");
                On.GameCoreOnlineSubsystem.Succeeded += Succeeded;
            }
        }

        internal static event Delegates.Succeeded_BeforeArgs _beforeSucceeded;
        internal static event Delegates.Succeeded_NormalArgs _afterSucceeded;

        private static bool Succeeded(On.GameCoreOnlineSubsystem.orig_Succeeded orig, int hresult,
            string operationFriendlyName)
        {
            Delegates.Params_Succeeded @params = new()
            {
                hresult = hresult, operationFriendlyName = operationFriendlyName
            };
            _beforeSucceeded?.Invoke(@params);
            hresult = @params.hresult;
            operationFriendlyName = @params.operationFriendlyName;
            var retVal = orig(hresult, operationFriendlyName);
            if (_afterSucceeded != null) retVal = _afterSucceeded.Invoke(@params);
            return retVal;
        }

        internal static void HookAddUserComplete()
        {
            if (!HookedList.Contains("AddUserComplete"))
            {
                HookedList.Add("AddUserComplete");
                On.GameCoreOnlineSubsystem.AddUserComplete += AddUserComplete;
            }
        }

        internal static event Delegates.AddUserComplete_BeforeArgs _beforeAddUserComplete;
        internal static event Delegates.AddUserComplete_NormalArgs _afterAddUserComplete;

        private static void AddUserComplete(On.GameCoreOnlineSubsystem.orig_AddUserComplete orig,
            GameCoreOnlineSubsystem self, int hresult, XUserHandle userHandle)
        {
            Delegates.Params_AddUserComplete @params = new()
            {
                self = self, hresult = hresult, userHandle = userHandle
            };
            _beforeAddUserComplete?.Invoke(@params);
            self = @params.self;
            hresult = @params.hresult;
            userHandle = @params.userHandle;
            orig(self, hresult, userHandle);
            if (_afterAddUserComplete != null) _afterAddUserComplete.Invoke(@params);
        }

        internal static void HookCompletePostSignInInitialization()
        {
            if (!HookedList.Contains("CompletePostSignInInitialization"))
            {
                HookedList.Add("CompletePostSignInInitialization");
                On.GameCoreOnlineSubsystem.CompletePostSignInInitialization += CompletePostSignInInitialization;
            }
        }

        internal static event Delegates.CompletePostSignInInitialization_BeforeArgs
            _beforeCompletePostSignInInitialization;

        internal static event Delegates.CompletePostSignInInitialization_NormalArgs
            _afterCompletePostSignInInitialization;

        private static void CompletePostSignInInitialization(
            On.GameCoreOnlineSubsystem.orig_CompletePostSignInInitialization orig, GameCoreOnlineSubsystem self)
        {
            Delegates.Params_CompletePostSignInInitialization @params = new()
            {
                self = self
            };
            _beforeCompletePostSignInInitialization?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCompletePostSignInInitialization != null) _afterCompletePostSignInInitialization.Invoke(@params);
        }

        internal static void HookMigrateLocalSaves()
        {
            if (!HookedList.Contains("MigrateLocalSaves"))
            {
                HookedList.Add("MigrateLocalSaves");
                On.GameCoreOnlineSubsystem.MigrateLocalSaves += MigrateLocalSaves;
            }
        }

        internal static event Delegates.MigrateLocalSaves_BeforeArgs _beforeMigrateLocalSaves;
        internal static event Delegates.MigrateLocalSaves_NormalArgs _afterMigrateLocalSaves;

        private static void MigrateLocalSaves(On.GameCoreOnlineSubsystem.orig_MigrateLocalSaves orig,
            GameCoreOnlineSubsystem self)
        {
            Delegates.Params_MigrateLocalSaves @params = new()
            {
                self = self
            };
            _beforeMigrateLocalSaves?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMigrateLocalSaves != null) _afterMigrateLocalSaves.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddUserComplete_BeforeArgs(Params_AddUserComplete args);

        public delegate void AddUserComplete_NormalArgs(Params_AddUserComplete args);

        public delegate void ClearSaveSlot_BeforeArgs(Params_ClearSaveSlot args);

        public delegate void ClearSaveSlot_NormalArgs(Params_ClearSaveSlot args);

        public delegate void CompletePostSignInInitialization_BeforeArgs(Params_CompletePostSignInInitialization args);

        public delegate void CompletePostSignInInitialization_NormalArgs(Params_CompletePostSignInInitialization args);

        public delegate void get_AreAchievementsFetched_BeforeArgs(Params_get_AreAchievementsFetched args);

        public delegate bool get_AreAchievementsFetched_NormalArgs(Params_get_AreAchievementsFetched args);

        public delegate void get_EngagedDisplayImage_BeforeArgs(Params_get_EngagedDisplayImage args);

        public delegate Texture2D get_EngagedDisplayImage_NormalArgs(Params_get_EngagedDisplayImage args);

        public delegate void get_EngagedDisplayName_BeforeArgs(Params_get_EngagedDisplayName args);

        public delegate string get_EngagedDisplayName_NormalArgs(Params_get_EngagedDisplayName args);

        public delegate void get_HandlesGameSaves_BeforeArgs(Params_get_HandlesGameSaves args);

        public delegate bool get_HandlesGameSaves_NormalArgs(Params_get_HandlesGameSaves args);

        public delegate void get_HasNativeAchievementsDialog_BeforeArgs(Params_get_HasNativeAchievementsDialog args);

        public delegate bool get_HasNativeAchievementsDialog_NormalArgs(Params_get_HasNativeAchievementsDialog args);

        public delegate void get_WillPreloadSaveFiles_BeforeArgs(Params_get_WillPreloadSaveFiles args);

        public delegate bool get_WillPreloadSaveFiles_NormalArgs(Params_get_WillPreloadSaveFiles args);

        public delegate void GetSaveContainerName_BeforeArgs(Params_GetSaveContainerName args);

        public delegate string GetSaveContainerName_NormalArgs(Params_GetSaveContainerName args);

        public delegate void GetSaveFileName_BeforeArgs(Params_GetSaveFileName args);

        public delegate string GetSaveFileName_NormalArgs(Params_GetSaveFileName args);

        public delegate void IsAchievementUnlocked_BeforeArgs(Params_IsAchievementUnlocked args);

        public delegate bool? IsAchievementUnlocked_NormalArgs(Params_IsAchievementUnlocked args);

        public delegate void IsPackaged_BeforeArgs(Params_IsPackaged args);

        public delegate bool IsPackaged_NormalArgs(Params_IsPackaged args);

        public delegate void IsSaveSlotInUse_BeforeArgs(Params_IsSaveSlotInUse args);

        public delegate void IsSaveSlotInUse_NormalArgs(Params_IsSaveSlotInUse args);

        public delegate void MigrateLocalSaves_BeforeArgs(Params_MigrateLocalSaves args);

        public delegate void MigrateLocalSaves_NormalArgs(Params_MigrateLocalSaves args);

        public delegate void PushAchievementUnlock_BeforeArgs(Params_PushAchievementUnlock args);

        public delegate void PushAchievementUnlock_NormalArgs(Params_PushAchievementUnlock args);

        public delegate void ReadSaveSlot_BeforeArgs(Params_ReadSaveSlot args);

        public delegate void ReadSaveSlot_NormalArgs(Params_ReadSaveSlot args);

        public delegate void ResetAchievements_BeforeArgs(Params_ResetAchievements args);

        public delegate void ResetAchievements_NormalArgs(Params_ResetAchievements args);

        public delegate void Succeeded_BeforeArgs(Params_Succeeded args);

        public delegate bool Succeeded_NormalArgs(Params_Succeeded args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void WriteSaveSlot_BeforeArgs(Params_WriteSaveSlot args);

        public delegate void WriteSaveSlot_NormalArgs(Params_WriteSaveSlot args);

        public sealed class Params_IsPackaged
        {
            public DesktopPlatform desktopPlatform;
        }

        public sealed class Params_Update
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_get_EngagedDisplayName
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_get_EngagedDisplayImage
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_get_AreAchievementsFetched
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_get_HasNativeAchievementsDialog
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_PushAchievementUnlock
        {
            public string achievementId;
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_IsAchievementUnlocked
        {
            public string achievementId;
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_ResetAchievements
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_GetSaveContainerName
        {
            public GameCoreOnlineSubsystem self;
            public int slotIndex;
        }

        public sealed class Params_GetSaveFileName
        {
            public GameCoreOnlineSubsystem self;
            public int slotIndex;
        }

        public sealed class Params_get_HandlesGameSaves
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_get_WillPreloadSaveFiles
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_IsSaveSlotInUse
        {
            public Action<bool> callback;
            public GameCoreOnlineSubsystem self;
            public int slotIndex;
        }

        public sealed class Params_ReadSaveSlot
        {
            public Action<byte[]> callback;
            public GameCoreOnlineSubsystem self;
            public int slotIndex;
        }

        public sealed class Params_WriteSaveSlot
        {
            public byte[] bytes;
            public Action<bool> callback;
            public GameCoreOnlineSubsystem self;
            public int slotIndex;
        }

        public sealed class Params_ClearSaveSlot
        {
            public Action<bool> callback;
            public GameCoreOnlineSubsystem self;
            public int slotIndex;
        }

        public sealed class Params_Succeeded
        {
            public int hresult;
            public string operationFriendlyName;
        }

        public sealed class Params_AddUserComplete
        {
            public int hresult;
            public GameCoreOnlineSubsystem self;
            public XUserHandle userHandle;
        }

        public sealed class Params_CompletePostSignInInitialization
        {
            public GameCoreOnlineSubsystem self;
        }

        public sealed class Params_MigrateLocalSaves
        {
            public GameCoreOnlineSubsystem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.IsPackaged_BeforeArgs IsPackaged
        {
            add
            {
                HookHandler._beforeIsPackaged += value;
                HookHandler.HookIsPackaged();
            }
            remove => HookHandler._beforeIsPackaged -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.get_EngagedDisplayName_BeforeArgs get_EngagedDisplayName
        {
            add
            {
                HookHandler._beforeget_EngagedDisplayName += value;
                HookHandler.Hookget_EngagedDisplayName();
            }
            remove => HookHandler._beforeget_EngagedDisplayName -= value;
        }

        public static event Delegates.get_EngagedDisplayImage_BeforeArgs get_EngagedDisplayImage
        {
            add
            {
                HookHandler._beforeget_EngagedDisplayImage += value;
                HookHandler.Hookget_EngagedDisplayImage();
            }
            remove => HookHandler._beforeget_EngagedDisplayImage -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_BeforeArgs get_AreAchievementsFetched
        {
            add
            {
                HookHandler._beforeget_AreAchievementsFetched += value;
                HookHandler.Hookget_AreAchievementsFetched();
            }
            remove => HookHandler._beforeget_AreAchievementsFetched -= value;
        }

        public static event Delegates.get_HasNativeAchievementsDialog_BeforeArgs get_HasNativeAchievementsDialog
        {
            add
            {
                HookHandler._beforeget_HasNativeAchievementsDialog += value;
                HookHandler.Hookget_HasNativeAchievementsDialog();
            }
            remove => HookHandler._beforeget_HasNativeAchievementsDialog -= value;
        }

        public static event Delegates.PushAchievementUnlock_BeforeArgs PushAchievementUnlock
        {
            add
            {
                HookHandler._beforePushAchievementUnlock += value;
                HookHandler.HookPushAchievementUnlock();
            }
            remove => HookHandler._beforePushAchievementUnlock -= value;
        }

        public static event Delegates.IsAchievementUnlocked_BeforeArgs IsAchievementUnlocked
        {
            add
            {
                HookHandler._beforeIsAchievementUnlocked += value;
                HookHandler.HookIsAchievementUnlocked();
            }
            remove => HookHandler._beforeIsAchievementUnlocked -= value;
        }

        public static event Delegates.ResetAchievements_BeforeArgs ResetAchievements
        {
            add
            {
                HookHandler._beforeResetAchievements += value;
                HookHandler.HookResetAchievements();
            }
            remove => HookHandler._beforeResetAchievements -= value;
        }

        public static event Delegates.GetSaveContainerName_BeforeArgs GetSaveContainerName
        {
            add
            {
                HookHandler._beforeGetSaveContainerName += value;
                HookHandler.HookGetSaveContainerName();
            }
            remove => HookHandler._beforeGetSaveContainerName -= value;
        }

        public static event Delegates.GetSaveFileName_BeforeArgs GetSaveFileName
        {
            add
            {
                HookHandler._beforeGetSaveFileName += value;
                HookHandler.HookGetSaveFileName();
            }
            remove => HookHandler._beforeGetSaveFileName -= value;
        }

        public static event Delegates.get_HandlesGameSaves_BeforeArgs get_HandlesGameSaves
        {
            add
            {
                HookHandler._beforeget_HandlesGameSaves += value;
                HookHandler.Hookget_HandlesGameSaves();
            }
            remove => HookHandler._beforeget_HandlesGameSaves -= value;
        }

        public static event Delegates.get_WillPreloadSaveFiles_BeforeArgs get_WillPreloadSaveFiles
        {
            add
            {
                HookHandler._beforeget_WillPreloadSaveFiles += value;
                HookHandler.Hookget_WillPreloadSaveFiles();
            }
            remove => HookHandler._beforeget_WillPreloadSaveFiles -= value;
        }

        public static event Delegates.IsSaveSlotInUse_BeforeArgs IsSaveSlotInUse
        {
            add
            {
                HookHandler._beforeIsSaveSlotInUse += value;
                HookHandler.HookIsSaveSlotInUse();
            }
            remove => HookHandler._beforeIsSaveSlotInUse -= value;
        }

        public static event Delegates.ReadSaveSlot_BeforeArgs ReadSaveSlot
        {
            add
            {
                HookHandler._beforeReadSaveSlot += value;
                HookHandler.HookReadSaveSlot();
            }
            remove => HookHandler._beforeReadSaveSlot -= value;
        }

        public static event Delegates.WriteSaveSlot_BeforeArgs WriteSaveSlot
        {
            add
            {
                HookHandler._beforeWriteSaveSlot += value;
                HookHandler.HookWriteSaveSlot();
            }
            remove => HookHandler._beforeWriteSaveSlot -= value;
        }

        public static event Delegates.ClearSaveSlot_BeforeArgs ClearSaveSlot
        {
            add
            {
                HookHandler._beforeClearSaveSlot += value;
                HookHandler.HookClearSaveSlot();
            }
            remove => HookHandler._beforeClearSaveSlot -= value;
        }

        public static event Delegates.Succeeded_BeforeArgs Succeeded
        {
            add
            {
                HookHandler._beforeSucceeded += value;
                HookHandler.HookSucceeded();
            }
            remove => HookHandler._beforeSucceeded -= value;
        }

        public static event Delegates.AddUserComplete_BeforeArgs AddUserComplete
        {
            add
            {
                HookHandler._beforeAddUserComplete += value;
                HookHandler.HookAddUserComplete();
            }
            remove => HookHandler._beforeAddUserComplete -= value;
        }

        public static event Delegates.CompletePostSignInInitialization_BeforeArgs CompletePostSignInInitialization
        {
            add
            {
                HookHandler._beforeCompletePostSignInInitialization += value;
                HookHandler.HookCompletePostSignInInitialization();
            }
            remove => HookHandler._beforeCompletePostSignInInitialization -= value;
        }

        public static event Delegates.MigrateLocalSaves_BeforeArgs MigrateLocalSaves
        {
            add
            {
                HookHandler._beforeMigrateLocalSaves += value;
                HookHandler.HookMigrateLocalSaves();
            }
            remove => HookHandler._beforeMigrateLocalSaves -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.IsPackaged_NormalArgs IsPackaged
        {
            add
            {
                HookHandler._afterIsPackaged += value;
                HookHandler.HookIsPackaged();
            }
            remove => HookHandler._afterIsPackaged -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.get_EngagedDisplayName_NormalArgs get_EngagedDisplayName
        {
            add
            {
                HookHandler._afterget_EngagedDisplayName += value;
                HookHandler.Hookget_EngagedDisplayName();
            }
            remove => HookHandler._afterget_EngagedDisplayName -= value;
        }

        public static event Delegates.get_EngagedDisplayImage_NormalArgs get_EngagedDisplayImage
        {
            add
            {
                HookHandler._afterget_EngagedDisplayImage += value;
                HookHandler.Hookget_EngagedDisplayImage();
            }
            remove => HookHandler._afterget_EngagedDisplayImage -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_NormalArgs get_AreAchievementsFetched
        {
            add
            {
                HookHandler._afterget_AreAchievementsFetched += value;
                HookHandler.Hookget_AreAchievementsFetched();
            }
            remove => HookHandler._afterget_AreAchievementsFetched -= value;
        }

        public static event Delegates.get_HasNativeAchievementsDialog_NormalArgs get_HasNativeAchievementsDialog
        {
            add
            {
                HookHandler._afterget_HasNativeAchievementsDialog += value;
                HookHandler.Hookget_HasNativeAchievementsDialog();
            }
            remove => HookHandler._afterget_HasNativeAchievementsDialog -= value;
        }

        public static event Delegates.PushAchievementUnlock_NormalArgs PushAchievementUnlock
        {
            add
            {
                HookHandler._afterPushAchievementUnlock += value;
                HookHandler.HookPushAchievementUnlock();
            }
            remove => HookHandler._afterPushAchievementUnlock -= value;
        }

        public static event Delegates.IsAchievementUnlocked_NormalArgs IsAchievementUnlocked
        {
            add
            {
                HookHandler._afterIsAchievementUnlocked += value;
                HookHandler.HookIsAchievementUnlocked();
            }
            remove => HookHandler._afterIsAchievementUnlocked -= value;
        }

        public static event Delegates.ResetAchievements_NormalArgs ResetAchievements
        {
            add
            {
                HookHandler._afterResetAchievements += value;
                HookHandler.HookResetAchievements();
            }
            remove => HookHandler._afterResetAchievements -= value;
        }

        public static event Delegates.GetSaveContainerName_NormalArgs GetSaveContainerName
        {
            add
            {
                HookHandler._afterGetSaveContainerName += value;
                HookHandler.HookGetSaveContainerName();
            }
            remove => HookHandler._afterGetSaveContainerName -= value;
        }

        public static event Delegates.GetSaveFileName_NormalArgs GetSaveFileName
        {
            add
            {
                HookHandler._afterGetSaveFileName += value;
                HookHandler.HookGetSaveFileName();
            }
            remove => HookHandler._afterGetSaveFileName -= value;
        }

        public static event Delegates.get_HandlesGameSaves_NormalArgs get_HandlesGameSaves
        {
            add
            {
                HookHandler._afterget_HandlesGameSaves += value;
                HookHandler.Hookget_HandlesGameSaves();
            }
            remove => HookHandler._afterget_HandlesGameSaves -= value;
        }

        public static event Delegates.get_WillPreloadSaveFiles_NormalArgs get_WillPreloadSaveFiles
        {
            add
            {
                HookHandler._afterget_WillPreloadSaveFiles += value;
                HookHandler.Hookget_WillPreloadSaveFiles();
            }
            remove => HookHandler._afterget_WillPreloadSaveFiles -= value;
        }

        public static event Delegates.IsSaveSlotInUse_NormalArgs IsSaveSlotInUse
        {
            add
            {
                HookHandler._afterIsSaveSlotInUse += value;
                HookHandler.HookIsSaveSlotInUse();
            }
            remove => HookHandler._afterIsSaveSlotInUse -= value;
        }

        public static event Delegates.ReadSaveSlot_NormalArgs ReadSaveSlot
        {
            add
            {
                HookHandler._afterReadSaveSlot += value;
                HookHandler.HookReadSaveSlot();
            }
            remove => HookHandler._afterReadSaveSlot -= value;
        }

        public static event Delegates.WriteSaveSlot_NormalArgs WriteSaveSlot
        {
            add
            {
                HookHandler._afterWriteSaveSlot += value;
                HookHandler.HookWriteSaveSlot();
            }
            remove => HookHandler._afterWriteSaveSlot -= value;
        }

        public static event Delegates.ClearSaveSlot_NormalArgs ClearSaveSlot
        {
            add
            {
                HookHandler._afterClearSaveSlot += value;
                HookHandler.HookClearSaveSlot();
            }
            remove => HookHandler._afterClearSaveSlot -= value;
        }

        public static event Delegates.Succeeded_NormalArgs Succeeded
        {
            add
            {
                HookHandler._afterSucceeded += value;
                HookHandler.HookSucceeded();
            }
            remove => HookHandler._afterSucceeded -= value;
        }

        public static event Delegates.AddUserComplete_NormalArgs AddUserComplete
        {
            add
            {
                HookHandler._afterAddUserComplete += value;
                HookHandler.HookAddUserComplete();
            }
            remove => HookHandler._afterAddUserComplete -= value;
        }

        public static event Delegates.CompletePostSignInInitialization_NormalArgs CompletePostSignInInitialization
        {
            add
            {
                HookHandler._afterCompletePostSignInInitialization += value;
                HookHandler.HookCompletePostSignInInitialization();
            }
            remove => HookHandler._afterCompletePostSignInInitialization -= value;
        }

        public static event Delegates.MigrateLocalSaves_NormalArgs MigrateLocalSaves
        {
            add
            {
                HookHandler._afterMigrateLocalSaves += value;
                HookHandler.HookMigrateLocalSaves();
            }
            remove => HookHandler._afterMigrateLocalSaves -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GameCoreOnlineSubsystem.hook_IsPackaged IsPackaged
        {
            add => On.GameCoreOnlineSubsystem.IsPackaged += value;
            remove => On.GameCoreOnlineSubsystem.IsPackaged -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_Update Update
        {
            add => On.GameCoreOnlineSubsystem.Update += value;
            remove => On.GameCoreOnlineSubsystem.Update -= value;
        }

        public static event Delegates.get_EngagedDisplayName_NormalArgs get_EngagedDisplayName
        {
            add => HookEndpointManager.Add<Delegates.get_EngagedDisplayName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_EngagedDisplayName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_EngagedDisplayName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_EngagedDisplayName"), value);
        }

        public static event Delegates.get_EngagedDisplayImage_NormalArgs get_EngagedDisplayImage
        {
            add => HookEndpointManager.Add<Delegates.get_EngagedDisplayImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_EngagedDisplayImage"), value);
            remove => HookEndpointManager.Remove<Delegates.get_EngagedDisplayImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_EngagedDisplayImage"), value);
        }

        public static event Delegates.get_AreAchievementsFetched_NormalArgs get_AreAchievementsFetched
        {
            add => HookEndpointManager.Add<Delegates.get_AreAchievementsFetched_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_AreAchievementsFetched"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AreAchievementsFetched_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_AreAchievementsFetched"), value);
        }

        public static event Delegates.get_HasNativeAchievementsDialog_NormalArgs get_HasNativeAchievementsDialog
        {
            add => HookEndpointManager.Add<Delegates.get_HasNativeAchievementsDialog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_HasNativeAchievementsDialog"),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_HasNativeAchievementsDialog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_HasNativeAchievementsDialog"),
                value);
        }

        public static event On.GameCoreOnlineSubsystem.hook_PushAchievementUnlock PushAchievementUnlock
        {
            add => On.GameCoreOnlineSubsystem.PushAchievementUnlock += value;
            remove => On.GameCoreOnlineSubsystem.PushAchievementUnlock -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_IsAchievementUnlocked IsAchievementUnlocked
        {
            add => On.GameCoreOnlineSubsystem.IsAchievementUnlocked += value;
            remove => On.GameCoreOnlineSubsystem.IsAchievementUnlocked -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_ResetAchievements ResetAchievements
        {
            add => On.GameCoreOnlineSubsystem.ResetAchievements += value;
            remove => On.GameCoreOnlineSubsystem.ResetAchievements -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_GetSaveContainerName GetSaveContainerName
        {
            add => On.GameCoreOnlineSubsystem.GetSaveContainerName += value;
            remove => On.GameCoreOnlineSubsystem.GetSaveContainerName -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_GetSaveFileName GetSaveFileName
        {
            add => On.GameCoreOnlineSubsystem.GetSaveFileName += value;
            remove => On.GameCoreOnlineSubsystem.GetSaveFileName -= value;
        }

        public static event Delegates.get_HandlesGameSaves_NormalArgs get_HandlesGameSaves
        {
            add => HookEndpointManager.Add<Delegates.get_HandlesGameSaves_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_HandlesGameSaves"), value);
            remove => HookEndpointManager.Remove<Delegates.get_HandlesGameSaves_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_HandlesGameSaves"), value);
        }

        public static event Delegates.get_WillPreloadSaveFiles_NormalArgs get_WillPreloadSaveFiles
        {
            add => HookEndpointManager.Add<Delegates.get_WillPreloadSaveFiles_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_WillPreloadSaveFiles"), value);
            remove => HookEndpointManager.Remove<Delegates.get_WillPreloadSaveFiles_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCoreOnlineSubsystem), "get_WillPreloadSaveFiles"), value);
        }

        public static event On.GameCoreOnlineSubsystem.hook_IsSaveSlotInUse IsSaveSlotInUse
        {
            add => On.GameCoreOnlineSubsystem.IsSaveSlotInUse += value;
            remove => On.GameCoreOnlineSubsystem.IsSaveSlotInUse -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_ReadSaveSlot ReadSaveSlot
        {
            add => On.GameCoreOnlineSubsystem.ReadSaveSlot += value;
            remove => On.GameCoreOnlineSubsystem.ReadSaveSlot -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_WriteSaveSlot WriteSaveSlot
        {
            add => On.GameCoreOnlineSubsystem.WriteSaveSlot += value;
            remove => On.GameCoreOnlineSubsystem.WriteSaveSlot -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_ClearSaveSlot ClearSaveSlot
        {
            add => On.GameCoreOnlineSubsystem.ClearSaveSlot += value;
            remove => On.GameCoreOnlineSubsystem.ClearSaveSlot -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_Succeeded Succeeded
        {
            add => On.GameCoreOnlineSubsystem.Succeeded += value;
            remove => On.GameCoreOnlineSubsystem.Succeeded -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_AddUserComplete AddUserComplete
        {
            add => On.GameCoreOnlineSubsystem.AddUserComplete += value;
            remove => On.GameCoreOnlineSubsystem.AddUserComplete -= value;
        }

        public static event On.GameCoreOnlineSubsystem.hook_CompletePostSignInInitialization
            CompletePostSignInInitialization
            {
                add => On.GameCoreOnlineSubsystem.CompletePostSignInInitialization += value;
                remove => On.GameCoreOnlineSubsystem.CompletePostSignInInitialization -= value;
            }

        public static event On.GameCoreOnlineSubsystem.hook_MigrateLocalSaves MigrateLocalSaves
        {
            add => On.GameCoreOnlineSubsystem.MigrateLocalSaves += value;
            remove => On.GameCoreOnlineSubsystem.MigrateLocalSaves -= value;
        }
    }
}