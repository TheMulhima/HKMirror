using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for Logger class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLogger
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookLogInfo()
{
if (!HookedList.Contains("LogInfo"))
{
HookedList.Add("LogInfo");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogInfo", false), LogInfo);

}
}
internal static event Delegates.LogInfo_BeforeArgs _beforeLogInfo;
internal static event Delegates.LogInfo_AfterArgs _afterLogInfo;
private static void LogInfo(Action< string> orig,  string text)
{
Delegates.Params_LogInfo @params = new() 
{
text = text
};
if (_beforeLogInfo != null)
{
foreach (Delegates.LogInfo_BeforeArgs toInvoke in _beforeLogInfo.GetInvocationList())
{
try
{
_beforeLogInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
text = @params.text;
orig(text);
if (_afterLogInfo != null)
{
foreach (Delegates.LogInfo_AfterArgs toInvoke in _afterLogInfo.GetInvocationList())
{
try
{
_afterLogInfo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLogWarning()
{
if (!HookedList.Contains("LogWarning"))
{
HookedList.Add("LogWarning");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogWarning", false), LogWarning);

}
}
internal static event Delegates.LogWarning_BeforeArgs _beforeLogWarning;
internal static event Delegates.LogWarning_AfterArgs _afterLogWarning;
private static void LogWarning(Action< string> orig,  string text)
{
Delegates.Params_LogWarning @params = new() 
{
text = text
};
if (_beforeLogWarning != null)
{
foreach (Delegates.LogWarning_BeforeArgs toInvoke in _beforeLogWarning.GetInvocationList())
{
try
{
_beforeLogWarning?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
text = @params.text;
orig(text);
if (_afterLogWarning != null)
{
foreach (Delegates.LogWarning_AfterArgs toInvoke in _afterLogWarning.GetInvocationList())
{
try
{
_afterLogWarning.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLogError()
{
if (!HookedList.Contains("LogError"))
{
HookedList.Add("LogError");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogError", false), LogError);

}
}
internal static event Delegates.LogError_BeforeArgs _beforeLogError;
internal static event Delegates.LogError_AfterArgs _afterLogError;
private static void LogError(Action< string> orig,  string text)
{
Delegates.Params_LogError @params = new() 
{
text = text
};
if (_beforeLogError != null)
{
foreach (Delegates.LogError_BeforeArgs toInvoke in _beforeLogError.GetInvocationList())
{
try
{
_beforeLogError?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
text = @params.text;
orig(text);
if (_afterLogError != null)
{
foreach (Delegates.LogError_AfterArgs toInvoke in _afterLogError.GetInvocationList())
{
try
{
_afterLogError.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_LogInfo
{
public string text;
}
public delegate void LogInfo_BeforeArgs(Params_LogInfo args);
public delegate void LogInfo_AfterArgs(Params_LogInfo args);
public delegate void LogInfo_WithArgs (Action< string> orig,  string text);
public sealed class Params_LogWarning
{
public string text;
}
public delegate void LogWarning_BeforeArgs(Params_LogWarning args);
public delegate void LogWarning_AfterArgs(Params_LogWarning args);
public delegate void LogWarning_WithArgs (Action< string> orig,  string text);
public sealed class Params_LogError
{
public string text;
}
public delegate void LogError_BeforeArgs(Params_LogError args);
public delegate void LogError_AfterArgs(Params_LogError args);
public delegate void LogError_WithArgs (Action< string> orig,  string text);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.LogInfo_BeforeArgs LogInfo
{
add
{

HookHandler._beforeLogInfo += value;
HookHandler.HookLogInfo();
}
remove => HookHandler._beforeLogInfo -= value;
}
public static event Delegates.LogWarning_BeforeArgs LogWarning
{
add
{

HookHandler._beforeLogWarning += value;
HookHandler.HookLogWarning();
}
remove => HookHandler._beforeLogWarning -= value;
}
public static event Delegates.LogError_BeforeArgs LogError
{
add
{

HookHandler._beforeLogError += value;
HookHandler.HookLogError();
}
remove => HookHandler._beforeLogError -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.LogInfo_AfterArgs LogInfo
{
add
{

HookHandler._afterLogInfo += value;
HookHandler.HookLogInfo();
}
remove => HookHandler._afterLogInfo -= value;
}
public static event Delegates.LogWarning_AfterArgs LogWarning
{
add
{

HookHandler._afterLogWarning += value;
HookHandler.HookLogWarning();
}
remove => HookHandler._afterLogWarning -= value;
}
public static event Delegates.LogError_AfterArgs LogError
{
add
{

HookHandler._afterLogError += value;
HookHandler.HookLogError();
}
remove => HookHandler._afterLogError -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.LogInfo_WithArgs LogInfo
{
add => HookEndpointManager.Add<Delegates.LogInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogInfo", false), value);
remove => HookEndpointManager.Remove<Delegates.LogInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogInfo", false), value);
}
public static event Delegates.LogWarning_WithArgs LogWarning
{
add => HookEndpointManager.Add<Delegates.LogWarning_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogWarning", false), value);
remove => HookEndpointManager.Remove<Delegates.LogWarning_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogWarning", false), value);
}
public static event Delegates.LogError_WithArgs LogError
{
add => HookEndpointManager.Add<Delegates.LogError_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogError", false), value);
remove => HookEndpointManager.Remove<Delegates.LogError_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.Logger), "LogError", false), value);
}
}

}
