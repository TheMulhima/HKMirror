using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Logger = InControl.Logger;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Logger class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLogger
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookLogInfo()
        {
            if (!HookedList.Contains("LogInfo"))
            {
                HookedList.Add("LogInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Logger), "LogInfo", false), LogInfo);
            }
        }

        internal static event Delegates.LogInfo_BeforeArgs _beforeLogInfo;
        internal static event Delegates.LogInfo_NormalArgs _afterLogInfo;

        private static void LogInfo(Action<string> orig, string text)
        {
            Delegates.Params_LogInfo @params = new()
            {
                text = text
            };
            _beforeLogInfo?.Invoke(@params);
            text = @params.text;
            orig(text);
            if (_afterLogInfo != null) _afterLogInfo.Invoke(@params);
        }

        internal static void HookLogWarning()
        {
            if (!HookedList.Contains("LogWarning"))
            {
                HookedList.Add("LogWarning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Logger), "LogWarning", false), LogWarning);
            }
        }

        internal static event Delegates.LogWarning_BeforeArgs _beforeLogWarning;
        internal static event Delegates.LogWarning_NormalArgs _afterLogWarning;

        private static void LogWarning(Action<string> orig, string text)
        {
            Delegates.Params_LogWarning @params = new()
            {
                text = text
            };
            _beforeLogWarning?.Invoke(@params);
            text = @params.text;
            orig(text);
            if (_afterLogWarning != null) _afterLogWarning.Invoke(@params);
        }

        internal static void HookLogError()
        {
            if (!HookedList.Contains("LogError"))
            {
                HookedList.Add("LogError");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Logger), "LogError", false), LogError);
            }
        }

        internal static event Delegates.LogError_BeforeArgs _beforeLogError;
        internal static event Delegates.LogError_NormalArgs _afterLogError;

        private static void LogError(Action<string> orig, string text)
        {
            Delegates.Params_LogError @params = new()
            {
                text = text
            };
            _beforeLogError?.Invoke(@params);
            text = @params.text;
            orig(text);
            if (_afterLogError != null) _afterLogError.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void LogError_BeforeArgs(Params_LogError args);

        public delegate void LogError_NormalArgs(Params_LogError args);

        public delegate void LogInfo_BeforeArgs(Params_LogInfo args);

        public delegate void LogInfo_NormalArgs(Params_LogInfo args);

        public delegate void LogWarning_BeforeArgs(Params_LogWarning args);

        public delegate void LogWarning_NormalArgs(Params_LogWarning args);

        public sealed class Params_LogInfo
        {
            public string text;
        }

        public sealed class Params_LogWarning
        {
            public string text;
        }

        public sealed class Params_LogError
        {
            public string text;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.LogInfo_BeforeArgs LogInfo
        {
            add
            {
                HookHandler._beforeLogInfo += value;
                HookHandler.HookLogInfo();
            }
            remove => HookHandler._beforeLogInfo -= value;
        }

        public static event Delegates.LogWarning_BeforeArgs LogWarning
        {
            add
            {
                HookHandler._beforeLogWarning += value;
                HookHandler.HookLogWarning();
            }
            remove => HookHandler._beforeLogWarning -= value;
        }

        public static event Delegates.LogError_BeforeArgs LogError
        {
            add
            {
                HookHandler._beforeLogError += value;
                HookHandler.HookLogError();
            }
            remove => HookHandler._beforeLogError -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.LogInfo_NormalArgs LogInfo
        {
            add
            {
                HookHandler._afterLogInfo += value;
                HookHandler.HookLogInfo();
            }
            remove => HookHandler._afterLogInfo -= value;
        }

        public static event Delegates.LogWarning_NormalArgs LogWarning
        {
            add
            {
                HookHandler._afterLogWarning += value;
                HookHandler.HookLogWarning();
            }
            remove => HookHandler._afterLogWarning -= value;
        }

        public static event Delegates.LogError_NormalArgs LogError
        {
            add
            {
                HookHandler._afterLogError += value;
                HookHandler.HookLogError();
            }
            remove => HookHandler._afterLogError -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.LogInfo_NormalArgs LogInfo
        {
            add => HookEndpointManager.Add<Delegates.LogInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Logger), "LogInfo", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Logger), "LogInfo", false), value);
        }

        public static event Delegates.LogWarning_NormalArgs LogWarning
        {
            add => HookEndpointManager.Add<Delegates.LogWarning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Logger), "LogWarning", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogWarning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Logger), "LogWarning", false), value);
        }

        public static event Delegates.LogError_NormalArgs LogError
        {
            add => HookEndpointManager.Add<Delegates.LogError_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Logger), "LogError", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogError_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Logger), "LogError", false), value);
        }
    }
}