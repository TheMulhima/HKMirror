using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MarshalUtility class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMarshalUtility
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCopy()
        {
            if (!HookedList.Contains("Copy"))
            {
                HookedList.Add("Copy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MarshalUtility), "Copy", false), Copy);
            }
        }

        internal static event Delegates.Copy_BeforeArgs _beforeCopy;
        internal static event Delegates.Copy_AfterArgs _afterCopy;

        private static void Copy(Action<IntPtr, uint[], int> orig, IntPtr source, uint[] destination, int length)
        {
            Delegates.Params_Copy @params = new()
            {
                source = source, destination = destination, length = length
            };
            if (_beforeCopy != null)
                foreach (Delegates.Copy_BeforeArgs toInvoke in _beforeCopy.GetInvocationList())
                    try
                    {
                        _beforeCopy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            destination = @params.destination;
            length = @params.length;
            orig(source, destination, length);
            if (_afterCopy != null)
                foreach (Delegates.Copy_AfterArgs toInvoke in _afterCopy.GetInvocationList())
                    try
                    {
                        _afterCopy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Copy_AfterArgs(Params_Copy args);

        public delegate void Copy_BeforeArgs(Params_Copy args);

        public delegate void Copy_WithArgs(Action<IntPtr, uint[], int> orig, IntPtr source, uint[] destination,
            int length);

        public sealed class Params_Copy
        {
            public uint[] destination;
            public int length;
            public IntPtr source;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Copy_BeforeArgs Copy
        {
            add
            {
                HookHandler._beforeCopy += value;
                HookHandler.HookCopy();
            }
            remove => HookHandler._beforeCopy -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Copy_AfterArgs Copy
        {
            add
            {
                HookHandler._afterCopy += value;
                HookHandler.HookCopy();
            }
            remove => HookHandler._afterCopy -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Copy_WithArgs Copy
        {
            add => HookEndpointManager.Add<Delegates.Copy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MarshalUtility), "Copy", false), value);
            remove => HookEndpointManager.Remove<Delegates.Copy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MarshalUtility), "Copy", false), value);
        }
    }
}