using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for BrightnessSetting class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBrightnessSetting
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BrightnessSetting.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.BrightnessSetting.orig_Start orig, BrightnessSetting self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateValue()
        {
            if (!HookedList.Contains("UpdateValue"))
            {
                HookedList.Add("UpdateValue");
                On.BrightnessSetting.UpdateValue += UpdateValue;
            }
        }

        internal static event Delegates.UpdateValue_BeforeArgs _beforeUpdateValue;
        internal static event Delegates.UpdateValue_AfterArgs _afterUpdateValue;

        private static void UpdateValue(On.BrightnessSetting.orig_UpdateValue orig, BrightnessSetting self)
        {
            Delegates.Params_UpdateValue @params = new()
            {
                self = self
            };
            if (_beforeUpdateValue != null)
            {
                foreach (Delegates.UpdateValue_BeforeArgs toInvoke in _beforeUpdateValue.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateValue != null)
            {
                foreach (Delegates.UpdateValue_AfterArgs toInvoke in _afterUpdateValue.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateTextValue()
        {
            if (!HookedList.Contains("UpdateTextValue"))
            {
                HookedList.Add("UpdateTextValue");
                On.BrightnessSetting.UpdateTextValue += UpdateTextValue;
            }
        }

        internal static event Delegates.UpdateTextValue_BeforeArgs _beforeUpdateTextValue;
        internal static event Delegates.UpdateTextValue_AfterArgs _afterUpdateTextValue;

        private static void UpdateTextValue(On.BrightnessSetting.orig_UpdateTextValue orig, BrightnessSetting self,
            float value)
        {
            Delegates.Params_UpdateTextValue @params = new()
            {
                self = self, value = value
            };
            if (_beforeUpdateTextValue != null)
            {
                foreach (Delegates.UpdateTextValue_BeforeArgs toInvoke in _beforeUpdateTextValue.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateTextValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterUpdateTextValue != null)
            {
                foreach (Delegates.UpdateTextValue_AfterArgs toInvoke in _afterUpdateTextValue.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateTextValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetBrightness()
        {
            if (!HookedList.Contains("SetBrightness"))
            {
                HookedList.Add("SetBrightness");
                On.BrightnessSetting.SetBrightness += SetBrightness;
            }
        }

        internal static event Delegates.SetBrightness_BeforeArgs _beforeSetBrightness;
        internal static event Delegates.SetBrightness_AfterArgs _afterSetBrightness;

        private static void SetBrightness(On.BrightnessSetting.orig_SetBrightness orig, BrightnessSetting self,
            float value)
        {
            Delegates.Params_SetBrightness @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetBrightness != null)
            {
                foreach (Delegates.SetBrightness_BeforeArgs toInvoke in _beforeSetBrightness.GetInvocationList())
                {
                    try
                    {
                        _beforeSetBrightness?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetBrightness != null)
            {
                foreach (Delegates.SetBrightness_AfterArgs toInvoke in _afterSetBrightness.GetInvocationList())
                {
                    try
                    {
                        _afterSetBrightness.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshValueFromSettings()
        {
            if (!HookedList.Contains("RefreshValueFromSettings"))
            {
                HookedList.Add("RefreshValueFromSettings");
                On.BrightnessSetting.RefreshValueFromSettings += RefreshValueFromSettings;
            }
        }

        internal static event Delegates.RefreshValueFromSettings_BeforeArgs _beforeRefreshValueFromSettings;
        internal static event Delegates.RefreshValueFromSettings_AfterArgs _afterRefreshValueFromSettings;

        private static void RefreshValueFromSettings(On.BrightnessSetting.orig_RefreshValueFromSettings orig,
            BrightnessSetting self)
        {
            Delegates.Params_RefreshValueFromSettings @params = new()
            {
                self = self
            };
            if (_beforeRefreshValueFromSettings != null)
            {
                foreach (Delegates.RefreshValueFromSettings_BeforeArgs toInvoke in _beforeRefreshValueFromSettings
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshValueFromSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRefreshValueFromSettings != null)
            {
                foreach (Delegates.RefreshValueFromSettings_AfterArgs toInvoke in _afterRefreshValueFromSettings
                             .GetInvocationList())
                {
                    try
                    {
                        _afterRefreshValueFromSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoneMode()
        {
            if (!HookedList.Contains("DoneMode"))
            {
                HookedList.Add("DoneMode");
                On.BrightnessSetting.DoneMode += DoneMode;
            }
        }

        internal static event Delegates.DoneMode_BeforeArgs _beforeDoneMode;
        internal static event Delegates.DoneMode_AfterArgs _afterDoneMode;

        private static void DoneMode(On.BrightnessSetting.orig_DoneMode orig, BrightnessSetting self)
        {
            Delegates.Params_DoneMode @params = new()
            {
                self = self
            };
            if (_beforeDoneMode != null)
            {
                foreach (Delegates.DoneMode_BeforeArgs toInvoke in _beforeDoneMode.GetInvocationList())
                {
                    try
                    {
                        _beforeDoneMode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoneMode != null)
            {
                foreach (Delegates.DoneMode_AfterArgs toInvoke in _afterDoneMode.GetInvocationList())
                {
                    try
                    {
                        _afterDoneMode.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookNormalMode()
        {
            if (!HookedList.Contains("NormalMode"))
            {
                HookedList.Add("NormalMode");
                On.BrightnessSetting.NormalMode += NormalMode;
            }
        }

        internal static event Delegates.NormalMode_BeforeArgs _beforeNormalMode;
        internal static event Delegates.NormalMode_AfterArgs _afterNormalMode;

        private static void NormalMode(On.BrightnessSetting.orig_NormalMode orig, BrightnessSetting self)
        {
            Delegates.Params_NormalMode @params = new()
            {
                self = self
            };
            if (_beforeNormalMode != null)
            {
                foreach (Delegates.NormalMode_BeforeArgs toInvoke in _beforeNormalMode.GetInvocationList())
                {
                    try
                    {
                        _beforeNormalMode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterNormalMode != null)
            {
                foreach (Delegates.NormalMode_AfterArgs toInvoke in _afterNormalMode.GetInvocationList())
                {
                    try
                    {
                        _afterNormalMode.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public BrightnessSetting self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<BrightnessSetting> orig, BrightnessSetting self);

        public sealed class Params_UpdateValue
        {
            public BrightnessSetting self;
        }

        public delegate void UpdateValue_BeforeArgs(Params_UpdateValue args);

        public delegate void UpdateValue_AfterArgs(Params_UpdateValue args);

        public delegate void UpdateValue_WithArgs(Action<BrightnessSetting> orig, BrightnessSetting self);

        public sealed class Params_UpdateTextValue
        {
            public BrightnessSetting self;
            public float value;
        }

        public delegate void UpdateTextValue_BeforeArgs(Params_UpdateTextValue args);

        public delegate void UpdateTextValue_AfterArgs(Params_UpdateTextValue args);

        public delegate void UpdateTextValue_WithArgs(Action<BrightnessSetting, float> orig, BrightnessSetting self,
            float value);

        public sealed class Params_SetBrightness
        {
            public BrightnessSetting self;
            public float value;
        }

        public delegate void SetBrightness_BeforeArgs(Params_SetBrightness args);

        public delegate void SetBrightness_AfterArgs(Params_SetBrightness args);

        public delegate void SetBrightness_WithArgs(Action<BrightnessSetting, float> orig, BrightnessSetting self,
            float value);

        public sealed class Params_RefreshValueFromSettings
        {
            public BrightnessSetting self;
        }

        public delegate void RefreshValueFromSettings_BeforeArgs(Params_RefreshValueFromSettings args);

        public delegate void RefreshValueFromSettings_AfterArgs(Params_RefreshValueFromSettings args);

        public delegate void RefreshValueFromSettings_WithArgs(Action<BrightnessSetting> orig, BrightnessSetting self);

        public sealed class Params_DoneMode
        {
            public BrightnessSetting self;
        }

        public delegate void DoneMode_BeforeArgs(Params_DoneMode args);

        public delegate void DoneMode_AfterArgs(Params_DoneMode args);

        public delegate void DoneMode_WithArgs(Action<BrightnessSetting> orig, BrightnessSetting self);

        public sealed class Params_NormalMode
        {
            public BrightnessSetting self;
        }

        public delegate void NormalMode_BeforeArgs(Params_NormalMode args);

        public delegate void NormalMode_AfterArgs(Params_NormalMode args);

        public delegate void NormalMode_WithArgs(Action<BrightnessSetting> orig, BrightnessSetting self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UpdateValue_BeforeArgs UpdateValue
        {
            add
            {
                HookHandler._beforeUpdateValue += value;
                HookHandler.HookUpdateValue();
            }
            remove => HookHandler._beforeUpdateValue -= value;
        }

        public static event Delegates.UpdateTextValue_BeforeArgs UpdateTextValue
        {
            add
            {
                HookHandler._beforeUpdateTextValue += value;
                HookHandler.HookUpdateTextValue();
            }
            remove => HookHandler._beforeUpdateTextValue -= value;
        }

        public static event Delegates.SetBrightness_BeforeArgs SetBrightness
        {
            add
            {
                HookHandler._beforeSetBrightness += value;
                HookHandler.HookSetBrightness();
            }
            remove => HookHandler._beforeSetBrightness -= value;
        }

        public static event Delegates.RefreshValueFromSettings_BeforeArgs RefreshValueFromSettings
        {
            add
            {
                HookHandler._beforeRefreshValueFromSettings += value;
                HookHandler.HookRefreshValueFromSettings();
            }
            remove => HookHandler._beforeRefreshValueFromSettings -= value;
        }

        public static event Delegates.DoneMode_BeforeArgs DoneMode
        {
            add
            {
                HookHandler._beforeDoneMode += value;
                HookHandler.HookDoneMode();
            }
            remove => HookHandler._beforeDoneMode -= value;
        }

        public static event Delegates.NormalMode_BeforeArgs NormalMode
        {
            add
            {
                HookHandler._beforeNormalMode += value;
                HookHandler.HookNormalMode();
            }
            remove => HookHandler._beforeNormalMode -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UpdateValue_AfterArgs UpdateValue
        {
            add
            {
                HookHandler._afterUpdateValue += value;
                HookHandler.HookUpdateValue();
            }
            remove => HookHandler._afterUpdateValue -= value;
        }

        public static event Delegates.UpdateTextValue_AfterArgs UpdateTextValue
        {
            add
            {
                HookHandler._afterUpdateTextValue += value;
                HookHandler.HookUpdateTextValue();
            }
            remove => HookHandler._afterUpdateTextValue -= value;
        }

        public static event Delegates.SetBrightness_AfterArgs SetBrightness
        {
            add
            {
                HookHandler._afterSetBrightness += value;
                HookHandler.HookSetBrightness();
            }
            remove => HookHandler._afterSetBrightness -= value;
        }

        public static event Delegates.RefreshValueFromSettings_AfterArgs RefreshValueFromSettings
        {
            add
            {
                HookHandler._afterRefreshValueFromSettings += value;
                HookHandler.HookRefreshValueFromSettings();
            }
            remove => HookHandler._afterRefreshValueFromSettings -= value;
        }

        public static event Delegates.DoneMode_AfterArgs DoneMode
        {
            add
            {
                HookHandler._afterDoneMode += value;
                HookHandler.HookDoneMode();
            }
            remove => HookHandler._afterDoneMode -= value;
        }

        public static event Delegates.NormalMode_AfterArgs NormalMode
        {
            add
            {
                HookHandler._afterNormalMode += value;
                HookHandler.HookNormalMode();
            }
            remove => HookHandler._afterNormalMode -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BrightnessSetting.hook_Start Start
        {
            add => On.BrightnessSetting.Start += value;
            remove => On.BrightnessSetting.Start -= value;
        }

        public static event On.BrightnessSetting.hook_UpdateValue UpdateValue
        {
            add => On.BrightnessSetting.UpdateValue += value;
            remove => On.BrightnessSetting.UpdateValue -= value;
        }

        public static event On.BrightnessSetting.hook_UpdateTextValue UpdateTextValue
        {
            add => On.BrightnessSetting.UpdateTextValue += value;
            remove => On.BrightnessSetting.UpdateTextValue -= value;
        }

        public static event On.BrightnessSetting.hook_SetBrightness SetBrightness
        {
            add => On.BrightnessSetting.SetBrightness += value;
            remove => On.BrightnessSetting.SetBrightness -= value;
        }

        public static event On.BrightnessSetting.hook_RefreshValueFromSettings RefreshValueFromSettings
        {
            add => On.BrightnessSetting.RefreshValueFromSettings += value;
            remove => On.BrightnessSetting.RefreshValueFromSettings -= value;
        }

        public static event On.BrightnessSetting.hook_DoneMode DoneMode
        {
            add => On.BrightnessSetting.DoneMode += value;
            remove => On.BrightnessSetting.DoneMode -= value;
        }

        public static event On.BrightnessSetting.hook_NormalMode NormalMode
        {
            add => On.BrightnessSetting.NormalMode += value;
            remove => On.BrightnessSetting.NormalMode -= value;
        }
    }
}